policies:
  - uid: mondoo-slack-security
    name: Slack Security Best Practices by Mondoo
    version: 1.0.0
    authors:
      - name: Mondoo, Inc
        email: hello@mondoo.com
    docs:
      desc: |
        ## Overview

        The Mondoo Slack Security policy ensure best-practice settings for Slack.

        ### Prerequisites

        To run this query pack, you will need access to the Slack API. To get a token, you need to create an App for the Slack workspace 
        and assign the appropriate permissions:

        1. Sign in to [the Slack website](https://api.slack.com/apps/), and view "Your Apps"
        2. Click "Create New App"
        3. Select "From scratch"
        4. Enter an "App Name" e.g. cnquery and select the workspace, then click "Create App"
        5. In the section "Add features & functionality" click on "Permissions"
        6. Scroll to "Scopes" and then "User Token Scopes"
 
          Note: Bots are very limited in their access; therefore we need to set the user scopes

        7. Add the required permissions to "User Token Scopes"

          | OAuth Scope  |
          | ---- | 
          | [channels:read](https://api.slack.com/scopes/channels:read) | 
          | [groups:read](https://api.slack.com/scopes/groups:read) |
          | [im:read](https://api.slack.com/scopes/im:read) |
          | [mpim:read](https://api.slack.com/scopes/mpim:read) | 
          | [team:read](https://api.slack.com/scopes/team:read) | 
          | [usergroups:read](https://api.slack.com/scopes/usergroups:read) | 
          | [users:read](https://api.slack.com/scopes/users:read) |

        8. Scroll up to "OAuth Tokens for Your Workspace" and click "Install to Workspace"
        9. Copy the provided "User OAuth Token", it will look like `xoxp-1234567890123-1234567890123-1234567890123-12345cea5ae0d3bed30dca43cb34c2d1`

        ### Run query pack

        To run this query pack against a GitHub Organization:

        ```bash
        export SLACK_TOKEN=xoxp-TOKEN
        cnspec scan slack --policy-bundle mondoo-slack-security
        ```

        ## Join the community!

        Our goal is to build policies that are simple to deploy, accurate, and actionable. 
        
        If you have any suggestions on how to improve this policy, or if you need support, [join the community](https://github.com/orgs/mondoohq/discussions) in GitHub Discussions.
    props:
      externalChannelName:
    specs:
      - asset_filter:
          query: asset.platform == "slack"
        scoring_queries:
          mondoo-slack-security-limit-admins:
          mondoo-slack-security-use-strong-factors:
          mondoo-slack-security-name-external-channels:
        data_queries:
          mondoo-slack-security-team:
          mondoo-slack-security-list-admins:

props:
  - uid: externalChannelName
    title: External Channel Name Pattern
    query: /ext/
queries:
  # Scoring Queries
  - uid: mondoo-slack-security-limit-admins
    title: Ensure fewer than 3 users have Admin Permissions
    query: slack.users.admins.length < 3
  - uid: mondoo-slack-security-use-strong-factors
    title: Ensure 2-Step Verification (Multi-Factor Authentication) is enforced for all users
    query: slack.users.members.all( has2FA == true || enterpriseUser != null || id=="USLACKBOT" )
  - uid: mondoo-slack-security-name-external-channels
    title: Use clear naming for external channels
    query: slack.conversations.where(isExtShared && isChannel ) { name == props.externalChannelName }

  # Data Collection
  - uid: mondoo-slack-security-list-admins
    title: Slack Admins
    query: slack.users.admins { id name }
  - uid: mondoo-slack-security-team
    title: Slack Team
    query: slack.team { id name }
