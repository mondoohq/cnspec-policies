# Copyright (c) Mondoo, Inc.
# SPDX-License-Identifier: BUSL-1.1

policies:
  - uid: mondoo-azure-security
    name: Microsoft Azure Security
    version: 1.5.0
    license: BUSL-1.1
    tags:
      mondoo.com/category: security
      mondoo.com/platform: azure,cloud
    authors:
      - name: Mondoo, Inc
        email: hello@mondoo.com
    docs:
      desc: |-
        ## Overview

        Microsoft Azure Security by Mondoo provides guidance for establishing minimum recommended security and operational best practices for Microsoft Azure.

        ## Remote scan

        Remote scans use cnspec providers to retrieve on-demand scan results without having to install any agents.

        For a complete list of providers, run:

        ```bash
        cnspec scan --help
        ```

        ### Prerequisites

        Remote scans of Azure require API credentials with access to the subscription.

        Note: Some of the checks in this policy query data using Microsoft's Graph API. To successfully run these checks, you must create an Azure AD app registration for cnspec with proper permissions. Follow the instructions on https://mondoo.com/docs/platform/infra/cloud/azure/azure-integration-scan-subscription/ to set up this app.

        To run all checks at the same time, ensure your app registration has the necessary permissions (as described in the document linked above) and then run:

        ```bash
        cnspec scan azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id> --policy-bundle mondoo-azure-security.mql.yaml
        ```

        ### Scan an Azure subscription

        ```bash
        cnspec scan azure --subscription <subscription_id>
        ```

        ## Join the community!

        Our goal is to build policies that are simple to deploy, accurate, and actionable.

        If you have any suggestions for how to improve this policy or need support, [join the community](https://github.com/orgs/mondoohq/discussions) in GitHub Discussions.
    groups:
      - title: Azure Core
        filters: |
          asset.runtime == "azure"
        checks:
          - uid: mondoo-azure-security-default-network-access-rule-storage-accounts-deny
          - uid: mondoo-azure-security-diagnostic-settings-essential-categories
          - uid: mondoo-azure-security-diagnostic-settings-exist
          - uid: mondoo-azure-security-disable-udp-virtualmachines
          - uid: mondoo-azure-security-ensure-activity-log-alert-exists-for-create-update-delete-network-security-group
          - uid: mondoo-azure-security-ensure-auditing-retention-greater-than-30-days
          - uid: mondoo-azure-security-ensure-disabled-public-access-sql
          - uid: mondoo-azure-security-ensure-logging-enabled-kv
          - uid: mondoo-azure-security-ensure-os-disk-are-encrypted
          - uid: mondoo-azure-security-ensure-register-with-ad-is-enabled-on-app-service
          - uid: mondoo-azure-security-ensure-that-notify-about-alerts-with-high-severity-is-on
          - uid: mondoo-azure-security-ensure-that-ssl-enabled-latest-version-mysql
          - uid: mondoo-azure-security-ensure-that-ssl-enabled-postgresql
          - uid: mondoo-azure-security-ensure-the-expiration-date-is-set-for-all-keys-and-secrets-in-kv
          - uid: mondoo-azure-security-ensure-the-kv-is-recoverable
          - uid: mondoo-azure-security-ensure-web-app-is-using-the-latest-tls
          - uid: mondoo-azure-security-keyvault-public-access-disabled
          - uid: mondoo-azure-security-no-sql-databases-allow-ingress-0-0-0-0-0
          - uid: mondoo-azure-security-public-access-level-private-blob-containers
          - uid: mondoo-azure-security-rdp-access-restricted-from-internet
          - uid: mondoo-azure-security-secure-transfer-required-enabled
          - uid: mondoo-azure-security-sql-server-audit-on
          - uid: mondoo-azure-security-sql-server-tde-on
          - uid: mondoo-azure-security-ssh-access-restricted-from-internet
          - uid: mondoo-azure-security-trusted-microsoft-services-enabled-for-storage-account-access
    scoring_system: 2
queries:
  - uid: mondoo-azure-security-ensure-os-disk-are-encrypted
    title: Ensure that OS disks are encrypted
    impact: 80
    variants:
      - uid: mondoo-azure-security-ensure-os-disk-are-encrypted-single
      - uid: mondoo-azure-security-ensure-os-disk-are-encrypted-api
    docs:
      desc: |
        This check ensures that both OS disks (boot volumes) are encrypted. Customer managed keys can be either Azure Disk Encryption (ADE) or server-side encryption (SSE).
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Run this query:

          ```bash
          cnspec run azure -c "azure.subscription.compute.vms.all(osDisk.properties.encryption != empty)"
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Launch `cnspec shell`:

          ```bash
          cnspec shell azure
          ```

        3. Run this query:

          ```mql
          azure.subscription.compute.vms.all(osDisk.properties.encryption != empty)
          ```
      remediation: |
        ### Terraform

        __Encrypt disks Linux VM__

        ```hcl
        # Encrypt Linux OS disk with Terraform
        resource "azure_linux_virtual_machine" "example" {
          name                = "example-linux-machine"
          resource_group_name = azure_resource_group.example.name
          location            = azure_resource_group.example.location

          ...

          encryption_at_host_enabled = true

          ...
        }
        ```

        __Encrypt disks Windows VM__

        ```hcl
        resource "azure_windows_virtual_machine" "example" {
          name                = "example-windows-machine"
          resource_group_name = azure_resource_group.example.name
          location            = azure_resource_group.example.location

          ...

          encryption_at_host_enabled = true

          ...
        }
        ```

        __Encrypt disks managed disks__

        ```hcl
        resource "azure_managed_disk" "example" {
          name                 = var.disk_name
          location             = var.location
          resource_group_name  = var.resource_group_name
          ...

          encryption_settings {
            enabled = true
          }

          ...
        }
        ```

        ### Microsoft Azure Portal

        To update using Microsoft Azure Portal:

        1. Log into Microsoft Azure Portal at https://portal.azure.com.
        2. Go to **Virtual machines**.
        3. For each virtual machine:
           a. Select the virtual machine.
           b. Select **Disks**.
           c. Select the **X** to detach the disk from the VM.
           d. Search for **Disks** and locate any unattached disk.
           e. Select the disk and select **Encryption**.
           f. Change the encryption type, then select the encryption set.
           g. Select **Save**.
           h. Go back to the VM and re-attach the disk.

        ### Azure CLI

        ```bash
        az vm encryption enable -g <resource_group> --name <vm_name> --disk-encryption-keyvault <keyvault_name> --key-encryption-key <key_name> --volume-type [ALL|OS|DATA]
        ```
    refs:
      - url: https://learn.microsoft.com/en-us/azure/virtual-machines/disk-encryption-overview
        title: Overview of managed disk encryption options
  - uid: mondoo-azure-security-ensure-os-disk-are-encrypted-single
    filters: |
      asset.platform == "azure-compute-vm-api"
      asset.kind == "azure-object"
    mql: |
      azure.subscription.compute.vm.osDisk.properties.encryption != empty
  - uid: mondoo-azure-security-ensure-os-disk-are-encrypted-api
    filters: |
      asset.platform == "azure"
      asset.kind == "api"
    mql: |
      azure.subscription.compute.vms.all(osDisk.properties.encryption != empty)
  - uid: mondoo-azure-security-ssh-access-restricted-from-internet
    title: Ensure that SSH access is restricted from the internet
    impact: 80
    props:
      - uid: disallowedPortsSSH
        title: a list of disallowed TCP ports, by default SSH listens only on TCP port 22, add more ports as needed
        mql: |
          return [
            22,
          ]
    variants:
      - uid: mondoo-azure-security-ssh-access-restricted-from-internet-single
      - uid: mondoo-azure-security-ssh-access-restricted-from-internet-api
    docs:
      desc: |
        This check ensures that SSH on port 22 is not configured to allow access from anywhere with the CIDR block "0.0.0.0".
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Run this query:

          ```bash
          cnspec run azure -c "allNsgTCP = azure.subscription.network.securityGroups.where(securityRules
        .where(
          properties.access == 'Allow'
            && direction == 'Inbound'
            && properties.protocol == /TCP|\*/i
            && properties.sourceAddressPrefix == /\*|0\.0\.0\.0|<nw>\/0|\/0|internet|any/
        )
        )
        allNsgTCP.all(securityRules.all(properties.destinationPortRange != "*"))
        allNsgTCP.all(securityRules.none(destinationPortRange.any(fromPort <= 22 && toPort >= 22)))"
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Launch `cnspec shell`:

          ```bash
          cnspec shell azure
          ```

        3. Run this query:

          ```mql
          allNsgTCP = azure.subscription.network.securityGroups.where(securityRules
        .where(
          properties.access == 'Allow'
            && direction == 'Inbound'
            && properties.protocol == /TCP|\*/i
            && properties.sourceAddressPrefix == /\*|0\.0\.0\.0|<nw>\/0|\/0|internet|any/
        )
        )
        allNsgTCP.all(securityRules.all(properties.destinationPortRange != "*"))
        allNsgTCP.all(securityRules.none(destinationPortRange.any(fromPort <= 22 && toPort >= 22)))
          ```
      remediation: |
        ### Terraform

        ```hcl
        # Ensure the `source_address_prefix` is configured to a restrictive CIDR address

        resource "azure_network_security_group" "my_terraform_nsg" {
          name                = "myNetworkSecurityGroup"
          location            = azure_resource_group.rg.location
          resource_group_name = azure_resource_group.rg.name

          security_rule {
            name                       = "SSH"
            priority                   = 1001
            direction                  = "Inbound"
            access                     = "Allow"
            protocol                   = "Tcp"
            source_port_range          = "*"
            destination_port_range     = "22"
            source_address_prefix      = "192.168.22.5/24"
            destination_address_prefix = "*"
          }
        }
        ```
  - uid: mondoo-azure-security-ssh-access-restricted-from-internet-single
    filters: |
      asset.platform == "azure-network-security-group"
      asset.kind == "azure-object"
    mql: |
      allNsgTCP = azure.subscription.network.securityGroup.securityRules
        .where(
          properties.access == 'Allow'
            && direction == 'Inbound'
            && properties.protocol == /TCP|\*/i
            && properties.sourceAddressPrefix == /\*|0\.0\.0\.0|<nw>\/0|\/0|internet|any/
        )
      allNsgTCP.all(properties.destinationPortRange != "*")
      props.disallowedPortsSSH {
        disallowedPortSSH = _
        disallowedPortSSH
        allNsgTCP.none(destinationPortRange.any(fromPort <= disallowedPortSSH && toPort >= disallowedPortSSH))
      }
  - uid: mondoo-azure-security-ssh-access-restricted-from-internet-api
    filters: |
      asset.platform == "azure"
      asset.kind == "api"
    mql: |
      allNsgTCP = azure.subscription.network.securityGroups.where(securityRules
        .where(
          properties.access == 'Allow'
            && direction == 'Inbound'
            && properties.protocol == /TCP|\*/i
            && properties.sourceAddressPrefix == /\*|0\.0\.0\.0|<nw>\/0|\/0|internet|any/
        )
      )
      allNsgTCP.all(securityRules.all(properties.destinationPortRange != "*"))
      props.disallowedPortsSSH {
        disallowedPortSSH = _
        disallowedPortSSH
        allNsgTCP.all(securityRules.none(destinationPortRange.any(fromPort <= disallowedPortSSH && toPort >= disallowedPortSSH)))
      }
  - uid: mondoo-azure-security-rdp-access-restricted-from-internet
    title: Ensure that RDP access is restricted from the internet
    impact: 80
    props:
      - uid: disallowedPortsRDP
        title: a list of disallowed TCP ports, by default RDP listens only on TCP port 3389, add more ports as needed
        mql: |
          return [
            3389,
          ]
    variants:
      - uid: mondoo-azure-security-rdp-access-restricted-from-internet-single
      - uid: mondoo-azure-security-rdp-access-restricted-from-internet-api
    docs:
      desc: |
        This check ensures that RDP on port 3389 is not configured to allow access from anywhere with the CIDR block "0.0.0.0".
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Run this query:

          ```bash
          cnspec run azure -c "allNsgTCP = azure.subscription.network.securityGroups.where(securityRules
        .where(
          properties.access == 'Allow'
            && direction == 'Inbound'
            && properties.protocol == /TCP|\*/i
            && properties.sourceAddressPrefix == /\*|0\.0\.0\.0|<nw>\/0|\/0|internet|any/
        )
        )
        allNsgTCP.all(securityRules.all(properties.destinationPortRange != "*"))
        allNsgTCP.all(securityRules.none(destinationPortRange.any(fromPort <= 3389 && toPort >= 3389)))"
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Launch `cnspec shell`:

          ```bash
          cnspec shell azure
          ```

        3. Run this query:

          ```mql
          allNsgTCP = azure.subscription.network.securityGroups.where(securityRules
        .where(
          properties.access == 'Allow'
            && direction == 'Inbound'
            && properties.protocol == /TCP|\*/i
            && properties.sourceAddressPrefix == /\*|0\.0\.0\.0|<nw>\/0|\/0|internet|any/
        )
        )
        allNsgTCP.all(securityRules.all(properties.destinationPortRange != "*"))
        allNsgTCP.all(securityRules.none(destinationPortRange.any(fromPort <= 3389 && toPort >= 3389)))
          ```
      remediation: |
        ### Terraform

        ```hcl
        # Ensure the `source_address_prefix` is configured to a restrictive CIDR address

        resource "azure_network_security_group" "example" {
          name                = "example-rdp-security"
          location            = azure_resource_group.rg.location
          resource_group_name = azure_resource_group.rg.name

          security_rule {
            name                       = "RDP"
            priority                   = 1001
            direction                  = "Inbound"
            access                     = "Allow"
            protocol                   = "Tcp"
            source_port_range          = "*"
            destination_port_range     = "3389"
            source_address_prefix      = "192.168.22.5/24"
            destination_address_prefix = "*"
          }
        }
        ```
  - uid: mondoo-azure-security-rdp-access-restricted-from-internet-single
    filters: |
      asset.platform == "azure-network-security-group"
      asset.kind == "azure-object"
    mql: |
      allNsgTCP = azure.subscription.network.securityGroup.securityRules
        .where(
          properties.access == 'Allow'
            && direction == 'Inbound'
            && properties.protocol == /TCP|\*/i
            && properties.sourceAddressPrefix == /\*|0\.0\.0\.0|<nw>\/0|\/0|internet|any/
        )
      allNsgTCP.all(properties.destinationPortRange != "*")
      props.disallowedPortsRDP {
        disallowedPortRDP = _
        disallowedPortRDP
        allNsgTCP.none(destinationPortRange.any(fromPort <= disallowedPortRDP && toPort >= disallowedPortRDP))
      }
  - uid: mondoo-azure-security-rdp-access-restricted-from-internet-api
    filters: |
      asset.platform == "azure"
      asset.kind == "api"
    mql: |
      allNsgTCP = azure.subscription.network.securityGroups.where(securityRules
        .where(
          properties.access == 'Allow'
            && direction == 'Inbound'
            && properties.protocol == /TCP|\*/i
            && properties.sourceAddressPrefix == /\*|0\.0\.0\.0|<nw>\/0|\/0|internet|any/
        )
      )
      allNsgTCP.all(securityRules.all(properties.destinationPortRange != "*"))
      props.disallowedPortsRDP {
        disallowedPortRDP = _
        disallowedPortRDP
        allNsgTCP.all(securityRules.none(destinationPortRange.any(fromPort <= disallowedPortRDP && toPort >= disallowedPortRDP)))
      }
  - uid: mondoo-azure-security-secure-transfer-required-enabled
    title: Ensure that all data must be encrypted in transit
    impact: 80
    variants:
      - uid: mondoo-azure-security-secure-transfer-required-enabled-api
      - uid: mondoo-azure-security-secure-transfer-required-enabled-single
    docs:
      desc: |
        This check ensures that "Secure transfer required" is enabled.  This setting enforces the use of HTTPS for data operations, ensuring that data transmitted to and from Azure storage accounts is secured. It's an important security measure to protect data from interception or tampering during transmission, aligning with best practices for data security in the cloud.
        When the 'secure transfer required' setting is enabled in Azure, it mandates the use of HTTPS for accessing storage accounts through REST APIs. Any HTTP requests are automatically rejected. This also impacts the Azure files service; unencrypted connections, including certain SMB protocols and some Linux SMB clients, will fail. However, it's important to note that Azure storage doesn't support HTTPS for custom domain names, so this security feature doesn't apply when using a custom domain. This setting is crucial for ensuring that data in transit is encrypted and secure.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Run this query:

          ```bash
          cnspec run azure -c " azure.subscription.storage.accounts.all(properties.EnableHttpsTrafficOnly == true)"
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Launch `cnspec shell`:

          ```bash
          cnspec shell azure
          ```

        3. Run this query:

          ```mql
           azure.subscription.storage.accounts.all(properties.EnableHttpsTrafficOnly == true)
          ```
      remediation: |
        ### Terraform

        ```hcl
        resource "azure_storage_account" "example_storage_account" {
          ...
          enable_https_traffic_only = true
        }
        ```
  - uid: mondoo-azure-security-secure-transfer-required-enabled-api
    filters: |
      asset.platform == "azure"
      asset.kind == "api"
    mql: |
      azure.subscription.storage.accounts.all(properties.EnableHTTPSTrafficOnly == true)
  - uid: mondoo-azure-security-secure-transfer-required-enabled-single
    filters: |
      asset.platform == "azure-storage-account"
      asset.kind == "azure-object"
    mql: |
      azure.subscription.storage.account.properties.EnableHTTPSTrafficOnly == true
  - uid: mondoo-azure-security-public-access-level-private-blob-containers
    title: Ensure that anonymous access to blob containers and public access on storage accounts are disabled
    impact: 80
    variants:
      - uid: mondoo-azure-security-public-access-level-private-blob-containers-single
      - uid: mondoo-azure-security-public-access-level-private-blob-containers-api
    docs:
      desc: |
        This check ensures that anonymous access to blob containers is disabled and public access on storage accounts is disabled. The configuration should prevent any form of anonymous blob access and ensure that all access to storage accounts and their blob containers are authenticated and authorized.
      audit: |
        From Azure Portal:

        1.Go to Storage Accounts.
        2.For each storage account, go to the Networking setting under Security + networking.
        3.Ensure the 'Public Network Access' setting is set to 'Disabled'.
        4.In the storage account menu pane, under the 'Settings' section, click 'Configuration'.
        5.Under 'Allow Blob Anonymous Access', ensure that the setting is 'Disabled'.

        From Azure CLI:

        1.Authenticate using az login and ensure you are in the correct subscription.
        2.Use the following command to check the 'Public Network Access' setting:

        ```
        az storage account show --name <storage-account> --resource-group <resource-group> --query "{publicNetworkAccess:publicNetworkAccess}"
        ```

        ```
        az storage account show --name <yourStorageAccountName> --query allowBlobPublicAccess
        ``` 

        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Run this query:

          ```bash
          cnspec run azure -c "azure.subscription.storage.accounts.all(properties.AllowBlobPublicAccess == "false" )
            azure.subscription.storage.accounts.all(containers.all(properties.publicAccess == "None" ))
            azure.subscription.storage.accounts.all(properties.PublicNetworkAccess == "Disabled")"
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Launch `cnspec shell`:

          ```bash
          cnspec shell azure
          ```

        3. Run this query:

          ```mql
          azure.subscription.storage.accounts.all(properties.AllowBlobPublicAccess == "false" )
          azure.subscription.storage.accounts.all(containers.all(properties.publicAccess == "None" ))
          azure.subscription.storage.accounts.all(properties.PublicNetworkAccess == "Disabled")

          ```
      remediation: |
        ### Terraform

        ```hcl
        resource "azure_storage_container" "example_storage_container" {
            ...
          container_access_type = "private"
        }
        ```

        ### Microsoft Azure Portal

        1. Go to Storage Accounts.
        2. For each storage account, go to Networking in Security + networking.
        3. Set 'Public Network Access' to 'Disabled'.
        4. Click on a Storage Account and in the settings pane, click 'Configuration'.
        5. Under 'Allow Blob Anonymous Access', select 'Disabled'.
        6. For each container, change the access level to 'Private (no anonymous access)'.

        ### Azure CLI

        - Disable public network access:
          ```
          az storage account update --name <storage-account> --resource-group <resource-group> --public-network-access Disabled
          ```
        
        - Set blob containers to private access:
          ```
          az storage container set-permission --name <container_name> --public-access off --account-name <account_name> --account-key <account_key>
          ```
  - uid: mondoo-azure-security-public-access-level-private-blob-containers-api
    filters: |
      asset.platform == "azure"
      asset.kind == "api"
    mql: |
      azure.subscription.storage.accounts.all(properties.AllowBlobPublicAccess == "false" )
      azure.subscription.storage.accounts.all(containers.all(properties.publicAccess == "None" ))
      azure.subscription.storage.accounts.all(properties.PublicNetworkAccess == "Disabled")
  - uid: mondoo-azure-security-public-access-level-private-blob-containers-single
    filters: |
      asset.platform == "azure-storage-account"
      asset.kind == "azure-object"
    mql: |
      azure.subscription.storage.account.properties.AllowBlobPublicAccess == "false"
      azure.subscription.storage.account.containers.all(properties.publicAccess == "None")
      azure.subscription.storage.account.properties.AllowBlobPublicAccess == "false"
  - uid: mondoo-azure-security-default-network-access-rule-storage-accounts-deny
    title: Ensure the default network access rule for Storage Accounts is set to deny
    impact: 80
    variants:
      - uid: mondoo-azure-security-default-network-access-rule-storage-accounts-deny-single
      - uid: mondoo-azure-security-default-network-access-rule-storage-accounts-deny-api
    docs:
      desc: |
        This check ensures that access to the default network for storage accounts is set to deny.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Run this query:

          ```bash
          cnspec run azure -c "azure.subscription.storage.accounts.all(properties.NetworkRuleSet.defaultAction == "Deny")"
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Launch `cnspec shell`:

          ```bash
          cnspec shell azure
          ```

        3. Run this query:

          ```mql
          azure.subscription.storage.accounts.all(properties.NetworkRuleSet.defaultAction == "Deny")
          ```
      remediation: |
        ### Terraform

        ```hcl
        # Ensure the `default_action` is set to `Deny`

        resource "azure_storage_account_network_rules" "example_storage_account" {
          resource_group_name  = azure_resource_group.example.name
          storage_account_name = azure_storage_account.example.name

          default_action       = "Deny"
        }
        ```

        ```hcl
        resource "azure_storage_account" "example_storage_account" {
          name                = "example_storage_account"
          resource_group_name = azure_resource_group.example.name
          location            = azure_resource_group.example.location

          network_rules {
            default_action = "Deny"
          }

          ...
        }
        ```
  - uid: mondoo-azure-security-default-network-access-rule-storage-accounts-deny-api
    filters: |
      asset.platform == "azure"
      asset.kind == "api"
    mql: |
      azure.subscription.storage.accounts.all(properties.NetworkRuleSet.defaultAction == "Deny")
  - uid: mondoo-azure-security-default-network-access-rule-storage-accounts-deny-single
    filters: |
      asset.platform == "azure-storage-account"
      asset.kind == "azure-object"
    mql: |
      azure.subscription.storage.account.properties.NetworkRuleSet.defaultAction == "Deny"
  - uid: mondoo-azure-security-trusted-microsoft-services-enabled-for-storage-account-access
    title: Ensure "Allow Trusted Microsoft Services" is enabled for storage account access
    impact: 80
    variants:
      - uid: mondoo-azure-security-trusted-microsoft-services-enabled-for-storage-account-access-single
      - uid: mondoo-azure-security-trusted-microsoft-services-enabled-for-storage-account-access-api
    docs:
      desc: |
        This check ensures that "Trusted Microsoft Services" is enabled for storage account access. When using Azure storage accounts, certain Azure services might need to bypass network rules due to their operational networks. The "Allow trusted Azure services" exception allows these services to access the storage account securely, using strong authentication. This exception is crucial for services that interact directly with storage accounts but are not able to conform to network rules. Services such as Azure Backup, Azure Site Recovery, Azure DevTest Labs, Azure Event Grid, Azure Event Hubs, Azure Networking, Azure Monitor, and Azure SQL Data Warehouse are examples of services that can be granted access through this exception when they are registered in the subscription. This setup is important for maintaining both functionality and security in Azure environments.
      audit: |
        From Azure Portal:

        1.Go to Storage Accounts.
        2.Click on a specific storage account.
        3.Navigate to the Networking blade.
        4.Under Firewalls and virtual networks, check if Allow Azure services on the trusted services list to access this storage account is enabled.

        From Azure CLI:

        List the network rules for all storage accounts and verify that AzureServices is included in the bypass list:

        ```
        az storage account list --query "[*].networkRuleSet"
        ```

        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Run this query:

          ```bash
          cnspec run azure -c "azure.subscription.storage.accounts.all(properties.NetworkRuleSet.bypass.contains("AzureServices"))"
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Launch `cnspec shell`:

          ```bash
          cnspec shell azure
          ```

        3. Run this query:

          ```mql
          azure.subscription.storage.accounts.all(properties.NetworkRuleSet.bypass.contains("AzureServices"))
          ```
      remediation: |
        From Azure Portal:
            1. Go to `Storage Accounts` and select the relevant account.
            2. Click on the `Networking` blade.
            3. Under `Firewalls and virtual networks`, select `Enabled from selected virtual networks and IP addresses`.
            4. Check the box for `Allow Azure services on the trusted services list to access this storage account` to enable it.
            5. Save the changes.

        **From Azure CLI:**

        Enable the trusted Microsoft services for a storage account:

        ```
        az storage account update --name <StorageAccountName> --resource-group <resourceGroupName> --bypass AzureServices
        ```

        ### Terraform

        ```hcl
        resource "azure_storage_account" "example" {
            ...
          network_rules {
            ...
            bypass = ["AzureServices"]
            ...
          }
        }
        ```
  - uid: mondoo-azure-security-trusted-microsoft-services-enabled-for-storage-account-access-api
    filters: |
      asset.platform == "azure"
      asset.kind == "api"
    mql: |
      azure.subscription.storage.accounts.all(properties.NetworkRuleSet.bypass.contains("AzureServices"))
  - uid: mondoo-azure-security-trusted-microsoft-services-enabled-for-storage-account-access-single
    filters: |
      asset.platform == "azure-storage-account"
      asset.kind == "azure-object"
    mql: |
      azure.subscription.storage.account.properties.NetworkRuleSet.bypass.contains("AzureServices")
  - uid: mondoo-azure-security-ensure-auditing-retention-greater-than-30-days
    title: Ensure that audit logs are retained for at least 30 days
    impact: 80
    variants:
      - uid: mondoo-azure-security-ensure-auditing-retention-greater-than-30-days-single
      - uid: mondoo-azure-security-ensure-auditing-retention-greater-than-30-days-api
    docs:
      desc: |
        This check ensures that auditing retention is set to greater than or equal to 30 days.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Run this query:

          ```bash
          cnspec run azure -c "azure.subscription.sql.servers.all(auditingPolicy.retentionDays >= 30) || azure.subscription.sql.servers.all(auditingPolicy.retentionDays == 0)"
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Launch `cnspec shell`:

          ```bash
          cnspec shell azure
          ```

        3. Run this query:

          ```mql
          azure.subscription.sql.servers.all(auditingPolicy.retentionDays >= 30) || azure.subscription.sql.servers.all(auditingPolicy.retentionDays == 0)
          ```
      remediation: |
        ### Terraform

        ```hcl
        resource "azure_sql_server" "example" {
          ...
          extended_auditing_policy {
            storage_endpoint           = azure_storage_account.example.primary_blob_endpoint
            storage_account_access_key = azure_storage_account.example.primary_access_key
            storage_account_access_key_is_secondary = true
            retention_in_days                       = 30
          }
        }
        ```
  - uid: mondoo-azure-security-ensure-auditing-retention-greater-than-30-days-single
    filters: |
      asset.platform == "azure-sql-server"
      asset.kind == "azure-object"
    mql: |
      azure.subscription.sql.server.auditingPolicy.state == "Enabled"
      azure.subscription.sql.server.auditingPolicy.retentionDays >= 30 ||
       azure.subscription.sql.server.auditingPolicy.retentionDays == 0
  - uid: mondoo-azure-security-ensure-auditing-retention-greater-than-30-days-api
    filters: |
      asset.platform == "azure"
      asset.kind == "api"
    mql: |
      azure.subscription.sql.servers.all(auditingPolicy.state == "Enabled")
      azure.subscription.sql.servers.all(auditingPolicy.retentionDays >= 30) ||
       azure.subscription.sql.servers.all(auditingPolicy.retentionDays == 0)
  - uid: mondoo-azure-security-no-sql-databases-allow-ingress-0-0-0-0-0
    title: Ensure no SQL Databases allow ingress 0.0.0.0/0 (ANY IP)
    impact: 80
    variants:
      - uid: mondoo-azure-security-no-sql-databases-allow-ingress-0-0-0-0-0-single-azuresql
      - uid: mondoo-azure-security-no-sql-databases-allow-ingress-0-0-0-0-0-single-postgresql
      - uid: mondoo-azure-security-no-sql-databases-allow-ingress-0-0-0-0-0-single-mysql
      - uid: mondoo-azure-security-no-sql-databases-allow-ingress-0-0-0-0-0-single-mariadb
      - uid: mondoo-azure-security-no-sql-databases-allow-ingress-0-0-0-0-0-api
    docs:
      desc: |
        This check ensures that no SQL databases allow ingress connections from "0.0.0.0".
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Run this query:

          ```bash
          cnspec run azure -c "azure.subscription.sql.servers.all(firewallRules.all(startIpAddress != "0.0.0.0"))"
          cnspec run azure -c "azure.subscription.postgreSql.servers.all(firewallRules.all(startIpAddress != "0.0.0.0"))"
          cnspec run azure -c "azure.subscription.mySql.servers.all(firewallRules.all(startIpAddress != "0.0.0.0"))"
          cnspec run azure -c "azure.subscription.mariaDb.servers.all(firewallRules.all(startIpAddress != "0.0.0.0"))"
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Launch `cnspec shell`:

          ```bash
          cnspec shell azure
          ```

        3. Run this query:

          ```mql
          azure.subscription.sql.servers.all(firewallRules.all(startIpAddress != "0.0.0.0"))
          azure.subscription.postgreSql.servers.all(firewallRules.all(startIpAddress != "0.0.0.0"))
          azure.subscription.mySql.servers.all(firewallRules.all(startIpAddress != "0.0.0.0"))
          azure.subscription.mariaDb.servers.all(firewallRules.all(startIpAddress != "0.0.0.0"))
          ```
      remediation: |
        ### Terraform

        __mySQL__

        ```hcl
        # Ensure `start_ip_address` is not configured to `0.0.0.0`

        resource "azure_mysql_firewall_rule" "example" {
          ...
          start_ip_address    = "192.168.2.22"
          end_ip_address      = "255.255.255.255"
        }
        ```

        __MariaDB__

        ```hcl
        # Ensure `start_ip_address` is not configured to `0.0.0.0`

        resource "azure_mariadb_firewall_rule" "example" {
          ...
          start_ip_address    = "192.168.2.22"
          end_ip_address      = "255.255.255.255"
        }
        ```

        __SQL__

        ```hcl
        # Ensure `start_ip_address` is not configured to `0.0.0.0`

        resource "azure_sql_firewall_rule" "example" {
          ...
          start_ip_address    = "192.168.2.22"
          end_ip_address      = "255.255.255.255"
        }
        ```

        __Postgres__

        ```hcl
        # Ensure `start_ip_address` is not configured to `0.0.0.0`

        resource "azure_postgresql_firewall_rule" "example" {
          ...
          start_ip_address    = "192.168.2.22"
          end_ip_address      = "255.255.255.255"
        }
        ```
  - uid: mondoo-azure-security-no-sql-databases-allow-ingress-0-0-0-0-0-single-azuresql
    filters: |
      asset.platform == "azure-sql-server"
      asset.kind == "azure-object"
    mql: |
      azure.subscription.sql.server.firewallRules.all(startIpAddress != "0.0.0.0")
  - uid: mondoo-azure-security-no-sql-databases-allow-ingress-0-0-0-0-0-single-postgresql
    filters: |
      asset.platform == "azure-postgresql-server"
      asset.kind == "azure-object"
    mql: |
      azure.subscription.postgreSql.server.firewallRules.all(startIpAddress != "0.0.0.0")
  - uid: mondoo-azure-security-no-sql-databases-allow-ingress-0-0-0-0-0-single-mysql
    filters: |
      asset.platform == "azure-mysql-server"
      asset.kind == "azure-object"
    mql: |
      azure.subscription.mySql.server.firewallRules.all(startIpAddress != "0.0.0.0")
  - uid: mondoo-azure-security-no-sql-databases-allow-ingress-0-0-0-0-0-single-mariadb
    filters: |
      asset.platform == "azure-mariadb-server"
      asset.kind == "azure-object"
    mql: |
      azure.subscription.mariaDb.server.firewallRules.all(startIpAddress != "0.0.0.0")
  - uid: mondoo-azure-security-no-sql-databases-allow-ingress-0-0-0-0-0-api
    filters: |
      asset.platform == "azure"
      asset.kind == "api"
    mql: |
      azure.subscription.sql.servers.all(firewallRules.all(startIpAddress != "0.0.0.0"))
      azure.subscription.postgreSql.servers.all(firewallRules.all(startIpAddress != "0.0.0.0"))
      azure.subscription.mySql.servers.all(firewallRules.all(startIpAddress != "0.0.0.0"))
      azure.subscription.mariaDb.servers.all(firewallRules.all(startIpAddress != "0.0.0.0"))
  - uid: mondoo-azure-security-ensure-register-with-ad-is-enabled-on-app-service
    title: Ensure that app services can authenticate with Microsoft Entra ID
    impact: 80
    mql: |
      azure.subscription.web.apps.all(identity.type == "SystemAssigned")
      azure.subscription.web.apps.all(identity.principalId != empty)
    docs:
      desc: |
        This check ensures that all app services can authenticate through Microsoft Entra ID (formerly Azure AD). This approach removes secrets from the app itself. Instead, the app connects to other Azure services securely without the need for user names and passwords.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`, run this query:

          ```bash
          cnspec run azure -c "azure.subscription.web.apps.all(identity.type == "SystemAssigned") && azure.subscription.web.apps.all(identity.principalId != empty)" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        Note: It is also possible to use a client secret for the app connection instead of a certificate.

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        2. Run this query:

          ```mql
          azure.subscription.web.apps.all(identity.type == "SystemAssigned") azure.subscription.web.apps.all(identity.principalId != empty)
          ```
      remediation: |
        ### Microsoft Azure Portal

        To update using Microsoft Azure Portal:
        1. Log into Microsoft Azure Portal at https://portal.azure.com.
        2. Go to **App Services**.
        3. For each app:
           a. Select the app.
           b. Under **Settings**, select **Identity**.
           c. On the **System assigned** tab, set **Status** to **On**.
  - uid: mondoo-azure-security-ensure-the-kv-is-recoverable
    title: Ensure it is possible to recover key vaults
    impact: 80
    variants:
      - uid: mondoo-azure-security-ensure-the-kv-is-recoverable-single
      - uid: mondoo-azure-security-ensure-the-kv-is-recoverable-api
    docs:
      desc: |
        Azure Key Vault can store keys, secrets, and certificates. Accidental unavailability of a key vault can cause serious problems in any organization.

        Soft delete is a feature of Azure Key Vault that retains key vaults and key vault items after initial deletion. By default, new key vaults created through the portal are configured with soft delete for 90 days.

        Once enabled, soft delete can not be disabled. When soft delete is enabled, it is possible to purge soft deleted vaults and vault items.

        Purge protection is another feature of key vaults that is used to protect deleted key vaults for a certain period, called the "retention period." Once enabled, purge protection prevents deleted key vaults from being purged until the retention period is reached. This selection cannot be changed once the key vault is created.

        If a key vault is created with purge protection, you can still delete it, but you will not be able to purge it once it is deleted. In this case, the deleted key vaults must wait 90 days to be permanently purged.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`, run this query:

          ```bash
          cnspec run azure -c "azure.subscription.keyVault.vaults.all(properties.enablePurgeProtection == "true")" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          cnspec run azure -c "azure.subscription.keyVault.vaults.all(properties.enableSoftDelete == "true")" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        Note: It is also possible to use a client secret for app connection instead of a certificate.

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        2. Run this query:

          ```mql
          azure.subscription.keyVault.vaults.all(properties.enablePurgeProtection == "true")
          azure.subscription.keyVault.vaults.all(properties.enableSoftDelete == "true")
          ```
      remediation: |
        ### Microsoft Azure Portal

        To update using Microsoft Azure Portal:

        1. Log into Microsoft Azure Portal at https://portal.azure.com.
        2. Go to **Key vaults**.
        3. for each key vault:
           a. Select **Properties** and ensure **Soft-delete** is enabled.
           b. Select **Enable Purge Protection**.
           c. Select **Save**.
  - uid: mondoo-azure-security-ensure-the-kv-is-recoverable-single
    filters: |
      asset.platform == "azure-keyvault-vault"
      asset.kind == "azure-object"
    mql: |
      azure.subscription.keyVault.vault.properties.enablePurgeProtection == true
  - uid: mondoo-azure-security-ensure-the-kv-is-recoverable-api
    filters: |
      asset.platform == "azure"
      asset.kind == "api"
    mql: |
      azure.subscription.keyVault.vaults.all(properties.enablePurgeProtection == "true")
  - uid: mondoo-azure-security-ensure-web-app-is-using-the-latest-tls
    title: Ensure that Web Apps use the latest available version of TLS encryption
    impact: 80
    mql: |
      azure.subscription.web.apps.all(configuration.properties.minTlsVersion == "1.2")
    docs:
      desc: |
        It is highly recommended to use the latest TLS version available with Azure App Services for all secure Web App connections. Currently Azure App Services supports TLS 1.2.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`, run this query:

          ```bash
          cnspec run azure -c "azure.subscription.web.apps.all(configuration.properties.minTlsVersion == "1.2")" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        Note: It is also possible to use a client secret for app connection instead of a certificate.

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        2. Run this query:

          ```mql
          azure.subscription.web.apps.all(configuration.properties.minTlsVersion == "1.2")
          ```
      remediation: |
        ### Microsoft Azure Portal

        To update using Microsoft Azure Portal:
        1. Log into Microsoft Azure Portal at https://portal.azure.com
        2. Go to **App Services**.
        3. For each app:
           a. Select the app.
           b. Select **Configuration** and select the **General settings** tab.
           c. Under **Minimum Inbound TLS Version**, select **1.2**.
           d. Select **Save**.
  - uid: mondoo-azure-security-ensure-the-expiration-date-is-set-for-all-keys-and-secrets-in-kv
    title: Ensure that the expiration date is set for all keys and secrets in key vaults
    impact: 80
    variants:
      - uid: mondoo-azure-security-ensure-the-expiration-date-is-set-for-all-keys-and-secrets-in-kv-single
      - uid: mondoo-azure-security-ensure-the-expiration-date-is-set-for-all-keys-and-secrets-in-kv-api
    docs:
      desc: |
        The expiration date attribute identifies when you can no longer use the key/secret for a cryptographic operation. By default, keys/secrets never expire. Therefore, it is highly recommended that you rotate keys/secrets in the key vault and set an explicit expiration date.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`, run this query:

          ```bash
          cnspec run azure -c "azure.subscription.keyVault.vaults.all(keys.all(enabled && expires != empty))" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          cnspec run azure -c "azure.subscription.keyVault.vaults.all(secrets.all(enabled && expires != empty))" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        Note: It is also possible to use a client secret for app connection instead of a certificate.

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        2. Run this query:

          ```mql
          azure.subscription.keyVault.vaults.all(keys.all(enabled == true))
          azure.subscription.keyVault.vaults.all(keys.all(expires != empty))
          azure.subscription.keyVault.vaults.all(secrets.all(enabled == true))
          azure.subscription.keyVault.vaults.all(secrets.all(expires != empty))
          ```
      remediation: |
        ### Microsoft Azure Portal

        To update using Microsoft Azure Portal:

        1. Log into Microsoft Azure Portal at https://portal.azure.com.
        2. Go to **Key vaults**.
        3. For each key vault:
           a. Select the key vault.
           b. Select **Keys** or **Secrets**.
           c. Make sure that the key/secret in the key vault has an expiration date.
  - uid: mondoo-azure-security-ensure-the-expiration-date-is-set-for-all-keys-and-secrets-in-kv-single
    filters: |
      asset.platform == "azure-keyvault-vault"
      asset.kind == "azure-object"
    mql: |
      azure.subscription.keyVault.vault.keys.where(enabled == true).all(expires != empty)
      azure.subscription.keyVault.vault.secrets.where(enabled == true).all(expires != empty)
  - uid: mondoo-azure-security-ensure-the-expiration-date-is-set-for-all-keys-and-secrets-in-kv-api
    filters: |
      asset.platform == "azure"
      asset.kind == "api"
    mql: |
      azure.subscription.keyVault.vaults.all(keys.where(enabled == true).all(expires != empty))
      azure.subscription.keyVault.vaults.all(secrets.where(enabled == true).all(expires != empty))
  - uid: mondoo-azure-security-ensure-logging-enabled-kv
    title: Ensure all operations in Azure Key Vault are logged
    impact: 80
    variants:
      - uid: mondoo-azure-security-ensure-logging-enabled-kv-single
      - uid: mondoo-azure-security-ensure-logging-enabled-kv-api
    docs:
      desc: |
        Monitoring how, by whom, and when key vaults are accessed creates an audit trail of interactions with confidential information, keys, secrets, and certificates.

        Enabling logging for Azure Key Vault saves information in an Azure storage account that you provide. This creates a new container called insights-logs-auditevent for the specified storage account.
      audit: |
        From Azure Portal

        1.Navigate to Key vaults.
        2.Select each Key vault.
        3.Access Diagnostic settings.
        4.Review and ensure that AuditEvent and All logs categories are enabled and properly configured.

        __cnspec run__

        To audit Microsoft Azure with `cnspec run`, run this query:

          ```bash
          cnspec run azure -c "azure.subscription.keyVault.vault.diagnosticSettings != empty" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        Note: It is also possible to use a client secret for app connection instead of a certificate.

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        2. Run this query:

          ```mql
          azure.subscription.keyVault.vault.diagnosticSettings != empty
          ```
      remediation: |
        ### Microsoft Azure Portal

        1. Log into Microsoft Azure Portal at https://portal.azure.com.
        2. Visit `Key vaults` and select a vault.
        3. Go to `Diagnostic settings`.
        4. Edit an existing setting or add a new one, ensuring `AuditEvent` and `All logs` are selected.
        5. Set the appropriate destination for logs, such as an Azure storage account or Log Analytics workspace.
        6. Save the configuration.
  - uid: mondoo-azure-security-ensure-logging-enabled-kv-single
    filters: |
      asset.platform == "azure-keyvault-vault"
      asset.kind == "azure-object"
    mql: |
      // Step 1: Verify that diagnostic settings are configured for the Key Vault vaults.
      azure.subscription.keyVault.vault.diagnosticSettings != empty
      // Step 2: Confirm the presence and enablement of specific log categories within the diagnostic settings.
      // The checks ensure that both 'audit' and 'allLogs' category groups are actively enabled for comprehensive logging.
      azure.subscription.keyVault.vault.diagnosticSettings.all(properties.logs.any(categoryGroup == "AuditEvent"))
      azure.subscription.keyVault.vault.diagnosticSettings.all(properties.logs.any(categoryGroup == "allLogs"))
      azure.subscription.keyVault.vault.diagnosticSettings.any(properties.logs.where(categoryGroup == "AuditEvent").all(enabled == true))
      azure.subscription.keyVault.vault.diagnosticSettings.any(properties.logs.where(categoryGroup == "allLogs").all(enabled == true))
      // Step 3: Ensure that there is an appropriate destination for the logs.
      // Diagnostic settings should forward logs to one or more of the following destinations:
      // an Azure Storage account, an Azure Monitor Log Analytics workspace, an event hub, or a partner solution.
      // The existence of any of these destination settings confirms that the logs are not only enabled but also appropriately stored.
      azure.subscription.keyVault.vault.diagnosticSettings.all(properties.eventHubAuthorizationRuleId != empty) ||
        azure.subscription.keyVault.vault.diagnosticSettings.all(properties.workspaceId != empty) ||
          azure.subscription.keyVault.vault.diagnosticSettings.all(properties.storageAccountId != empty) ||
            azure.subscription.keyVault.vault.diagnosticSettings.all(properties.marketplacePartnerId != empty)
  - uid: mondoo-azure-security-ensure-logging-enabled-kv-api
    filters: |
      asset.platform == "azure"
      asset.kind == "api"
    mql: |
      mql: |
      // Step 1: Verify that diagnostic settings are configured for the Key Vault vaults.
      azure.subscription.keyVault.vaults.all(diagnosticSettings != empty)
      // Step 2: Confirm the presence and enablement of specific log categories within the diagnostic settings.
      // The checks ensure that both 'audit' and 'allLogs' category groups are actively enabled for comprehensive logging.
      azure.subscription.keyVault.vaults.all(diagnosticSettings.all(properties.logs.any(categoryGroup == "AuditEvent")))
      azure.subscription.keyVault.vaults.all(diagnosticSettings.all(properties.logs.any(categoryGroup == "allLogs")))
      azure.subscription.keyVault.vaults.all(diagnosticSettings.any(properties.logs.where(categoryGroup == "AuditEvent").all(enabled == true)))
      azure.subscription.keyVault.vaults.all(diagnosticSettings.any(properties.logs.where(categoryGroup == "allLogs").all(enabled == true)))
      // Step 3: Ensure that there is an appropriate destination for the logs.
      // Diagnostic settings should forward logs to one or more of the following destinations:
      // an Azure Storage account, an Azure Monitor Log Analytics workspace, an event hub, or a partner solution.
      // The existence of any of these destination settings confirms that the logs are not only enabled but also appropriately stored.
      azure.subscription.keyVault.vaults.all(diagnosticSettings.all(properties.eventHubAuthorizationRuleId != empty)) ||
        azure.subscription.keyVault.vaults.all(diagnosticSettings.all(properties.workspaceId != empty)) ||
          azure.subscription.keyVault.vaults.all(diagnosticSettings.all(properties.storageAccountId != empty)) ||
            azure.subscription.keyVault.vaults.all(diagnosticSettings.all(properties.marketplacePartnerId != empty))
  - uid: mondoo-azure-security-ensure-activity-log-alert-exists-for-create-update-delete-network-security-group
    title: Ensure that activity log alerts exist for the commands Create, Update, and Delete Network Security Group
    impact: 80
    mql: |
      azure.subscription.monitor.activityLog.alerts.where(actions != empty).any(conditions.any(equals == "Microsoft.Authorization/policyAssignments/write" && fieldName == "operationName"))
      azure.subscription.monitor.activityLog.alerts.where(actions != empty).any(conditions.any(equals == "Microsoft.Network/networkSecurityGroups/delete" && fieldName == "operationName"))
    docs:
      desc: |
        Monitoring events related to the creation, update, and deletion of network security groups provides insights into network access changes and helps in detecting suspicious activities.
      audit: |
       **From Azure Portal**

        1. Navigate to the `Monitor` blade.
        2. Click on `Alerts`.
        3. In the Alerts window, click on `Alert rules`.
        4. Verify that alert rules exist for the following conditions:
          - Operation name equals `Microsoft.Network/networkSecurityGroups/write` for Create/Update events.
          - Operation name equals `Microsoft.Network/networkSecurityGroups/delete` for Delete events.
        5. Click on the alert rule name to review its configuration.
          - Ensure the `Condition` panel specifies the correct operation names and does not filter on irrelevant criteria like `Level`, `Status`, or `Caller`.
          - Confirm that the `Actions` panel is set up to notify the appropriate personnel within your organization.

       **From Azure CLI:**

        Run the following commands to list the current alert rules and verify their conditions:

        ```bash
        az monitor activity-log alert list --subscription <subscription ID> --query "[].{Name:name, Enabled:enabled, Condition:condition.allOf, Actions:actions}"
        ```

        Check for the presence of conditions targeting the `Microsoft.Network/networkSecurityGroups/write` and `Microsoft.Network/networkSecurityGroups/delete` operation names in the output.

        **From PowerShell:**

        Utilize the following PowerShell commands to inspect the alert rules:

        ```powershell
        Get-AzActivityLogAlert -SubscriptionId <subscription ID> | where-object {$_.ConditionAllOf.Equal -match "Microsoft.Network/networkSecurityGroups/write"} | select-object Location, Name, Enabled, ResourceGroupName, ConditionAllOf

        Get-AzActivityLogAlert -SubscriptionId <subscription ID> | where-object {$_.ConditionAllOf.Equal -match "Microsoft.Network/networkSecurityGroups/delete"} | select-object Location, Name, Enabled, ResourceGroupName, ConditionAllOf
        ```
      remediation: |
        ### Microsoft Azure Portal

        To update using Microsoft Azure Portal:

        1. Log into Microsoft Azure Portal at https://portal.azure.com.
        2. Go to **Monitor**.
        3. Select **Alerts**.
        4. Click **+ Create**.
        5. Under **Resource types**, select **Network security group**.
        6. Select the subscription name, resource group, or network security group" to apply the rule to.
        7. Verify that the selection preview shows:
            - All network security groups or your selected network security group
            - The subscription, group, or resource you selected
        8. Select the **Apply** button.
        9. Select the **Condition** tab and select **See all signals**.
        10. Select **Create or Update Network Security Group**.
        11. Select the **Actions** tab and either choose an existing action group or create a new one to notify the necessary personnel.
        12. Select the **Details** tab and provide:
            - The resource group where you want the alert rule to reside
            - A name (and optional description) for the alert rule
        13. Select the **Review + create button and verify the summary.
        14. Select the **Create** button.
        15. Repeat steps 4-15 but in step 10, select **Delete Network Security Group**.
  - uid: mondoo-azure-security-ensure-that-notify-about-alerts-with-high-severity-is-on
    title: Ensure that "Notify about alerts with high severity" is enabled
    impact: 80
    mql: |
      azure.subscription.cloudDefender.securityContacts.all(alertNotifications.minimalSeverity == "High")
      azure.subscription.cloudDefender.securityContacts.all(alertNotifications.state == "On")
    docs:
      desc: |
        Enabling security alert email ensures that Microsoft makes administrators aware of any potential security issues so they can react quickly.
      audit: |
        **From Azure Portal:**

          1. From Azure Home, select the Portal Menu.
          2. Select `Microsoft Defender for Cloud`.
          3. Click on `Environment Settings`.
          4. Click on the appropriate Management Group, Subscription, or Workspace.
          5. Click on `Email notifications`.
          6. Verify that the `Notify about alerts with the following severity (or higher):` setting is checked and set to `High`.

        **From Azure CLI:**

          Run the following command to check the notification settings for high severity alerts. Make sure the output is set to `true`, indicating that notifications for high severity alerts are enabled.

          ```bash
          az account get-access-token --query "{subscription:subscription,accessToken:accessToken}" --out tsv | xargs -L1 bash -c 'curl -X GET -H "Authorization: Bearer $1" -H "Content-Type: application/json" https://management.azure.com/subscriptions/$0/providers/Microsoft.Security/securityContacts?api-version=2020-01-01-preview' | jq '.|.[] | select(.name=="default")'|jq '.properties.alertNotifications'
          ```

      remediation: |
        ### Microsoft Azure Portal

        To configure alert notifications in Microsoft Azure Portal:

          1. Log into the Microsoft Azure Portal at https://portal.azure.com.
          2. Select `Microsoft Defender for Cloud` from the Portal Menu.
          3. Go to `Environment Settings` and select the appropriate management group, subscription, or workspace.
          4. Navigate to `Email notifications`.
          5. Ensure the `Notify about alerts with the following severity (or higher):` option is enabled and set to `High`.
          6. Click `Save` to apply the changes.

        **From Azure CLI:**

        Use the following command to update the security contact settings to enable high severity alert notifications. Replace `<Your_Subscription_Id>` and `<validEmailAddress>` with the appropriate values.

          ```bash
          az account get-access-token --query "{subscription:subscription,accessToken:accessToken}" --out tsv | xargs -L1 bash -c 'curl -X PUT -H "Authorization: Bearer $1" -H "Content-Type: application/json" https://management.azure.com/subscriptions/<$0>/providers/Microsoft.Security/securityContacts/default1?api-version=2017-08-01-preview -d "@input.json"'
          ```

          Ensure the `input.json` file contains the following data, with `<validEmailAddress>` replaced with your contact email:

          ```json
          {
            "id": "/subscriptions/<Your_Subscription_Id>/providers/Microsoft.Security/securityContacts/default1",
            "name": "default1",
            "type": "Microsoft.Security/securityContacts",
            "properties": {
              "email": "<validEmailAddress>",
              "alertNotifications": "On",
              "alertsToAdmins": "On"
            }
          }
          ```
  - uid: mondoo-azure-security-ensure-that-ssl-enabled-postgresql
    title: Ensure SSL connection enabled for PostgreSQL database servers
    impact: 80
    variants:
      - uid: mondoo-azure-security-ensure-that-ssl-enabled-postgresql-api
      - uid: mondoo-azure-security-ensure-that-ssl-enabled-postgresql-single
    docs:
      desc: |
        Ensuring that SSL/TLS is enforced for all connections to PostgreSQL database servers is crucial for safeguarding data in transit. This security measure helps prevent eavesdropping and man-in-the-middle attacks, maintaining the confidentiality and integrity of data.
      audit: |
        **From Azure Portal:**

        1. Log in to Azure Portal at https://portal.azure.com.
        2. Navigate to `Azure Database for PostgreSQL server`.
        3. Select each database server to review its settings.
        4. Under `Connection security`, confirm that `Enforce SSL connection` is set to `ENABLED`. This setting should be consistent across all PostgreSQL database servers to ensure uniform security posture.

        **From Azure CLI:**

        To verify the SSL enforcement setting across all PostgreSQL servers in a resource group, you can use the Azure CLI. The expected output for compliant servers is `Enabled`:

        ```bash
        az postgres server list --resource-group <resourceGroupName> --query "[].{Name:name, SSL:sslEnforcement}" -o table
        ```

        This command provides a clear, tabulated output indicating which servers have SSL enforced and which do not, enabling quick identification of non-compliant resources.

        **From PowerShell:**

        PowerShell can also be used for a detailed audit. The command should return `Enabled` for each server checked:

        ```powershell
        Get-AzPostgreSqlServer -ResourceGroupName <ResourceGroupName> | Select-Object Name, SslEnforcement
        ```

        This command lists all PostgreSQL servers in the specified resource group along with their SSL enforcement status, providing a comprehensive overview.
      remediation: |
        ### Microsoft Azure Portal

        To enforce SSL connections:

        1. Access the Azure Portal at https://portal.azure.com.
        2. Navigate to `Azure Database for PostgreSQL server`.
        3. For each server, access `Connection security`.
        4. Locate the `SSL settings` and set `Enforce SSL connection` to `ENABLED`.
        5. Apply the changes to ensure that the setting is enforced across all servers.

        Consistency in enforcement is key. Verify that all PostgreSQL servers within your Azure environment have this setting enabled to maintain a high security standard.

        **From Azure CLI:**

        For a batch update or to automate the enforcement across multiple servers, use the Azure CLI:

        ```bash
        az postgres server update --resource-group <resourceGroupName> --name <serverName> --ssl-enforcement Enabled
        ```

        Automate this process using scripts to iterate over all PostgreSQL servers in a subscription or resource group, ensuring no server is left without SSL enforcement.

        **From PowerShell:**

        PowerShell provides a similar capability for batch processing:

        ```powershell
        $servers = Get-AzPostgreSqlServer -ResourceGroupName <ResourceGroupName>
        foreach ($server in $servers) {
            Update-AzPostgreSqlServer -ResourceGroupName <ResourceGroupName> -ServerName $server.Name -SslEnforcement Enabled
        }
        ```

        This script iterates over all PostgreSQL servers in the specified resource group, enforcing SSL on each one. Regularly running such scripts can help maintain compliance over time, especially in dynamic environments where new servers are frequently deployed.

  - uid: mondoo-azure-security-ensure-that-ssl-enabled-postgresql-single
    filters: |
      asset.platform == "azure-postgresql-server"
      asset.kind == "azure-object"
    mql: |
      azure.subscription.postgreSql.server.properties.sslEnforcement == "Enabled"
  - uid: mondoo-azure-security-ensure-that-ssl-enabled-postgresql-api
    filters: |
      asset.platform == "azure"
      asset.kind == "api"
    mql: |
      azure.subscription.postgreSql.servers.all(properties.sslEnforcement == "Enabled")
  - uid: mondoo-azure-security-ensure-that-ssl-enabled-latest-version-mysql
    title: Ensure SSL connection enabled for MySQL Database Server with the latest version
    impact: 80
    variants:
      - uid: mondoo-azure-security-ensure-that-ssl-enabled-latest-version-mysql-single
      - uid: mondoo-azure-security-ensure-that-ssl-enabled-latest-version-mysql-api
    docs:
      desc: |
        Ensuring that SSL connections are enforced for MySQL database servers is essential to protect data in transit from eavesdropping and man-in-the-middle attacks. Additionally, it is critical to ensure the use of the latest supported TLS version to mitigate vulnerabilities associated with older versions.
      audit: |
        **From Azure Portal:**

        1. Log in to the Azure Portal at https://portal.azure.com.
        2. Navigate to `Azure Database for MySQL servers`.
        3. Select each server to inspect its settings.
        4. Under `Connection security`, verify that `Enforce SSL connection` is set to `ENABLED`.
        5. Additionally, ensure that the server is configured to use the latest supported TLS version (e.g., TLS 1.2 or higher).

        **From Azure CLI:**

        Run the following command to inspect the SSL enforcement and the minimum TLS version for each MySQL server:

        ```bash
        az mysql server list --resource-group <resourceGroupName> --query "[].{Name:name, SSL:sslEnforcement, TLS:minimalTlsVersion}" -o table
        ```

        This command provides a tabulated view showing the SSL enforcement and TLS version for each server, facilitating quick identification of non-compliant or outdated configurations.

      remediation: |
        To enforce SSL connections and ensure the use of the latest TLS version:

        1. Access the Azure Portal at https://portal.azure.com.
        2. Go to `Azure Database for MySQL servers`.
        3. For each server, navigate to `Connection security`.
        4. Set `Enforce SSL connection` to `ENABLED`.
        5. Select the latest supported TLS version from the dropdown menu to ensure maximum security.
        6. Apply these settings to ensure compliance across all MySQL servers.

        Regular reviews and updates of these settings are recommended to adapt to new TLS versions as they become available, ensuring that the security configurations remain up-to-date.

        **From Azure CLI:**

        To batch update MySQL servers for SSL enforcement and TLS version settings, use the following Azure CLI command:

        ```bash
        az mysql server update --resource-group <resourceGroupName> --name <serverName> --ssl-enforcement Enabled --minimal-tls-version TLS1_2
        ```

        For enhancing data security during transmission, it's pivotal to use the latest TLS version. Currently, the most advanced standard available is TLS 1.3, known for its enhanced security and performance benefits. However, it's important to note that, as of the latest information, Azure's MySQL service supports up to TLS 1.2. While TLS 1.2 provides robust security, the adoption of TLS 1.3 across various platforms, including Azure, is anticipated.
  - uid: mondoo-azure-security-ensure-that-ssl-enabled-latest-version-mysql-single
    filters: |
      asset.platform == "azure-mysql-server"
      asset.kind == "azure-object"
    mql: |
      azure.subscription.mySql.server.properties.sslEnforcement == "Enabled"
      azure.subscription.mySql.server.properties.minimalTlsVersion == "TLS1_2"
  - uid: mondoo-azure-security-ensure-that-ssl-enabled-latest-version-mysql-api
    filters: |
      asset.platform == "azure"
      asset.kind == "api"
    mql: |
      azure.subscription.mySql.servers.all(properties.sslEnforcement == "Enabled")
      azure.subscription.mySql.servers.all(properties.minimalTlsVersion == "TLS1_2")
  - uid: mondoo-azure-security-ensure-disabled-public-access-sql
    title: Ensure public network access for SQL server is blocked or Limited to Use Selected Networks Instead of All Networks
    impact: 80
    variants:
      - uid: mondoo-azure-security-ensure-disabled-public-access-sql-single
      - uid: mondoo-azure-security-ensure-disabled-public-access-sql-api
    docs:
      desc: |
        Limiting public network access to Azure SQL servers enhances security by reducing exposure to attacks. Configuring SQL servers to allow connections only from private endpoints or specific public IP addresses through firewall rules significantly mitigates potential risks.

        Customers can choose to connect to a database by either:
          * Public endpoints (with IP-based server-level firewall rules or with virtual-network firewall rules)
          * Private endpoints (using Azure Private Link)

        When public network access is disabled, only connections from private endpoints are allowed. All connections from public endpoints are denied.
      audit: |
        **Manual Audit Steps:**

        1. Log in to the Azure Portal at https://portal.azure.com.
        2. Navigate to **SQL servers** under Azure SQL services.
        3. Select each SQL server to review its networking settings.
        4. Under the **Security** section, click on **Networking**.
        5. Verify that for **Public network access**, the setting is either **Disabled** or configured to allow **Selected networks** only, ensuring no open access to all networks.

        **Automated Audit through Azure CLI:**

        You can also verify the public network access settings using Azure CLI:

        ```bash
        az sql server list --query "[].{Name:name, PublicNetworkAccess:publicNetworkAccess}" -o table
        ```

        This command lists all SQL servers along with their public network access settings. Ensure that none of the servers are listed as having unrestricted public network access unless specific rules are applied.
      remediation: |
        ### Microsoft Azure Portal

        To Restrict Public Network Access in Azure Portal:

        1. Log into the Azure Portal at https://portal.azure.com.
        2. Navigate to **SQL servers** and select the server you wish to configure.
        3. In the server's settings, click on **Networking** under the **Security** section.
        4. Locate the **Public network access** setting.
        5. Change the setting to **Disabled** to completely block public access or to **Selected networks** to restrict access to specific IP addresses or ranges.
        6. If selecting **Selected networks**, ensure you configure the necessary firewall rules or virtual network settings to specify which networks can access the server.

        ### Automating Remediation with Azure CLI:

        To disable public network access for all SQL servers in a subscription, you can use the following Azure CLI command for each server:

        ```bash
        az sql server update --name <ServerName> --resource-group <ResourceGroupName> --set publicNetworkAccess='Disabled'
        ```

        Replace `<ServerName>` and `<ResourceGroupName>` with your actual server names and resource group names. For granular control, manually configure network settings in the Azure Portal to specify allowed networks if opting for the "Selected networks" setting.
  - uid: mondoo-azure-security-ensure-disabled-public-access-sql-single
    filters: |
      asset.platform == "azure-sql-server"
      asset.kind == "azure-object"
    mql: |
      azure.subscription.sql.server.properties.publicNetworkAccess == "Disabled"
        || azure.subscription.sql.server.virtualNetworkRules != empty || azure.subscription.sql.server.firewallRules != empty
  - uid: mondoo-azure-security-ensure-disabled-public-access-sql-api
    filters: |
      asset.platform == "azure"
      asset.kind == "api"
    mql: |
      azure.subscription.sql.servers.all(properties.publicNetworkAccess == "Disabled") ||
       azure.subscription.sql.servers.where(properties.publicNetworkAccess == "Enabled").all(virtualNetworkRules != empty || firewallRules != empty)
  - uid: mondoo-azure-security-keyvault-public-access-disabled
    title: Ensure default public network access for Azure Key Vault is disabled or Limited to Use Selected Networks Instead of All Networks
    impact: 80
    variants:
      - uid: mondoo-azure-security-keyvault-public-access-disabled-single
      - uid: mondoo-azure-security-keyvault-public-access-disabled-api
    docs:
      desc: |
        To enhance the security of Azure Key Vault, a critical component in the Azure environment, it's advisable to restrict public network access. By default, a new key vault has its firewall disabled, permitting unrestricted access from applications and Azure services, though operations are still restricted by Microsoft Entra authentication and access policies.

        For stronger network security, consider these options:

          * Disable Public Network Access: This blocks all public internet connections to the key vault, allowing only connections through private endpoints.
          * Limit Access to Selected Networks: If public access is necessary, restrict it by configuring the Azure Key Vault firewall. You can define specific virtual networks or set firewall rules by adding IP ranges, limiting access to trusted internet sources or your on-premises networks.

        Implementing these measures ensures that only authorized networks and applications can access your key vault, significantly bolstering its security.
      audit: |
        **Manual Audit Steps:**

        1. Log in to the Azure Portal at https://portal.azure.com.
        2. Navigate to **Key vaults** to list all key vaults in your subscriptions.
        3. Select each key vault to review its networking settings.
        4. In the key vault's **Settings**, click on **Networking**.
        5. Check the **Firewalls and virtual networks** settings to ensure public access is either disabled or limited:
          - Verify that **Public network access** is set to **Disabled**.
          - If public access is enabled, ensure that access is restricted to selected networks by configuring IP rules or linking to specific virtual networks.

        **Automated Audit via Azure CLI:**

        You can check the public network access settings for all key vaults in a given subscription using the Azure CLI:

        ```bash
        az keyvault list --query "[].{Name:name, PublicNetworkAccess:properties.publicNetworkAccess}" -o table
        ```

        This command outputs the public network access settings for each key vault, allowing you to quickly identify configurations that do not align with best practices.
      remediation: |
        ### Microsoft Azure Portal

        To update using Microsoft Azure Portal:

        1. Access the Azure Portal at https://portal.azure.com and go to **Key vaults**.
        2. Select the key vault you wish to configure.
        3. In the key vault's **Settings**, choose **Networking**.
        4. Navigate to **Firewalls and virtual networks**.
        5. To block all public network access, set **Public network access** to **Disabled**.
        6. If you need to allow access from specific networks:
          - Set **Public network access** to **Enabled**.
          - Configure **Firewall rules** to define allowed IP address ranges.
          - Link to specific **Virtual networks** to restrict access to designated networks only.

        By tightly controlling network access to your Azure Key Vault, you enhance its security posture, ensuring that only approved entities can access its contents.
  - uid: mondoo-azure-security-keyvault-public-access-disabled-single
    filters: |
      asset.platform == "azure-keyvault-vault"
      asset.kind == "azure-object"
    mql: |
      azure.subscription.keyVault.vault.properties.all(publicNetworkAccess == "Disabled")
        || azure.subscription.keyVault.vault.properties.networkAcls.ipRules != empty
        || azure.subscription.keyVault.vault.properties.networkAcls.virtualNetworkRules != empty
  - uid: mondoo-azure-security-keyvault-public-access-disabled-api
    filters: |
      asset.platform == "azure"
      asset.kind == "api"
    mql: |
      azure.subscription.keyVault.vaults.all(properties.publicNetworkAccess == "Disabled") ||
        azure.subscription.keyVault.vaults.where(properties.publicNetworkAccess == "Enabled").all(properties.networkAcls.virtualNetworkRules != empty || properties.networkAcls.ipRules != empty)
  - uid: mondoo-azure-security-sql-server-audit-on
    title: Ensure that all activities on SQL server are audited
    impact: 60
    variants:
      - uid: mondoo-azure-security-sql-server-audit-on-single
      - uid: mondoo-azure-security-sql-server-audit-on-api
    docs:
      desc: |
        Auditing is a very important feature and should be configured for every database or server in your Azure deployment. When you enable server-level auditing, you enable it for all existing databases and for new databases you create in the future.

        Enable server auditing when you must audit all databases for that logical server. Enable database level audit when you want to audit different action groups for a specific database or write to a different target for a specific database.

        If you enable both server- and database-level auditing for a database, you can choose predicate expressions to filter the events and ensure you don't duplicate data.
      audit: |
        **Manual Audit Steps:**

        1. Go to the Azure Portal at https://portal.azure.com.
        2. Navigate to **SQL servers** and select each server to inspect its auditing settings.
        3. Click on **Auditing** for each server.
        4. Verify that `Enable Azure SQL Auditing` is switched to `On`. Check that an appropriate storage account, Log Analytics workspace, or Event Hub is selected as the audit log destination.

        **Automated Audit via Azure CLI:**

        To verify the auditing settings for all SQL Servers in a subscription: (replace <resourceGroupName> with your resource group name)

        ```bash
        az sql server list --query "[].{Name:name, ResourceGroupName:<resourceGroupName>}" -o tsv | while read -r name rg; do
          echo "Server: $name"
          az sql server audit-policy show --name $name --resource-group $rg
        done
        ```

        This script iterates over all SQL servers, displaying their audit policy status, ensuring that auditing is enabled and correctly configured.
      remediation: |
        ### Microsoft Azure Portal

        1. In the Azure Portal, go to **SQL servers** and select the server you want to configure.
        2. Under **Security**, click on **Auditing**.
        3. Set `Enable Azure SQL Auditing` to `On`.
        4. Select a destination for the audit logs: Storage Account, Log Analytics workspace, or Event Hub.
        5. Configure the retention period, ensuring it aligns with your organization's compliance requirements.
        6. Click `Save` to apply the settings.

        ### Automating Auditing Configuration via Azure CLI:

        For each SQL server, enable auditing and specify the log retention settings and destination. Here's how you can enable auditing to a Storage Account with a retention period:

        ```bash
        az sql server audit-policy update --name <ServerName> --resource-group <ResourceGroupName> --state Enabled --blob-storage-target-state Enabled --storage-endpoint <StorageAccountBlobEndpoint> --storage-key <StorageAccountKey> --retention-days 90
        ```

        Replace placeholders with your specific details. Similar commands can be executed to set up auditing with Log Analytics or Event Hub as the destination. Ensuring that auditing is enabled and properly configured across all SQL servers in your Azure environment is a key step in maintaining a strong security and compliance posture.
  - uid: mondoo-azure-security-sql-server-audit-on-single
    filters: |
      asset.platform == "azure-sql-server"
      asset.kind == "azure-object"
    mql: |
      azure.subscription.sql.server.auditingPolicy.state == "Enabled"
  - uid: mondoo-azure-security-sql-server-audit-on-api
    filters: |
      asset.platform == "azure"
      asset.kind == "api"
    mql: |
      azure.subscription.sql.servers.all(auditingPolicy.state == "Enabled")
  - uid: mondoo-azure-security-sql-server-tde-on
    title: Ensure that transparent data encryption is enabled for SQL Server databases
    impact: 60
    variants:
      - uid: mondoo-azure-security-sql-server-tde-on-single
      - uid: mondoo-azure-security-sql-server-tde-on-api
    docs:
      desc: |
        Transparent data encryption (TDE) encrypts SQL Server, Azure SQL Database, and Azure Synapse Analytics data files. This encryption is known as encrypting data at rest.

        TDE does real-time I/O encryption and decryption of data and log files. The encryption uses a database encryption key (DEK). The database boot record stores the key for availability during recovery. The DEK is a symmetric key. It's secured by a certificate that the server's master database stores or by an asymmetric key that an EKM module protects.

        TDE protects data at rest, which is the data and log files. It lets you follow many laws, regulations, and guidelines established in various industries. Your software developers can encrypt data by using AES and 3DES encryption algorithms without changing existing applications.

        Note: TDE is not available for system databases.
      audit: |
        **Manual Audit Steps:**

        1. In the Azure Portal, navigate to **SQL databases** under your SQL Server instances.
        2. Select each database to inspect its settings.
        3. Click on **Transparent data encryption** under the **Security** settings.
        4. Verify that `Data encryption` is set to `On` for each database (except the master database, which cannot be encrypted with TDE).

        **Automated Audit with Azure CLI:**

        To check the TDE status for all databases in a specific SQL server:

        ```bash
        az sql db list --resource-group <ResourceGroupName> --server <ServerName> --query "[].{Name:name, TDE:transparentDataEncryption}" -o table
        ```

        Use the following command to check the TDE status of a specific database:

        ```bash
        az sql db tde show --name <DatabaseName> --resource-group <ResourceGroupName> --server <ServerName>
        ```

        Ensure the TDE status is `Enabled` for each database.
      remediation: |
        ### Microsoft Azure Portal

        1. Access **SQL databases** in the Azure Portal.
        2. Select a database under your SQL Server instance.
        3. Go to **Transparent data encryption** under the **Security** section.
        4. Switch `Data encryption` to `On`.

        ### Using Azure CLI:

        To enable TDE on a specific database:

        ```bash
        az sql db tde set --database <DatabaseName> --resource-group <ResourceGroupName> --server <ServerName> --status Enabled
        ```

        ### Using PowerShell:

        For each database, enable TDE with the following command:

        ```powershell
        Set-AzSqlDatabaseTransparentDataEncryption -DatabaseName <DatabaseName> -ServerName <ServerName> -ResourceGroupName <ResourceGroupName> -State 'Enabled'
        ```

        **Note:**

        - Ensure you repeat the process for each database in your SQL Server instances, excluding the master database.
        - Regularly review the TDE status of your databases to maintain compliance and data protection.
  - uid: mondoo-azure-security-sql-server-tde-on-single
    filters: |
      asset.platform == "azure-sql-server"
      asset.kind == "azure-object"
      azure.subscription.sql.server.databases.any(name != "master")
    mql: |
      azure.subscription.sql.server.databases.where(name != "master").all(transparentDataEncryption.state == "Enabled")
  - uid: mondoo-azure-security-sql-server-tde-on-api
    filters: |
      asset.platform == "azure"
      asset.kind == "api"
    mql: |
      azure.subscription.sql.servers.all(databases.where(name != "master").all(transparentDataEncryption.state == "Enabled"))
  - uid: mondoo-azure-security-diagnostic-settings-exist
    title: Ensure that diagnostic settings exist for the subscription
    impact: 80
    mql: |
      azure.subscription.monitor.diagnosticSettings != empty
    docs:
      desc: |
        Diagnostic settings are an important piece in the security puzzle, Microsoft highly recommends using them in Azure Security Center. To understand what the diagnostic settings are, you must understand the data source of the Monitor component in Azure.

        Azure Monitor is based on different logs and metrics collected from multiple resources. This can be analyzed using a set of tools provided in Azure Monitor.
        Azure Resources generate a significant amount of monitoring data which categorized into two types:

         * Metrics: Numerical values that describe some aspect of a system at a particular point of time
         * Logs:  Text that provides detailed diagnostic and auditing information for Azure resources

        Logs also can be categorized into two types:

         * Resource logs aren't collected until they're routed to a destination.
         * Activity logs exist on their own but can be routed to other locations.

        Each Azure resource requires its own diagnostic setting, which defines the following criteria:

         * Sources: The type of metric and log data to send to the destinations defined in the setting. The available types vary by resource type.
         * Destinations: One or more destinations to send to.

        A diagnostic setting controls how logs are exported. By default, logs are retained only for 90 days. By using diagnostic settings, we can export logs and store them for longer periods in order to analyze the activities and find any security-related issues.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`, run this query:

          ```bash
          cnspec run azure -c "azure.subscription.monitor.diagnosticSettings != empty" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        Note: It is also possible to use a client secret for app connection instead of a certificate.

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        2. Run this query:

          ```mql
          azure.subscription.monitor.diagnosticSettings != empty
          ```
      remediation: |
        ### Microsoft Azure Portal

        To update using Microsoft Azure Portal:

        1. Log into Microsoft Azure Portal at https://portal.azure.com.
        2. Go to **Monitor**.
        3. Under **Settings**, select **Diagnostic settings**.
        4. Select a subscription and make sure there are diagnostic settings for that subscription.
  - uid: mondoo-azure-security-diagnostic-settings-essential-categories
    title: Ensure that diagnostic settings collect essential security categories
    impact: 80
    mql: |
      azure.subscription.monitor.diagnosticSettings != empty
      azure.subscription.monitor.diagnosticSettings.all(properties.logs.where(category == "Administrative").all(enabled == true))
      azure.subscription.monitor.diagnosticSettings.all(properties.logs.where(category == "Security").all(enabled == true))
      azure.subscription.monitor.diagnosticSettings.all(properties.logs.where(category == "Alert").all(enabled == true))
      azure.subscription.monitor.diagnosticSettings.all(properties.logs.where(category == "Policy").all(enabled == true))
    docs:
      desc: |
        Diagnostic settings control how the diagnostic logs are exported and what type of data is collected and exported to the defined destination.

        By default, no log categories are selected when a diagnostic setting is created. Capturing the appropriate log categories for the activities performed within your subscriptions provides proper insight into the environment and will help the SOC team in their analysis.

        We recommend, at a minimum, collecting these categories:

          * Security
          * Alert
          * Administrative
          * Policy
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`, run this query:

          ```bash
          cnspec run azure -c "azure.subscription.monitor.diagnosticSettings.all(properties.logs.where(category == "Administrative").all(enabled == true))" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          cnspec run azure -c "azure.subscription.monitor.diagnosticSettings.all(properties.logs.where(category == "Security").all(enabled == true))" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          cnspec run azure -c "azure.subscription.monitor.diagnosticSettings.all(properties.logs.where(category == "Alert").all(enabled == true))" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          cnspec run azure -c "azure.subscription.monitor.diagnosticSettings.all(properties.logs.where(category == "Policy").all(enabled == true))" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        Note: It is also possible to use a client secret for app connection instead of a certificate.

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        2. Run this query:

          ```mql
          azure.subscription.monitor.diagnosticSettings.all(properties.logs.where(category == "Administrative").all(enabled == true))
          azure.subscription.monitor.diagnosticSettings.all(properties.logs.where(category == "Security").all(enabled == true))
          azure.subscription.monitor.diagnosticSettings.all(properties.logs.where(category == "Alert").all(enabled == true))
          azure.subscription.monitor.diagnosticSettings.all(properties.logs.where(category == "Policy").all(enabled == true))
          ```
      remediation: |
        ### Microsoft Azure Portal

        To update using Microsoft Azure Portal:

        1. Log into Microsoft Azure Portal at https://portal.azure.com.
        2. Go to **Monitor** and select **Activity Log**.
        3. Select **Export Activity logs**.
        4. Select a subscription and select make sure there are diagnostic settings for **Administrative**, **Security**, and **Alert** data.
  - uid: mondoo-azure-security-disable-udp-virtualmachines
    title: Ensure direct UDP access to Azure virtual machines from the internet is restricted
    impact: 80
    props:
      - uid: disallowedPortsUDP
        title: a list of disallowed UDP ports, by default covering common UDP services, add more as needed
        mql: |
          return [
            53,
            123,
            161,
            389,
            1900
          ]
    variants:
      - uid: mondoo-azure-security-disable-udp-virtualmachines-single
      - uid: mondoo-azure-security-disable-udp-virtualmachines-api
    docs:
      desc: |
        The main security issue with exposing UDP services over the internet is the broad attack surface that allows attackers to use reflection amplification attack against virtual machines.

        A reflection attack involves an attacker spoofing a target's IP address and sending a request for information, mainly using UDP. The server then responds by sending an answer. This is called "reflection" (using the same protocol in both directions) attack.

        The main issue is related to the way UDP protocol is designed. UDP is a connection-less protocol that does not validate source IP addresses. Unless the application layer protocol uses countermeasures, an attacker can easily forge the IP packet datagram to include an arbitrary source IP address.

        When many UDP packets have their source IP address forged to the victim IP address, the destination server (or amplifier) responds to the victim (instead of the attacker), creating a reflected denial-of-service (DoS) attack.

        Any server with open UDP ports can be targeted as a reflector. One way of protecting against this attack is to make sure well known UDP port services are not disclosed to the internet.

        Some application-layer protocols that rely on the UDP are:

          * Domain Name System (DNS)
          * Network Time Protocol (NTP)
          * Connection-less Lightweight Directory Access Protocol (CLDAP)
          * Character Generator Protocol (CharGEN)
          * Simple Service Discovery Protocol (SSDP)
          * BitTorrent
          * Simple Network Management Protocol version 2 (SNMPv2)
          * Portmap/Remote Procedure Call (RPC)
          * Network Basic Input/Output System (NetBIOS)
          * Trivial File Transfer Protocol (TFTP)
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`, run this query:

          ```bash
          cnspec run azure -c "allNsgUDP = azure.subscription.network.securityGroups.where(securityRules
        .where(
          properties.access == 'Allow'
            && direction == 'Inbound'
            && properties.protocol == /UDP/i
            && properties.sourceAddressPrefix == /\*|0\.0\.0\.0|<nw>\/0|\/0|internet|any/
        )
        )
        allNsgUDP.all(securityRules.all(properties.destinationPortRange != "*"))
        allNsgUDP.all(securityRules.none(destinationPortRange.any(fromPort <= 53 && toPort >= 53)))
        allNsgUDP.all(securityRules.none(destinationPortRange.any(fromPort <= 123 && toPort >= 123)))
        allNsgUDP.all(securityRules.none(destinationPortRange.any(fromPort <= 161 && toPort >= 161)))
        allNsgUDP.all(securityRules.none(destinationPortRange.any(fromPort <= 389 && toPort >= 389)))
        allNsgUDP.all(securityRules.none(destinationPortRange.any(fromPort <= 1900 && toPort >= 1900)))" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>```

        Note: It is also possible to use a client secret for app connection instead of a certificate.

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        2. Run this query:

          ```mql
        allNsgUDP = azure.subscription.network.securityGroups.where(securityRules
        .where(
          properties.access == 'Allow'
            && direction == 'Inbound'
            && properties.protocol == /UDP/i
            && properties.sourceAddressPrefix == /\*|0\.0\.0\.0|<nw>\/0|\/0|internet|any/
        )
        )
        allNsgUDP.all(securityRules.all(properties.destinationPortRange != "*"))
        allNsgUDP.all(securityRules.none(destinationPortRange.any(fromPort <= 53 && toPort >= 53)))
        allNsgUDP.all(securityRules.none(destinationPortRange.any(fromPort <= 123 && toPort >= 123)))
        allNsgUDP.all(securityRules.none(destinationPortRange.any(fromPort <= 161 && toPort >= 161)))
        allNsgUDP.all(securityRules.none(destinationPortRange.any(fromPort <= 389 && toPort >= 389)))
        allNsgUDP.all(securityRules.none(destinationPortRange.any(fromPort <= 1900 && toPort >= 1900)))
          ```
      remediation: |
        Disable direct UDP access to your Azure virtual machines from the internet. There are other options you can use to access UDP-based services running on these virtual machines:
        * Point-to-site VPN
        * Site-to-site VPN
        * ExpressRoute
  - uid: mondoo-azure-security-disable-udp-virtualmachines-single
    filters: |
      asset.platform == "azure-network-security-group"
      asset.kind == "azure-object"
    mql: |
      allNsgUDP = azure.subscription.network.securityGroup.securityRules
        .where(
          properties.access == 'Allow'
            && direction == 'Inbound'
            && properties.protocol == /UDP|\*/i
            && properties.sourceAddressPrefix == /\*|0\.0\.0\.0|<nw>\/0|\/0|internet|any/
        )
      allNsgUDP.all(properties.destinationPortRange != "*")
      props.disallowedPortsUDP {
        disallowedPortUDP = _
        disallowedPortUDP
        allNsgUDP.none(destinationPortRange.any(fromPort <= disallowedPortUDP && toPort >= disallowedPortUDP))
      }
  - uid: mondoo-azure-security-disable-udp-virtualmachines-api
    filters: |
      asset.platform == "azure"
      asset.kind == "api"
    mql: |
      allNsgUDP = azure.subscription.network.securityGroups.where(securityRules
        .where(
          properties.access == 'Allow'
            && direction == 'Inbound'
            && properties.protocol == /UDP|\*/i
            && properties.sourceAddressPrefix == /\*|0\.0\.0\.0|<nw>\/0|\/0|internet|any/
        )
      )
      allNsgUDP.all(securityRules.all(properties.destinationPortRange != "*"))
      props.disallowedPortsUDP {
        disallowedPortUDP = _
        disallowedPortUDP
      }