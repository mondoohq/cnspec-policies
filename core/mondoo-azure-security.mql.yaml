policies:
- uid: mondoo-azure-security
  name: Microsoft Azure Security by Mondoo
  version: 1.2.0
  scoring_system: 2
  authors:
    - name: Mondoo, Inc
      email: hello@mondoo.com
  tags:
    mondoo.com/platform: azure,cloud
    mondoo.com/category: security
  docs:
    desc: |-
      ## Overview

      Azure Security by Mondoo provides guidance for establishing minimum recommended security and operational best practices for Azure.

      ## Remote scan

      Remote scans use native transports in cnspec to provide on-demand scan results without the need to install any agents or integration. 

      Note: Some of the checks in this policy query Microsoft Graph API data. To successfully run these checks, you must create an Azure AD app registration for cnspec. Follow the instructions on https://mondoo.com/docs/platform/cloud/azure/azure-integration-scan/ and include the permissions described on https://mondoo.com/docs/platform/saas/ms365/. 
      
      To run all checks at the same time, ensure your app registration has the necessary permissions as described above and then run:

      ```bash
      cnspec scan azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id> --policy-bundle mondoo-azure-security.mql.yaml
      ```

      For a complete list of native transports run: 
      
      ```bash
      cnspec scan --help
      ```
      ### Prerequisites

      Remote scans of Azure  requires API credentials with access to the subscription. 

      ### Scan an Azure subscription

      ```bash
      cnspec scan azure --subscription <subscription_id>
      ```

      ## Join the community!

      Our goal is to build policies that are simple to deploy, accurate, and actionable. 
      
      If you have any suggestions on how to improve this policy, or if you need support, [join the community](https://github.com/orgs/mondoohq/discussions) in GitHub Discussions. 
  specs:
  - asset_filter:
      query: |
        platform.name == "azure"
        platform.kind == "api"
    scoring_queries:
      mondoo-azure-security-ensure-os-disk-are-encrypted: null
      mondoo-azure-security-ssh-access-restricted-from-internet: null
      mondoo-azure-security-rdp-access-restricted-from-internet: null
      mondoo-azure-security-secure-transfer-required-enabled: null
      mondoo-azure-security-public-access-level-private-blob-containers: null
      mondoo-azure-security-default-network-access-rule-storage-accounts-deny: null
      mondoo-azure-security-no-sql-databases-allow-ingress-0-0-0-0-0: null
      mondoo-azure-security-ensure-multifactor-authentication-is-enabled-for-all-users-in-all-roles: null
      mondoo-azure-security-ensure-multifactor-authentication-is-enabled-for-all-users-in-administrative-roles: null
      mondoo-azure-security-ensure-that-between-two-and-four-global-admins-are-designated: null
      mondoo-azure-security-ensure-security-defaults-is-enabled-on-azure-active-directory: null
      mondoo-azure-security-enable-azure-ad-identity-protection-sign-in-risk-policies: null
      mondoo-azure-security-enable-azure-ad-identity-protection-user-risk-policies: null
      mondoo-azure-security-ensure-auditing-retention-greater-than-90-days: null 
      mondoo-azure-security-ensure-auditing-on: null
      mondoo-azure-security-trusted-microsoft-services-enabled-for-storage-account-access: null
      mondoo-azure-security-ensure-register-with-ad-is-enabled-on-app-service: null
      mondoo-azure-security-ensure-web-app-is-using-the-latest-tls: null
      mondoo-azure-security-ensure-the-expiration-date-is-set-for-all-keys-and-secrets-in-kv: null
      mondoo-azure-security-ensure-the-kv-is-recoverable: null
      mondoo-azure-security-ensure-logging-enabled-kv: null
      mondoo-azure-security-ensure-activity-log-alert-exists-for-create-update-delete-network-security-group: null
      mondoo-azure-security-ensure-that-notify-about-alerts-with-high-severity-is-on: null 
queries: 
  - uid: mondoo-azure-security-ensure-multifactor-authentication-is-enabled-for-all-users-in-all-roles
    title: Ensure that multifactor authentication has been enabled for all users
    severity: 100
    docs:
      desc: |
        This control checks that the MFA has been enabled for all users in the Microsoft Azure tenant. 
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:
      
        it is possible also to use client-secret for app connection instead of the certificate. 

        Run the following query:

          ```bash
          cnspec run azure -c "microsoft.security.latestSecureScores.controlScores.one( _['controlName'] == 'MFARegistrationV2' &&  _['score'] == 9)" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```
        
        2. Run the following query:

          ```mql
          microsoft.security.latestSecureScores.controlScores.one( _['controlName'] == 'MFARegistrationV2' &&  _['score'] == 9 )
          ```
      remediation: |
        ### Microsoft Azure Portal

        To update using the Microsoft Azure portal:
        1. Log in as a Conditional Access Administrator, Security Administrator, or Global Administrator to the Microsoft Azure portal at https://portal.azure.com 
        2. Navigate to **Azure Active Directory -> Security -> Conditional Access**.
        3. Select **New Policy** with these conditions:
           * Grant: Grant access (Require multi-factor authentication)
           * Users: All users
           * Cloud apps or actions: All cloud apps 
        5. Make sure that the policy is enabled. You can also set **Enable policy** to **Report-only**. After confirming your settings using report-only mode, an administrator can switch the **Enable policy** toggle from **Report-only** to **On**.
    query: |
      microsoft.security.latestSecureScores.controlScores.one( _['controlName'] == 'MFARegistrationV2' &&  _['score'] == 9)
  - uid: mondoo-azure-security-ensure-multifactor-authentication-is-enabled-for-all-users-in-administrative-roles
    title: Ensure all users in administrative roles have MFA enabled 
    severity: 100
    docs:
      desc: |
        Enable multifactor authentication for all users in administrative roles!
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        Run the following query:

          ```bash
          cnspec run azure -c "microsoft.security.latestSecureScores.controlScores.one( _['controlName'] == 'AdminMFAV2' && _['score'] == 10)" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```
        
        2. Run the following query:

          ```mql
          microsoft.security.latestSecureScores.controlScores.one( _['controlName'] == 'AdminMFAV2' && _['score'] == 10 )
          ```
      remediation: |
        ### Microsoft Azure Portal

        To update using the Microsoft Azure portal:
        1. Log in as a Conditional Access Administrator, Security Administrator, or Global Administrator to the Microsoft Azure portal at https://portal.azure.com 
        2. Navigate to Azure Active Directory -> Security -> Conditional Access
        3. Select **New Policy** with following conditions:
           * Grant: Grant access (Require multi-factor authentication)
           * Users -> Users and groups -> Include -> Select users and groups -> Directory roles: At minimum select Billing admin, Conditional Access admin, Exchange admin, Global admin, Helpdesk admin, Security admin, SharePoint admin, and User admin.
           * Cloud apps or actions: All cloud apps 
        5. Make sure that the policy is enabled. You can also set **Enable policy** to **Report-only**. After confirming your settings using report-only mode, an administrator can switch the **Enable policy** toggle from **Report-only** to **On**.
    query: |
      microsoft.security.latestSecureScores.controlScores.one( _['controlName'] == 'AdminMFAV2' && _['score'] == 10 )
  - uid: mondoo-azure-security-ensure-that-between-two-and-four-global-admins-are-designated
    title: Ensure that at least three but not more than four global admins are designated
    severity: 60
    docs:
      desc: |
        This control checks that there are enough Global Admins in a single tenant. 
         When designating global admins, it's important to consider the size and complexity of the organization, as well as the level of responsibility and authority required for the role. As a general rule, it's a good idea to have at least three global admins to ensure that there is redundancy and coverage in case one admin is unavailable or leaves the organization.

        At the same time, having too many global admins can lead to confusion and inefficiency, as multiple people may be making decisions or taking actions without proper coordination. Therefore, it's recommended to limit the number of global admins to four, unless the organization is particularly large or complex and requires more administrators to properly manage its operations.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        Run the following query:

          ```bash
          cnspec run azure -c "microsoft.rolemanagement.roleDefinitions.where(displayName == "Global Administrator").all(assignments.length > 1 && assignments.length <= 4)" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```
        __cnspec shell__

        To audit Microsoft azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```
        
        2. Run the following query:

          ```mql
          microsoft.rolemanagement.roleDefinitions.where(displayName == "Global Administrator").all(assignments.length > 1 && assignments.length <= 4)
          ```
      remediation: |
        ### Microsoft Azure Portal

        To update using the Microsoft Azure portal:
         1. Log into the Microsoft Azure portal at https://portal.azure.com as a global administrator.
         2. Navigate to Azure Active Directory
         3. Select **Users -> New user **.  
         4. If there are not enough global admins, create one: 
            * Select the user name.
            * Under **Roles**, select **Global Administrator ** and then select **Save changes**.
         5. Remove the Global Admin, if there are more than four Global Administrators
            * Select the user name.
            * Under Roles, select **Manage roles** and then deselect Global Administrator.
            * Select **Save changes**.
    query: |
      microsoft.rolemanagement.roleDefinitions.where(displayName == "Global Administrator").all(assignments.length > 1 && assignments.length <= 4)
  - uid: mondoo-azure-security-ensure-security-defaults-is-enabled-on-azure-active-directory
    title: Ensure that the security defaults are disabled 
    severity: 80
    docs:
      desc: |
        This control checks that the security defaults (which are enabled by default) are enabled in Azure Active directory.

        The security defaults help protect user accounts from password spray and phishing attacks by:

        * Requiring all users and admins to register for MFA using the Microsoft Authenticator app.
        * Challenging users with MFA when they log in from a new device or app or for critical roles and tasks.
        * Disabling authentication from legacy authentication clients that can't do MFA. 
        * Protecting admins by requiring extra authentication every time they log in.

        Note: Advanced security configurations require you to disable the security defaults. 


      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        Run the following query:

          ```bash
          cnspec run azure -c "microsoft.policies.identitySecurityDefaultsEnforcementPolicy["isEnabled"] == false" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```
        
        2. Run the following query:

          ```mql
          microsoft.policies.identitySecurityDefaultsEnforcementPolicy["isEnabled"] == false
          ```
      remediation: |
         ### Microsoft Azure Portal

         To update using the Microsoft Azure portal:
         1. Log into the Microsoft Azure portal at https://portal.azure.com 
         2. Navigate to **Azure Active Directory -> properties -> Select "manage security defaults"**.
         3. Verify the "Enable security defaults" toggle is Yes. 
    query: |
      microsoft.policies.identitySecurityDefaultsEnforcementPolicy["isEnabled"] == true
  - uid: mondoo-azure-security-enable-azure-ad-identity-protection-sign-in-risk-policies
    title: Enable sign-in risk policy for MFA 
    severity: 80
    docs:
      desc: |
        This control checks that there are some policies in place which can detect risky sign-in in real-time and offline. A risky sign-in mainly means a sign-in attempt which might be performed by illegitimate owner of a user account.

        Most users have a normal behavior that can be tracked. When they fall outside of this norm, it could be risky to allow them to successfully sign in. Instead, you may want to block that user, or ask them to perform a multi-factor authentication. If the user successfully completes the MFA challenge, you can consider it a valid sign-in attempt and grant access to the application or service.

      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        Run the following query:

          ```bash
          cnspec run azure -c "microsoft.security.latestSecureScores.controlScores.one( _['controlName'] == 'SigninRiskPolicy' && _['score'] == 7 )" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```
        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```
        
        2. Run the following query:

          ```mql
          microsoft.security.latestSecureScores.controlScores.one( _['controlName'] == 'SigninRiskPolicy' && _['score'] == 7 )
          ```
      remediation: |
         ### Microsoft Azure Portal

         To update using the Microsoft Azure portal:
         1. Log into the Microsoft Azure portal at https://portal.azure.com 
         2. Navigate to **Azure Active Directory -> Security -> Identity Protection -> Sign-in risk policy**.
         3. Make sure the policy applies to all users.
         4. Under Conditions, choose **Select conditions -> Select a risk level**, then choose **Medium and above**.
         5. Under Access, choose **Select a control**. Make sure the **Allow access and require multi-factor authentication** option is checked, then choose **Select**.
         6. Set **Enforce Policy** to **On**, then select **Save**.
    query: |
      microsoft.security.latestSecureScores.controlScores.one( _['controlName'] == 'SigninRiskPolicy' && _['score'] == 7 )
  - uid: mondoo-azure-security-enable-azure-ad-identity-protection-user-risk-policies
    title: Enable user risk policy for password change 
    severity: 100
    docs:
      desc: |
        This control checks that there are policies in place that can detect risky sign-in, both in real time and offline. A risky sign-in generally means a sign-in attempt performed by someone other than the account owner.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        Run the following query:

          ```bash
          cnspec run azure -c "microsoft.security.latestSecureScores.controlScores.one( _['controlName'] == 'UserRiskPolicy' && _['score'] == 7 )" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```
        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```
        
        2. Run the following query:

          ```mql
          microsoft.security.latestSecureScores.controlScores.one( _['controlName'] == 'UserRiskPolicy' && _['score'] == 7 )
          ```
      remediation: |
         ### Microsoft Azure Portal

         To update using the Microsoft Azure portal:
         1. Log into the Microsoft Azure portal at https://portal.azure.com 
         2. Navigate to **Azure Active Directory -> Security -> Identity Protection -> User risk policy**.
         3. Make sure the policy applies to all users.
         4. Under **Conditions**, choose **Select conditions -> Select a risk level**, then choose **Medium and above**.
         5. Under **Access,** select **Access**. Make sure the **Allow access and Require password change** is checked, then choose **Select**.
         6. Set **Enforce Policy** to **On**, then select **Save**.
    query: |
      microsoft.security.latestSecureScores.controlScores.one( _['controlName'] == 'UserRiskPolicy' && _['score'] == 7 )
  - uid: mondoo-azure-security-ensure-os-disk-are-encrypted
    title: Ensure that 'OS' disks are encrypted
    severity: 80
    docs:
      desc: |
        This control checks that both OS disks (boot volumes) are encrypted. Customer Managed keys can be either ADE or Server Side Encryption(SSE).
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Run the following query:

          ```bash
          cnspec run azure -c "azure.compute.vms { osDisk { properties['encryption'] } }"
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant. 
        2. Launch `cnspec shell`:

          ```bash
          cnspec shell azure
          ```
        
        3. Run the following query:

          ```mql
          azure.compute.vms { osDisk { properties['encryption'] } }
          ```
      remediation: |
        ###Terraform

        __Encrypt disks Linux VM__

        ```hcl
        # Encrypt Linux OS disk with Terraform
        resource "azure_linux_virtual_machine" "example" {
          name                = "example-linux-machine"
          resource_group_name = azure_resource_group.example.name
          location            = azure_resource_group.example.location
          
          ... 

          encryption_at_host_enabled = true
          
          ... 
        }
        ```

        __Encrypt disks Windows VM__

        ```hcl
        resource "azure_windows_virtual_machine" "example" {
          name                = "example-windows-machine"
          resource_group_name = azure_resource_group.example.name
          location            = azure_resource_group.example.location
          
          ... 

          encryption_at_host_enabled = true
          
          ... 
        }
        ```

        __Encrypt disks managed disks__

        ```hcl
        resource "azure_managed_disk" "example" {
          name                 = var.disk_name
          location             = var.location
          resource_group_name  = var.resource_group_name
          ... 

          encryption_settings {
            enabled = true
          }
          
          ... 
        }
        ```
      
        ###Azure Console

        To update via the Azure Console:

        1. Log into the Azure Console at https://portal.azure.com/.
        2. Go to **Virtual machines**.
        2. For each virtual machine, go to **Settings**
        3. Click on **Disks**.
        4. Click the **X** to detach the disk from the VM.
        5. Search for **Disks** and locate any unattached disk.
        6. Click the disk, then select **Encryption**.
        7. Change your encryption type, then select the encryption set.
        8. Click **Save**.
        9. Go back to the VM and re-attach the disk.

        ###Azure CLI 

        ```bash
        az vm encryption enable -g <resource_group> --name <vm_name> --disk-encryption-keyvault <keyvault_name>
        ```
    refs:
      - title: Overview of managed disk encryption options
        url: https://learn.microsoft.com/en-us/azure/virtual-machines/disk-encryption-overview
    query: |
      azure.compute.vms {
        osDisk {
          properties['encryption'] != null
        }
      }
  - uid: mondoo-azure-security-ssh-access-restricted-from-internet
    title: Ensure that SSH access is restricted from the internet
    severity: 80
    docs:
      desc: |
        This control checks whether SSH on port 22 is not configured to allow access from anywhere with the CIDR block "0.0.0.0". 
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Run the following query:

          ```bash
          cnspec run azure -c "azure.network.securityGroups { securityRules }"
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant. 
        2. Launch `cnspec shell`:

          ```bash
          cnspec shell azure
          ```
        
        3. Run the following query:

          ```mql
          azure.network.securityGroups { securityRules }
          ```
      remediation: |
        ###Terraform

        ```hcl
        # Ensure the `source_address_prefix` is configured to a restrictive CIDR address

        resource "azure_network_security_group" "my_terraform_nsg" {
          name                = "myNetworkSecurityGroup"
          location            = azure_resource_group.rg.location
          resource_group_name = azure_resource_group.rg.name

          security_rule {
            name                       = "SSH"
            priority                   = 1001
            direction                  = "Inbound"
            access                     = "Allow"
            protocol                   = "Tcp"
            source_port_range          = "*"
            destination_port_range     = "22"
            source_address_prefix      = "192.168.22.5/24"
            destination_address_prefix = "*"
          }
        }
        ```
    query: |
      azure.network.securityGroups {
        securityRules.where ( 
          _.properties['access'] == 'Allow' && 
          _.properties['direction'] == 'Inbound' &&
          _.properties['protocol'] == /TCP|\*/ && 
          _.properties['sourceAddressPrefix'] == /\*|0\.0\.0\.0|<nw>\/0|\/0|internet|any/ 
        ) { 
            destinationPortRange { _['fromPort'] > 22 || _['toPort'] < 22 
          }
        }
      }
  - uid: mondoo-azure-security-rdp-access-restricted-from-internet
    title: Ensure that RDP access is restricted from the internet
    severity: 80
    docs:
      desc: |
        This control checks whether RDP on port 3389 is not configured to allow access from anywhere with the CIDR block "0.0.0.0". 
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Run the following query:

          ```bash
          cnspec run azure -c "azure.network.securityGroups { securityRules }"
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant. 
        2. Launch `cnspec shell`:

          ```bash
          cnspec shell azure
          ```
        
        3. Run the following query:

          ```mql
          azure.network.securityGroups { securityRules }
          ```
      remediation: |
        ###Terraform

        ```hcl
        # Ensure the `source_address_prefix` is configured to a restrictive CIDR address
        
        resource "azure_network_security_group" "example" {
          name                = "example-rdp-security"
          location            = azure_resource_group.rg.location
          resource_group_name = azure_resource_group.rg.name

          security_rule {
            name                       = "RDP"
            priority                   = 1001
            direction                  = "Inbound"
            access                     = "Allow"
            protocol                   = "Tcp"
            source_port_range          = "*"
            destination_port_range     = "3389"
            source_address_prefix      = "192.168.22.5/24"
            destination_address_prefix = "*"
          }
        }
        ```
    query: |
      azure.network.securityGroups {
        securityRules.where ( 
          _.properties['access'] == 'Allow' && 
          _.properties['direction'] == 'Inbound' && 
          _.properties['protocol'] == /TCP|\*/ && 
          _.properties['sourceAddressPrefix'] == /\*|0\.0\.0\.0|<nw>\/0|\/0|internet|any/ 
        ) {
            destinationPortRange {
              _['fromPort'] > 3389 || _['toPort'] < 3389
            }
          }
      }
  - uid: mondoo-azure-security-secure-transfer-required-enabled
    title: Ensure that 'Secure transfer required' is set to 'Enabled'
    severity: 80
    docs:
      desc: |
        This control checks that data encryption in transit is enabled.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Run the following query:

          ```bash
          cnspec run azure -c "azure.storage.accounts { properties['supportsHttpsTrafficOnly'] }"
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant. 
        2. Launch `cnspec shell`:

          ```bash
          cnspec shell azure
          ```
        
        3. Run the following query:

          ```mql
          azure.storage.accounts { properties['supportsHttpsTrafficOnly'] }
          ```
      remediation: |
        ###Terraform

        ```hcl
        resource "azure_storage_account" "example_storage_account" {
          ...
          enable_https_traffic_only = true
        }
        ```    
    query: |
      azure.storage.accounts {
        properties['supportsHttpsTrafficOnly'] == true || properties['enableHttpsTrafficOnly'] == true
      }
  - uid: mondoo-azure-security-public-access-level-private-blob-containers
    title: Ensure that 'Public access level' is set to Private for blob containers
    severity: 80
    docs:
      desc: |
        This control checks that anonymous access to blob containers is disabled, and public access on storage accounts is disabled.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Run the following query:

          ```bash
          cnspec run azure -c "azure.storage.accounts { containers { properties['publicAccess'] == "None" } }"
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant. 
        2. Launch `cnspec shell`:

          ```bash
          cnspec shell azure
          ```
        
        3. Run the following query:

          ```mql
          azure.storage.accounts { containers { properties['publicAccess'] == "None" } }
          ```
      remediation: |
        ###Terraform

        ```hcl
        resource "azure_storage_container" "example_storage_container" {
            ...
          container_access_type = "private"
        }
        ```

        ###Azure Portal 

        1. Log into the Azure Portal at https://portal.azure.com.
        2. Navigate to **Storage Accounts**.
        3. Navigate to **BLOB SERVICE**.
        4. Select **Containers**.
        5. Select a container and click **Access policy**. 
        6. Set **Public Access Level** to **Private**. 
        7. Repeat For each Container. 

        Repeat steps 3-7 for each storage account. 
    
        ###Azure CLI

        ```bash
        az storage container set-permission 
        --name <container_name> 
        --public-access off 
        --account-name <account_name> 
        --account-key <account_key>
        ```
    query: |
      azure.storage.accounts {
        containers {
          properties['publicAccess'] == "None"
        }
      }
  - uid: mondoo-azure-security-default-network-access-rule-storage-accounts-deny
    title: Ensure the default network access rule for Storage Accounts is set to deny
    severity: 80
    docs:
      desc: |
        This control checks that access to the default network for storage accounts is set to deny. 
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Run the following query:

          ```bash
          cnspec run azure -c "azure.storage.accounts { containers { properties['publicAccess'] == "None" } }"
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant. 
        2. Launch `cnspec shell`:

          ```bash
          cnspec shell azure
          ```
        
        3. Run the following query:

          ```mql
          azure.storage.accounts { containers { properties['publicAccess'] == "None" } }
          ```
      remediation: |
        ###Terraform

        ```hcl
        # Ensure the `default_action` is set to `Deny`

        resource "azure_storage_account_network_rules" "example_storage_account" {
          resource_group_name  = azure_resource_group.example.name
          storage_account_name = azure_storage_account.example.name

          default_action       = "Deny"
        }
        ```

        ```hcl
        resource "azure_storage_account" "example_storage_account" {
          name                = "example_storage_account"
          resource_group_name = azure_resource_group.example.name
          location            = azure_resource_group.example.location

          network_rules {
            default_action = "Deny"
          }

          ... 
        }
        ```      
    query: |
      azure.storage.accounts {
        properties['networkAcls']['defaultAction'] == "Deny"
      }
  - uid: mondoo-azure-security-trusted-microsoft-services-enabled-for-storage-account-access
    title: Ensure 'Trusted Microsoft Services' is enabled for Storage Account access
    severity: 80
    docs:
      desc: |
        This control checks that 'Trusted Microsoft Services' is enabled for Storage Account access.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Run the following query:

          ```bash
          cnspec run azure -c "azure.storage.accounts { containers { properties['publicAccess'] == "None" } }"
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant. 
        2. Launch `cnspec shell`:

          ```bash
          cnspec shell azure
          ```
        
        3. Run the following query:

          ```mql
          azure.storage.accounts { containers { properties['publicAccess'] == "None" } }
          ```
      remediation: |
        ###Terraform

        ```hcl
        resource "azure_storage_account" "example" {
            ...
          network_rules {
            ...
            bypass = ["AzureServices"]
            ...
          }
        }
        ``` 
    query: |
      azure.storage.accounts {
        properties['networkAcls']['bypass'] == "AzureServices"
      }
  - uid: mondoo-azure-security-ensure-auditing-on
    title: Ensure that 'Auditing' is set to 'On' for SQL servers
    severity: 80
    docs:
      desc: |
        This control checks that 'Auditing' is set to 'On' for SQL servers.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Run the following query:

          ```bash
          cnspec run azure -c "azure.sql.servers { auditingPolicy['state'] }"
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant. 
        2. Launch `cnspec shell`:

          ```bash
          cnspec shell azure
          ```
        
        3. Run the following query:

          ```mql
          azure.sql.servers { auditingPolicy['state'] }
          ```
      remediation: |
        ###Terraform

        ```hcl
        resource "azure_sql_server" "example_sql_server" {
          ...

          extended_auditing_policy {
            storage_endpoint                        = azure_storage_account.example.primary_blob_endpoint
            storage_account_access_key              = azure_storage_account.example.primary_access_key
            storage_account_access_key_is_secondary = true
            retention_in_days                       = 90
          }
        }
        ``` 
    query: |
      azure.sql.servers {
        auditingPolicy['state'] == "Enabled"
      }
  - uid: mondoo-azure-security-ensure-auditing-retention-greater-than-90-days
    title: Ensure that 'Auditing' Retention is 'greater than 90 days'
    severity: 80
    docs:
      desc: |
        This control checks that 'Auditing' Retention is 'greater than or equal to 90 days'
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Run the following query:

          ```bash
          cnspec run azure -c "azure.sql.servers { auditingPolicy['retentionDays'] }"
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant. 
        2. Launch `cnspec shell`:

          ```bash
          cnspec shell azure
          ```
        
        3. Run the following query:

          ```mql
          azure.sql.servers { auditingPolicy['retentionDays'] }
          ```
      remediation: |
        ###Terraform

        ```hcl
        resource "azure_sql_server" "example" {
          ...
          extended_auditing_policy {
            storage_endpoint           = azure_storage_account.example.primary_blob_endpoint
            storage_account_access_key = azure_storage_account.example.primary_access_key
            storage_account_access_key_is_secondary = true
            retention_in_days                       = 90
          }
        }
        ```     
    query: |
      azure.sql.servers {
        auditingPolicy['retentionDays'] >= 90
      }
  - uid: mondoo-azure-security-no-sql-databases-allow-ingress-0-0-0-0-0
    title: Ensure no SQL Databases allow ingress 0.0.0.0/0 (ANY IP)
    severity: 80
    docs:
      desc: |
        This control checks that no SQL databases allow ingress connections from "0.0.0.0". 
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Run the following query:

          ```bash
          cnspec run azure -c "azure.sql.servers { firewallRules { startIpAddress } }"
          cnspec run azure -c "azure.postgresql.servers { firewallRules { startIpAddress } }"
          cnspec run azure -c "azure.mariadb.servers { firewallRules { startIpAddress } }"
          cnspec run azure -c "azure.mysql.servers { firewallRules { startIpAddress } }"
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant. 
        2. Launch `cnspec shell`:

          ```bash
          cnspec shell azure
          ```
        
        3. Run the following query:

          ```mql
          azure.sql.servers { firewallRules { startIpAddress } }
          azure.postgresql.servers { firewallRules { startIpAddress } }
          azure.mariadb.servers { firewallRules { startIpAddress } } 
          azure.mysql.servers { firewallRules { startIpAddress } } 
          ```
      remediation: |
        ###Terraform

        __mySQL__

        ```hcl
        # Ensure `start_ip_address` is not configured to `0.0.0.0`

        resource "azure_mysql_firewall_rule" "example" {
          ...
          start_ip_address    = "192.168.2.22"
          end_ip_address      = "255.255.255.255"
        }
        ``` 
        
        __MariaDB__
        
        ```hcl
        # Ensure `start_ip_address` is not configured to `0.0.0.0`

        resource "azure_mariadb_firewall_rule" "example" {
          ...
          start_ip_address    = "192.168.2.22"
          end_ip_address      = "255.255.255.255"
        }
        ``` 

        __SQL__

        ```hcl
        # Ensure `start_ip_address` is not configured to `0.0.0.0`

        resource "azure_sql_firewall_rule" "example" {
          ...
          start_ip_address    = "192.168.2.22"
          end_ip_address      = "255.255.255.255"
        }
        ```

        __Postgres__

        ```hcl
        # Ensure `start_ip_address` is not configured to `0.0.0.0`

        resource "azure_postgresql_firewall_rule" "example" {
          ...
          start_ip_address    = "192.168.2.22"
          end_ip_address      = "255.255.255.255"
        }
        ``` 
    query: |
      azure.sql.servers {
        firewallRules.length >= 1
        firewallRules {
          startIpAddress != '0.0.0.0'
        }
      }
      azure.postgresql.servers {
        firewallRules.length >= 1
        firewallRules {
          startIpAddress != '0.0.0.0'
        }
      }
      azure.mysql.servers {
        firewallRules.length >= 1
        firewallRules {
          startIpAddress != '0.0.0.0'
        }
      }
      azure.mariadb.servers {
        firewallRules.length >= 1
        firewallRules {
          startIpAddress != '0.0.0.0'
        }
      }
  - uid: mondoo-azure-security-ensure-register-with-ad-is-enabled-on-app-service
    title: Ensure that App services can authenticate with Active Directory
    severity: 80
    docs:
      desc: |
        This control checks that the App services be able to authenticate through Azure AD. 

        In this way, the secrets will be removed from the app itself, and instead the app will connect to other Azure services securely without the need for usernames and passwords.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:
      
        it is possible also to use client-secret for app connection instead of the certificate. 

        Run the following query:

          ```bash
          cnspec run azure -c "azure.web.apps { identity["type"] == "SystemAssigned" || identity["principalId"] != null }" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```
        
        2. Run the following query:

          ```mql
          azure.web.apps { identity["type"] == "SystemAssigned" || identity["principalId"] != null }
          ```
      remediation: |
        ### Microsoft Azure Portal

        To update using the Microsoft Azure portal:
        1. Log in to the Microsoft Azure portal at https://portal.azure.com 
        2. Navigate to **App Services**.
        3. Click on each App, under "setting" click on "identity"
        4. Under the "System assigned" pane, set "Status" to "On" 
    query: |
      azure.web.apps { 
        identity["type"] == "SystemAssigned" || identity["principalId"] != null
      }
  - uid: mondoo-azure-security-ensure-web-app-is-using-the-latest-tls
    title: Ensure that Web App taking advantage of latest version of tls encryption
    severity: 80
    docs:
      desc: |
        It is highly recommended to use the latest TLS version which is currently 1.3 version for web app secure connections. 
        
        Since at the time of writing this document, azure App services still does not support TLS version 1.3, therefore our policy has been set on version 1.2.

      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:
      
        it is possible also to use client-secret for app connection instead of the certificate. 

        Run the following query:

          ```bash
          cnspec run azure -c "azure.web.apps { configuration.properties["minTlsVersion"] == "1.2" }" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```
        
        2. Run the following query:

          ```mql
          azure.web.apps { configuration.properties["minTlsVersion"] == "1.2" }
          ```
      remediation: |
        ### Microsoft Azure Portal

        To update using the Microsoft Azure portal:
        1. Log in to the Microsoft Azure portal at https://portal.azure.com 
        2. Navigate to **App Services**.
        3. Click on each App, under "setting" click on "TLS/SSL settings"
        4. Under the "Bindings" pane, ensure that "Minimum TLS Version" set to "1.2" under "Protocol Settings". 
    query: |
      azure.web.apps { 
        configuration.properties["minTlsVersion"] == "1.2"
      }
  - uid: mondoo-azure-security-ensure-the-expiration-date-is-set-for-all-keys-and-secrets-in-kv
    title: Ensure that the Expiration Date is set for all Keys and Secrets in Key Vaults
    severity: 80
    docs:
      desc: |
        The expiration time attribute identifies the expiration time which after the key/secret must not be used for a cryptographic operation. 
        By default, keys/secrets never expire. Therefore, it is highly recommended that keys/secrets be rotated in the key vault and set an explicit expiration time.

      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:
      
        it is possible also to use client-secret for app connection instead of the certificate. 

        Run the following query:

          ```bash
          cnspec run azure -c "azure.keyvault.vaults { keys.all( enabled && expires != null ) }" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          cnspec run azure -c "azure.keyvault.vaults { secrets.all( enabled == true && expires != null ) }" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```
        
        2. Run the following query:

          ```mql
          azure.keyvault.vaults { keys.all( enabled && expires != null ) }
          azure.keyvault.vaults { secrets.all( enabled == true && expires != null ) }
          ```
      remediation: |
        ### Microsoft Azure Portal

        To update using the Microsoft Azure portal:
        1. Log in to the Microsoft Azure portal at https://portal.azure.com 
        2. Navigate to **Key vaults**.
        3. For each Key Vaults, click on "Keys" or "Secrets"
        4. Make sure that each key/secret in the KV has "EXPIRATION DATE" set as appropriate
    query: |
      azure.keyvault.vaults { 
        keys.all( enabled && expires != null )
      }
      azure.keyvault.vaults { 
        secrets.all( enabled == true && expires != null )
      }
  - uid: mondoo-azure-security-ensure-the-kv-is-recoverable
    title: Ensure it is possible to recover Key Vaults
    severity: 80
    docs:
      desc: |
        The key Vault can contains keys, secrets and certificates. Accidental unavailability of a KV can cause serious problems in any organizations. 
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:
      
        it is possible also to use client-secret for app connection instead of the certificate. 

        Run the following query:

          ```bash
          cnspec run azure -c "azure.keyvault.vaults { properties["enablePurgeProtection"] == "true" properties["enableSoftDelete"] == "true" }" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```
        
        2. Run the following query:

          ```mql
          azure.keyvault.vaults { properties["enablePurgeProtection"] == "true" properties["enableSoftDelete"] == "true" }
          ```
      remediation: |
        ### Microsoft Azure Portal

        To update using the Microsoft Azure portal:
        1. Log in to the Microsoft Azure portal at https://portal.azure.com 
        2. Navigate to **Key vaults**.
        3. Click "Properties" and ensure Soft delete has been enabled on this key vault
        4. At the bottom of the page, click "Enable Purge Protection"
    query: |
      azure.keyvault.vaults { 
        properties["enablePurgeProtection"] == "true" 
        properties["enableSoftDelete"] == "true"
      }
  - uid: mondoo-azure-security-ensure-logging-enabled-kv
    title: Ensure all operations on Key Vault is logged 
    severity: 80
    docs:
      desc: |
        Monitoring how, by whom and when kv are accessed, enables an audit trail of interactions with confidential information, keys, secrets and certificates.
        
        Enabling logging for Key Vault saves information in an Azure storage account which the user provides. This will create a new container called insights-logs-auditevent for the specified storage account.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:
      
        it is possible also to use client-secret for app connection instead of the certificate. 

        Run the following query:

          ```bash
          cnspec run azure -c "azure.keyvault.vaults { diagnosticSettings.any( properties["logs"].where( _["category"] == "AuditEvent" && _["retentionPolicy"]["days"] >= 180 )  ) }" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```
        
        2. Run the following query:

          ```mql
          azure.keyvault.vaults { diagnosticSettings.any( properties["logs"].where( _["category"] == "AuditEvent" && _["retentionPolicy"]["days"] >= 180 )  ) }
          ```
      remediation: |
        ### Microsoft Azure Portal

        To update using the Microsoft Azure portal:
        1. Log in to the Microsoft Azure portal at https://portal.azure.com 
        2. Navigate to **Key vaults**.
        3. Click "Properties" and ensure Soft delete has been enabled on this key vault
        4. At the bottom of the page, click "Enable Purge Protection"
    query: |
      azure.keyvault.vaults { 
        diagnosticSettings.any( properties["logs"].where( _["category"] == "AuditEvent" && _["retentionPolicy"]["days"] >= 180 )  )
      }
  - uid: mondoo-azure-security-ensure-activity-log-alert-exists-for-create-update-delete-network-security-group
    title: Ensure that Activity Log Alert exists for Create, Update and Delete Network Security Group 
    severity: 80
    docs:
      desc: |
        Monitoring Network Security Group events can give clear insight into network access changes and it is very useful for detecting suspicious activity.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:
      
        it is possible also to use client-secret for app connection instead of the certificate. 

        Run the following query:

          ```bash
          cnspec run azure -c "azure.monitor.activityLog.alerts.where( actions.length > 0 ).any( conditions.any( _["equals"] == "Microsoft.Network/networkSecurityGroups/write" && _["fieldName"] == "operationName" ) )" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          cnspec run azure -c "azure.monitor.activityLog.alerts.where( actions.length > 0 ).any( conditions.any( _["equals"] == "Microsoft.Network/networkSecurityGroups/delete" && _["fieldName"] == "operationName" ) )" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```
        
        2. Run the following query:

          ```mql
          azure.monitor.activityLog.alerts.where( actions.length > 0 ).any( conditions.any( _["equals"] == "Microsoft.Network/networkSecurityGroups/write" && _["fieldName"] == "operationName" ) )
          azure.monitor.activityLog.alerts.where( actions.length > 0 ).any( conditions.any( _["equals"] == "Microsoft.Network/networkSecurityGroups/delete" && _["fieldName"] == "operationName" ) )
          ```
      remediation: |
        ### Microsoft Azure Portal

        To update using the Microsoft Azure portal:
        1. Log in to the Microsoft Azure portal at https://portal.azure.com 
        2. Navigate to the "Monitor" blade
          1. Click on "Alerts"
          2. Click on "Create" and then "Alert rule" 
          3. Under the Scope tab, click "Select scope" 
          4. In the "Select a resource" window, select the appropriate filters:
            - Filter by subscription: "< choose the subscription alerts are needed for >""
            - Filter by resource location: **"Network security groups"**
            - Filter by location: "All" 
            - Click on the "subscription name" or "resource group" or "Network security group" that the Log Alert Rule will be applied to
          5. Verify that the selection preview shows:
            - "All network security groups" or "< your network security group >""
            - "< Resource Name >" - The subscription, group, or resource you selected
          6. Click "Done" 
          7. Under the Condition tab, click "Add Condition" 
          8. In the "Select a signal" window, under the "Signal Name" heading, click **`Create or Update Network Security Group (Microsoft.Network/networkSecurityGroups)`**
          9. Need to repeat the previous step also for **`Delete Network Security Group (Microsoft.Network/networkSecurityGroups)`**
          10. Under the Actions tab, choose appropriately:
            - Select action groups - If you have an existing action group to notify the necessary personnel.
            - Create action group - If you do not have an existing action group or want to create a new one.
          11. Under the Details tab, fill in:
            - Resource group - Select the resource group you want the alert rule to reside in.
            - Alert rule name - Give your alert a recognizable and standardized name.
            - Alert rule description - (Optional)
          12. Click `Review + create` then verify the summary details
          13. Click `Create`
    query: |
      azure.monitor.activityLog.alerts.where( actions.length > 0 ).any( conditions.any( _["equals"] == "Microsoft.Network/networkSecurityGroups/write" && _["fieldName"] == "operationName" ) )
      azure.monitor.activityLog.alerts.where( actions.length > 0 ).any( conditions.any( _["equals"] == "Microsoft.Network/networkSecurityGroups/delete" && _["fieldName"] == "operationName" ) )
  - uid: mondoo-azure-security-ensure-that-notify-about-alerts-with-high-severity-is-on
    title: Ensure that "Notify about alerts" with High severity' is Enabled
    severity: 80
    docs:
      desc: |
        Enabling security alert emails ensures that security alert emails are received from Microsoft.
        This ensures that Admins are aware of any potential security issues and are able to react quickly.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:
      
        it is possible also to use client-secret for app connection instead of the certificate. 

        Run the following query:

          ```bash
          cnspec run azure -c "azure.cloudDefender.securityContacts.all( alertNotifications["minimalSeverity"] == "High" && alertNotifications["state"] == "On" )" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```
        
        2. Run the following query:

          ```mql
          azure.cloudDefender.securityContacts.all( alertNotifications["minimalSeverity"] == "High" && alertNotifications["state"] == "On" )
          ```
      remediation: |
        ### Microsoft Azure Portal

        To update using the Microsoft Azure portal:
        1. Log in to the Microsoft Azure portal at https://portal.azure.com 
        2. Select `Microsoft Defender for Cloud`
        3. Click on `Environment Settings` and then click on the appropriate Management Group, Subscription, or Workspace
        4. Click on `Email notifications` and ensure that the `Notify about alerts with the following severity (or higher)` setting is checked and set to `High`
    query: |
      azure.cloudDefender.securityContacts.all( alertNotifications["minimalSeverity"] == "High" && alertNotifications["state"] == "On" )


