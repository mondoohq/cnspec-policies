policies:
  - uid: mondoo-azure-security
    name: Microsoft Azure Security by Mondoo
    version: 1.2.0
    license: unspecified
    tags:
      mondoo.com/category: security
      mondoo.com/platform: azure,cloud
    authors:
      - name: Mondoo, Inc
        email: hello@mondoo.com
    docs:
      desc: "## Overview\n\nMicrosoft Azure Security by Mondoo provides guidance for establishing minimum recommended security and operational best practices for Microsoft Azure.\n\n## Remote scan\n\nRemote scans use native transports in cnspec to provide on-demand scan results without installing agents or integrations. \n\nFor a complete list of native transports run: \n\n```bash\ncnspec scan --help\n```\n\n### Prerequisites\n\nRemote scans of Azure require API credentials with access to the subscription.\n\nNote: Some of the checks in this policy query data using Microsoft's Graph API. To successfully run these checks, you must create an Azure AD app registration for cnspec with proper permissions. Follow the instructions on https://mondoo.com/docs/platform/cloud/azure/azure-integration-scan/ to set up this app.\n\nTo run all checks at the same time, ensure your app registration has the necessary permissions as described above and then run:\n\n```bash\ncnspec scan azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id> --policy-bundle mondoo-azure-security.mql.yaml\n```\n\n### Scan an Azure subscription\n\n```bash\ncnspec scan azure --subscription <subscription_id>\n```\n\n## Join the community!\n\nOur goal is to build policies that are simple to deploy, accurate, and actionable. \n\nIf you have any suggestions on improving this policy or need support, [join the community](https://github.com/orgs/mondoohq/discussions) in GitHub Discussions."
    groups:
      - filters: |
          platform.name == "azure"
          platform.kind == "api"
        checks:
          - uid: mondoo-azure-security-default-network-access-rule-storage-accounts-deny
          - uid: mondoo-azure-security-diagnostic-settings-essential-categories
          - uid: mondoo-azure-security-diagnostic-settings-exist
          - uid: mondoo-azure-security-disable-udp-virtualmachines
          - uid: mondoo-azure-security-enable-azure-ad-identity-protection-sign-in-risk-policies
          - uid: mondoo-azure-security-enable-azure-ad-identity-protection-user-risk-policies
          - uid: mondoo-azure-security-ensure-activity-log-alert-exists-for-create-update-delete-network-security-group
          - uid: mondoo-azure-security-ensure-auditing-on
          - uid: mondoo-azure-security-ensure-auditing-retention-greater-than-30-days
          - uid: mondoo-azure-security-ensure-deny-public-access-mariadb
          - uid: mondoo-azure-security-ensure-disabled-public-access-sql
          - uid: mondoo-azure-security-ensure-logging-enabled-kv
          - uid: mondoo-azure-security-ensure-multifactor-authentication-is-enabled-for-all-users-in-administrative-roles
          - uid: mondoo-azure-security-ensure-multifactor-authentication-is-enabled-for-all-users-in-all-roles
          - uid: mondoo-azure-security-ensure-os-disk-are-encrypted
          - uid: mondoo-azure-security-ensure-register-with-ad-is-enabled-on-app-service
          - uid: mondoo-azure-security-ensure-security-defaults-is-enabled-on-azure-active-directory
          - uid: mondoo-azure-security-ensure-that-between-two-and-four-global-admins-are-designated
          - uid: mondoo-azure-security-ensure-that-notify-about-alerts-with-high-severity-is-on
          - uid: mondoo-azure-security-ensure-that-ssl-enabled-latest-version-mariadb
          - uid: mondoo-azure-security-ensure-that-ssl-enabled-latest-version-mysql
          - uid: mondoo-azure-security-ensure-that-ssl-enabled-postgresql
          - uid: mondoo-azure-security-ensure-the-expiration-date-is-set-for-all-keys-and-secrets-in-kv
          - uid: mondoo-azure-security-ensure-the-kv-is-recoverable
          - uid: mondoo-azure-security-ensure-web-app-is-using-the-latest-tls
          - uid: mondoo-azure-security-keyvault-public-access-disabled
          - uid: mondoo-azure-security-no-sql-databases-allow-ingress-0-0-0-0-0
          - uid: mondoo-azure-security-public-access-level-private-blob-containers
          - uid: mondoo-azure-security-rdp-access-restricted-from-internet
          - uid: mondoo-azure-security-secure-transfer-required-enabled
          - uid: mondoo-azure-security-sql-server-audit-on
          - uid: mondoo-azure-security-sql-server-tde-on
          - uid: mondoo-azure-security-ssh-access-restricted-from-internet
          - uid: mondoo-azure-security-trusted-microsoft-services-enabled-for-storage-account-access
    scoring_system: 2
queries:
  - uid: mondoo-azure-security-ensure-multifactor-authentication-is-enabled-for-all-users-in-all-roles
    title: Ensure that multi-factor authentication has been enabled for all users
    impact: 100
    mql: |
      microsoft.security.latestSecureScores.controlScores.one( _['controlName'] == 'MFARegistrationV2' &&  _['score'] == 9)
    docs:
      desc: |
        This check ensures that the MFA has been enabled for all users in the Microsoft Azure tenant.
      audit: "__cnspec run__\n\nTo audit Microsoft Azure with `cnspec run`:\n\nNote: It is also possible to use a client secret for app connection instead of a certificate. \n\nRun the following query:\n\n  ```bash\n  cnspec run azure -c \"microsoft.security.latestSecureScores.controlScores.one( _['controlName'] == 'MFARegistrationV2' &&  _['score'] == 9)\" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>\n  ```\n\n__cnspec shell__\n\nTo audit Microsoft Azure with `cnspec shell`:\n\n1. Launch `cnspec shell`:\n\n  ```bash\n  cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>\n  ```\n\n2. Run the following query:\n\n  ```mql\n  microsoft.security.latestSecureScores.controlScores.one( _['controlName'] == 'MFARegistrationV2' &&  _['score'] == 9 )\n  ```\n"
      remediation: "### Microsoft Azure Portal\n\nTo update using the Microsoft Azure portal:\n1. Log in as a Conditional Access Administrator, Security Administrator, or Global Administrator to the Microsoft Azure portal at https://portal.azure.com \n2. Navigate to **Azure Active Directory -> Security -> Conditional Access**.\n3. Select **New Policy** with these conditions:\n   * Grant: Grant access (Require multi-factor authentication)\n   * Users: All users\n   * Cloud apps or actions: All cloud apps \n5. Make sure that the policy is enabled. You can also set **Enable policy** to **Report-only**. After confirming your settings using report-only mode, an administrator can switch the **Enable policy** toggle from **Report-only** to **On**.\n"
  - uid: mondoo-azure-security-ensure-multifactor-authentication-is-enabled-for-all-users-in-administrative-roles
    title: Ensure all users in administrative roles have MFA enabled
    impact: 100
    mql: |
      microsoft.security.latestSecureScores.controlScores.one( _['controlName'] == 'AdminMFAV2' && _['score'] == 10 )
    docs:
      desc: |
        Enable multi-factor authentication for all users in administrative roles!
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        Run the following query:

          ```bash
          cnspec run azure -c "microsoft.security.latestSecureScores.controlScores.one( _['controlName'] == 'AdminMFAV2' && _['score'] == 10)" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        2. Run the following query:

          ```mql
          microsoft.security.latestSecureScores.controlScores.one( _['controlName'] == 'AdminMFAV2' && _['score'] == 10 )
          ```
      remediation: "### Microsoft Azure Portal\n\nTo update using the Microsoft Azure portal:\n1. Log in as a Conditional Access Administrator, Security Administrator, or Global Administrator to the Microsoft Azure portal at https://portal.azure.com \n2. Navigate to Azure Active Directory -> Security -> Conditional Access\n3. Select **New Policy** with following conditions:\n   * Grant: Grant access (Require multi-factor authentication)\n   * Users -> Users and groups -> Include -> Select users and groups -> Directory roles: At minimum select Billing admin, Conditional Access admin, Exchange admin, Global admin, Helpdesk admin, Security admin, SharePoint admin, and User admin.\n   * Cloud apps or actions: All cloud apps \n5. Make sure that the policy is enabled. You can also set **Enable policy** to **Report-only**. After confirming your settings using report-only mode, an administrator can switch the **Enable policy** toggle from **Report-only** to **On**.\n"
  - uid: mondoo-azure-security-ensure-that-between-two-and-four-global-admins-are-designated
    title: Ensure that at least three but not more than four global admins are designated
    impact: 60
    mql: |
      microsoft.rolemanagement.roleDefinitions.where(displayName == "Global Administrator").all(assignments.length > 1 && assignments.length <= 4)
    docs:
      desc: "This check ensures that there are enough Global Admins in a single tenant. \n When designating global admins, it's important to consider the size and complexity of the organization, as well as the level of responsibility and authority required for the role. As a general rule, it's a good idea to have at least three global admins to ensure that there is redundancy and coverage in case one admin is unavailable or leaves the organization.\n\nAt the same time, having too many global admins can lead to confusion and inefficiency, as multiple people may be making decisions or taking actions without proper coordination. Therefore, it's recommended to limit the number of global admins to four, unless the organization is particularly large or complex and requires more administrators to properly manage its operations.\n"
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        Run the following query:

          ```bash
          cnspec run azure -c "microsoft.rolemanagement.roleDefinitions.where(displayName == "Global Administrator").all(assignments.length > 1 && assignments.length <= 4)" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```
        __cnspec shell__

        To audit Microsoft azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        2. Run the following query:

          ```mql
          microsoft.rolemanagement.roleDefinitions.where(displayName == "Global Administrator").all(assignments.length > 1 && assignments.length <= 4)
          ```
      remediation: |
        ### Microsoft Azure Portal

        To update using the Microsoft Azure portal:
         1. Log into the Microsoft Azure portal at https://portal.azure.com as a global administrator.
         2. Navigate to Azure Active Directory
         3. Select **Users -> New user **.
         4. If there are not enough global admins, create one:
            * Select the user name.
            * Under **Roles**, select **Global Administrator ** and then select **Save changes**.
         5. Remove the Global Admin, if there are more than four Global Administrators
            * Select the user name.
            * Under Roles, select **Manage roles** and then deselect Global Administrator.
            * Select **Save changes**.
  - uid: mondoo-azure-security-ensure-security-defaults-is-enabled-on-azure-active-directory
    title: Ensure that the security defaults are disabled
    impact: 80
    mql: |
      microsoft.policies.identitySecurityDefaultsEnforcementPolicy["isEnabled"] == true
    docs:
      desc: "This check ensures that the security defaults (which are enabled by default) are enabled in Azure Active Directory.\n\nThe security defaults help protect user accounts from password spray and phishing attacks by:\n\n* Requiring all users and admins to register for MFA using the Microsoft Authenticator app.\n* Challenging users with MFA when they log in from a new device or app or for critical roles and tasks.\n* Disabling authentication from legacy authentication clients that can't do MFA. \n* Protecting admins by requiring extra authentication every time they log in.\n\nNote: Advanced security configurations require you to disable the security defaults. \n"
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        Run the following query:

          ```bash
          cnspec run azure -c "microsoft.policies.identitySecurityDefaultsEnforcementPolicy["isEnabled"] == false" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        2. Run the following query:

          ```mql
          microsoft.policies.identitySecurityDefaultsEnforcementPolicy["isEnabled"] == false
          ```
      remediation: "### Microsoft Azure Portal\n\nTo update using the Microsoft Azure portal:\n1. Log into the Microsoft Azure portal at https://portal.azure.com \n2. Navigate to **Azure Active Directory -> properties -> Select \"manage security defaults\"**.\n3. Verify the \"Enable security defaults\" toggle is Yes. \n"
  - uid: mondoo-azure-security-enable-azure-ad-identity-protection-sign-in-risk-policies
    title: Enable sign-in risk policy for MFA
    impact: 80
    mql: |
      microsoft.security.latestSecureScores.controlScores.one( _['controlName'] == 'SigninRiskPolicy' && _['score'] == 7 )
    docs:
      desc: |
        This check ensures that there are some policies in place which can detect risky sign-in in real-time and offline. A risky sign-in mainly means a sign-in attempt which might be performed by illegitimate owner of a user account.

        Most users have a normal behavior that can be tracked. When they fall outside of this norm, it could be risky to allow them to successfully sign in. Instead, you may want to block that user, or ask them to perform a multi-factor authentication. If the user successfully completes the MFA challenge, you can consider it a valid sign-in attempt and grant access to the application or service.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        Run the following query:

          ```bash
          cnspec run azure -c "microsoft.security.latestSecureScores.controlScores.one( _['controlName'] == 'SigninRiskPolicy' && _['score'] == 7 )" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```
        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        2. Run the following query:

          ```mql
          microsoft.security.latestSecureScores.controlScores.one( _['controlName'] == 'SigninRiskPolicy' && _['score'] == 7 )
          ```
      remediation: "### Microsoft Azure Portal\n\nTo update using the Microsoft Azure portal:\n1. Log into the Microsoft Azure portal at https://portal.azure.com \n2. Navigate to **Azure Active Directory -> Security -> Identity Protection -> Sign-in risk policy**.\n3. Make sure the policy applies to all users.\n4. Under Conditions, choose **Select conditions -> Select a risk level**, then choose **Medium and above**.\n5. Under Access, choose **Select a control**. Make sure the **Allow access and require multi-factor authentication** option is checked, then choose **Select**.\n6. Set **Enforce Policy** to **On**, then select **Save**.\n"
  - uid: mondoo-azure-security-enable-azure-ad-identity-protection-user-risk-policies
    title: Enable user risk policy for password change
    impact: 100
    mql: |
      microsoft.security.latestSecureScores.controlScores.one( _['controlName'] == 'UserRiskPolicy' && _['score'] == 7 )
    docs:
      desc: |
        This check ensures that there are policies in place that can detect risky sign-in, both in real time and offline. A risky sign-in generally means a sign-in attempt performed by someone other than the account owner.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        Run the following query:

          ```bash
          cnspec run azure -c "microsoft.security.latestSecureScores.controlScores.one( _['controlName'] == 'UserRiskPolicy' && _['score'] == 7 )" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```
        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        2. Run the following query:

          ```mql
          microsoft.security.latestSecureScores.controlScores.one( _['controlName'] == 'UserRiskPolicy' && _['score'] == 7 )
          ```
      remediation: "### Microsoft Azure Portal\n\nTo update using the Microsoft Azure portal:\n1. Log into the Microsoft Azure portal at https://portal.azure.com \n2. Navigate to **Azure Active Directory -> Security -> Identity Protection -> User risk policy**.\n3. Make sure the policy applies to all users.\n4. Under **Conditions**, choose **Select conditions -> Select a risk level**, then choose **Medium and above**.\n5. Under **Access,** select **Access**. Make sure the **Allow access and Require password change** is checked, then choose **Select**.\n6. Set **Enforce Policy** to **On**, then select **Save**.\n"
  - uid: mondoo-azure-security-ensure-os-disk-are-encrypted
    title: Ensure that 'OS' disks are encrypted
    impact: 80
    mql: |
      azure.compute.vms {
        osDisk {
          properties['encryption'] != null
        }
      }
    docs:
      desc: |
        This check ensures that both OS disks (boot volumes) are encrypted. Customer Managed keys can be either ADE or Server Side Encryption(SSE).
      audit: "__cnspec run__\n\nTo audit Microsoft Azure with `cnspec run`:\n\n1. Run `az login` to authenticate with the correct Azure subscription and tenant.\n2. Run the following query:\n\n  ```bash\n  cnspec run azure -c \"azure.compute.vms { osDisk { properties['encryption'] } }\"\n  ```\n\n__cnspec shell__\n\nTo audit Microsoft Azure with `cnspec shell`:\n\n1. Run `az login` to authenticate with the correct Azure subscription and tenant. \n2. Launch `cnspec shell`:\n\n  ```bash\n  cnspec shell azure\n  ```\n\n3. Run the following query:\n\n  ```mql\n  azure.compute.vms { osDisk { properties['encryption'] } }\n  ```\n"
      remediation: "###Terraform\n\n__Encrypt disks Linux VM__\n\n```hcl\n# Encrypt Linux OS disk with Terraform\nresource \"azure_linux_virtual_machine\" \"example\" {\n  name                = \"example-linux-machine\"\n  resource_group_name = azure_resource_group.example.name\n  location            = azure_resource_group.example.location\n  \n  ... \n\n  encryption_at_host_enabled = true\n  \n  ... \n}\n```\n\n__Encrypt disks Windows VM__\n\n```hcl\nresource \"azure_windows_virtual_machine\" \"example\" {\n  name                = \"example-windows-machine\"\n  resource_group_name = azure_resource_group.example.name\n  location            = azure_resource_group.example.location\n  \n  ... \n\n  encryption_at_host_enabled = true\n  \n  ... \n}\n```\n\n__Encrypt disks managed disks__\n\n```hcl\nresource \"azure_managed_disk\" \"example\" {\n  name                 = var.disk_name\n  location             = var.location\n  resource_group_name  = var.resource_group_name\n  ... \n\n  encryption_settings {\n    enabled = true\n  }\n  \n  ... \n}\n```\n\n###Azure Console\n\nTo update via the Azure Console:\n\n1. Log into the Azure Console at https://portal.azure.com/.\n2. Go to **Virtual machines**.\n2. For each virtual machine, go to **Settings**\n3. Select **Disks**.\n4. Select the **X** to detach the disk from the VM.\n5. Search for **Disks** and locate any unattached disk.\n6. Select the disk, then select **Encryption**.\n7. Change your encryption type, then select the encryption set.\n8. Select **Save**.\n9. Go back to the VM and re-attach the disk.\n\n###Azure CLI \n\n```bash\naz vm encryption enable -g <resource_group> --name <vm_name> --disk-encryption-keyvault <keyvault_name>\n```\n"
    refs:
      - url: https://learn.microsoft.com/en-us/azure/virtual-machines/disk-encryption-overview
        title: Overview of managed disk encryption options
  - uid: mondoo-azure-security-ssh-access-restricted-from-internet
    title: Ensure that SSH access is restricted from the internet
    impact: 80
    mql: "azure.network.securityGroups { \n  securityRules.where( properties['access'] == 'Allow' && properties['direction'] == 'Inbound' && properties['protocol'] == /TCP|\\*/ && properties['sourceAddressPrefix'] == /\\*|0\\.0\\.0\\.0|<nw>\\/0|\\/0|internet|any/ )\n  } { \n    securityRules {\n      properties[\"destinationPortRange\"] != \"*\"\n      properties[\"destinationPortRange\"] != 22\n      if (properties[\"destinationPortRange\"].split(\"-\").length > 1) {\n        a = properties[\"destinationPortRange\"].split(\"-\")[0] < 22 && properties[\"destinationPortRange\"].split(\"-\")[1] < 22\n        b = properties[\"destinationPortRange\"].split(\"-\")[0] > 22 && properties[\"destinationPortRange\"].split(\"-\")[1] > 22\n        a || b\n      }\n      properties[\"destinationPortRanges\"].all( _ != 22 )\n  }\n}\n"
    docs:
      desc: "This check ensures whether SSH on port 22 is not configured to allow access from anywhere with the CIDR block \"0.0.0.0\". \n"
      audit: "__cnspec run__\n\nTo audit Microsoft Azure with `cnspec run`:\n\n1. Run `az login` to authenticate with the correct Azure subscription and tenant.\n2. Run the following query:\n\n  ```bash\n  cnspec run azure -c \"azure.network.securityGroups { securityRules }\"\n  ```\n\n__cnspec shell__\n\nTo audit Microsoft Azure with `cnspec shell`:\n\n1. Run `az login` to authenticate with the correct Azure subscription and tenant. \n2. Launch `cnspec shell`:\n\n  ```bash\n  cnspec shell azure\n  ```\n\n3. Run the following query:\n\n  ```mql\n  azure.network.securityGroups { securityRules }\n  ```\n"
      remediation: |
        ###Terraform

        ```hcl
        # Ensure the `source_address_prefix` is configured to a restrictive CIDR address

        resource "azure_network_security_group" "my_terraform_nsg" {
          name                = "myNetworkSecurityGroup"
          location            = azure_resource_group.rg.location
          resource_group_name = azure_resource_group.rg.name

          security_rule {
            name                       = "SSH"
            priority                   = 1001
            direction                  = "Inbound"
            access                     = "Allow"
            protocol                   = "Tcp"
            source_port_range          = "*"
            destination_port_range     = "22"
            source_address_prefix      = "192.168.22.5/24"
            destination_address_prefix = "*"
          }
        }
        ```
  - uid: mondoo-azure-security-rdp-access-restricted-from-internet
    title: Ensure that RDP access is restricted from the internet
    impact: 80
    mql: "azure.network.securityGroups { \n  securityRules.where( properties['access'] == 'Allow' && properties['direction'] == 'Inbound' && properties['protocol'] == /TCP|\\*/ && properties['sourceAddressPrefix'] == /\\*|0\\.0\\.0\\.0|<nw>\\/0|\\/0|internet|any/ )\n  } { \n    securityRules {\n      properties[\"destinationPortRange\"] != \"*\"\n      properties[\"destinationPortRange\"] != 3389\n      if (properties[\"destinationPortRange\"].split(\"-\").length > 1) {\n        a = properties[\"destinationPortRange\"].split(\"-\")[0] < 3389 && properties[\"destinationPortRange\"].split(\"-\")[1] < 3389\n        b = properties[\"destinationPortRange\"].split(\"-\")[0] > 3389 && properties[\"destinationPortRange\"].split(\"-\")[1] > 3389\n        a || b\n      }\n      properties[\"destinationPortRanges\"].all( _ != 3389 )\n  }\n}\n"
    docs:
      desc: "This check ensures whether RDP on port 3389 is not configured to allow access from anywhere with the CIDR block \"0.0.0.0\". \n"
      audit: "__cnspec run__\n\nTo audit Microsoft Azure with `cnspec run`:\n\n1. Run `az login` to authenticate with the correct Azure subscription and tenant.\n2. Run the following query:\n\n  ```bash\n  cnspec run azure -c \"azure.network.securityGroups { securityRules }\"\n  ```\n\n__cnspec shell__\n\nTo audit Microsoft Azure with `cnspec shell`:\n\n1. Run `az login` to authenticate with the correct Azure subscription and tenant. \n2. Launch `cnspec shell`:\n\n  ```bash\n  cnspec shell azure\n  ```\n\n3. Run the following query:\n\n  ```mql\n  azure.network.securityGroups { securityRules }\n  ```\n"
      remediation: |
        ###Terraform

        ```hcl
        # Ensure the `source_address_prefix` is configured to a restrictive CIDR address

        resource "azure_network_security_group" "example" {
          name                = "example-rdp-security"
          location            = azure_resource_group.rg.location
          resource_group_name = azure_resource_group.rg.name

          security_rule {
            name                       = "RDP"
            priority                   = 1001
            direction                  = "Inbound"
            access                     = "Allow"
            protocol                   = "Tcp"
            source_port_range          = "*"
            destination_port_range     = "3389"
            source_address_prefix      = "192.168.22.5/24"
            destination_address_prefix = "*"
          }
        }
        ```
  - uid: mondoo-azure-security-secure-transfer-required-enabled
    title: Ensure that 'Secure transfer required' is set to 'Enabled'
    impact: 80
    mql: |
      azure.storage.accounts {
        properties['supportsHttpsTrafficOnly'] == true || properties['enableHttpsTrafficOnly'] == true
      }
    docs:
      desc: |
        This check ensures that data encryption in transit is enabled.
      audit: "__cnspec run__\n\nTo audit Microsoft Azure with `cnspec run`:\n\n1. Run `az login` to authenticate with the correct Azure subscription and tenant.\n2. Run the following query:\n\n  ```bash\n  cnspec run azure -c \"azure.storage.accounts { properties['supportsHttpsTrafficOnly'] }\"\n  ```\n\n__cnspec shell__\n\nTo audit Microsoft Azure with `cnspec shell`:\n\n1. Run `az login` to authenticate with the correct Azure subscription and tenant. \n2. Launch `cnspec shell`:\n\n  ```bash\n  cnspec shell azure\n  ```\n\n3. Run the following query:\n\n  ```mql\n  azure.storage.accounts { properties['supportsHttpsTrafficOnly'] }\n  ```\n"
      remediation: "###Terraform\n\n```hcl\nresource \"azure_storage_account\" \"example_storage_account\" {\n  ...\n  enable_https_traffic_only = true\n}\n```    \n"
  - uid: mondoo-azure-security-public-access-level-private-blob-containers
    title: Ensure that 'Public access level' is set to Private for blob containers
    impact: 80
    mql: |
      azure.storage.accounts.all( properties["allowBlobPublicAccess"] == "false" ) || azure.storage.accounts.all ( containers { properties["publicAccess"] == "None" } )
    docs:
      desc: |
        This check ensures that anonymous access to blob containers is disabled, and public access on storage accounts is disabled.
      audit: "__cnspec run__\n\nTo audit Microsoft Azure with `cnspec run`:\n\n1. Run `az login` to authenticate with the correct Azure subscription and tenant.\n2. Run the following query:\n\n  ```bash\n  cnspec run azure -c \"azure.storage.accounts { containers { properties['publicAccess'] == \"None\" } }\"\n  ```\n\n__cnspec shell__\n\nTo audit Microsoft Azure with `cnspec shell`:\n\n1. Run `az login` to authenticate with the correct Azure subscription and tenant. \n2. Launch `cnspec shell`:\n\n  ```bash\n  cnspec shell azure\n  ```\n\n3. Run the following query:\n\n  ```mql\n  azure.storage.accounts { containers { properties['publicAccess'] == \"None\" } }\n  ```\n"
      remediation: "###Terraform\n\n```hcl\nresource \"azure_storage_container\" \"example_storage_container\" {\n    ...\n  container_access_type = \"private\"\n}\n```\n\n###Azure Portal \n\n1. Log into the Azure Portal at https://portal.azure.com.\n2. Navigate to **Storage Accounts**.\n3. Navigate to **BLOB SERVICE**.\n4. Select **Containers**.\n5. Select a container and select **Access policy**. \n6. Set **Public Access Level** to **Private**. \n7. Repeat For each Container. \n\nRepeat steps 3-7 for each storage account. \n\n###Azure CLI\n\n```bash\naz storage container set-permission \n--name <container_name> \n--public-access off \n--account-name <account_name> \n--account-key <account_key>\n```\n"
  - uid: mondoo-azure-security-default-network-access-rule-storage-accounts-deny
    title: Ensure the default network access rule for Storage Accounts is set to deny
    impact: 80
    mql: |
      azure.storage.accounts.all( properties["networkAcls"]["defaultAction"] == "Deny" )
    docs:
      desc: "This check ensures that access to the default network for storage accounts is set to deny. \n"
      audit: "__cnspec run__\n\nTo audit Microsoft Azure with `cnspec run`:\n\n1. Run `az login` to authenticate with the correct Azure subscription and tenant.\n2. Run the following query:\n\n  ```bash\n  cnspec run azure -c \"azure.storage.accounts { containers { properties['publicAccess'] == \"None\" } }\"\n  ```\n\n__cnspec shell__\n\nTo audit Microsoft Azure with `cnspec shell`:\n\n1. Run `az login` to authenticate with the correct Azure subscription and tenant. \n2. Launch `cnspec shell`:\n\n  ```bash\n  cnspec shell azure\n  ```\n\n3. Run the following query:\n\n  ```mql\n  azure.storage.accounts { containers { properties['publicAccess'] == \"None\" } }\n  ```\n"
      remediation: "###Terraform\n\n```hcl\n# Ensure the `default_action` is set to `Deny`\n\nresource \"azure_storage_account_network_rules\" \"example_storage_account\" {\n  resource_group_name  = azure_resource_group.example.name\n  storage_account_name = azure_storage_account.example.name\n\n  default_action       = \"Deny\"\n}\n```\n\n```hcl\nresource \"azure_storage_account\" \"example_storage_account\" {\n  name                = \"example_storage_account\"\n  resource_group_name = azure_resource_group.example.name\n  location            = azure_resource_group.example.location\n\n  network_rules {\n    default_action = \"Deny\"\n  }\n\n  ... \n}\n```      \n"
  - uid: mondoo-azure-security-trusted-microsoft-services-enabled-for-storage-account-access
    title: Ensure 'Trusted Microsoft Services' is enabled for Storage Account access
    impact: 80
    mql: |
      azure.storage.accounts.all ( properties['networkAcls']['bypass'] == "AzureServices")
    docs:
      desc: |
        This check ensures that 'Trusted Microsoft Services' is enabled for Storage Account access.
      audit: "__cnspec run__\n\nTo audit Microsoft Azure with `cnspec run`:\n\n1. Run `az login` to authenticate with the correct Azure subscription and tenant.\n2. Run the following query:\n\n  ```bash\n  cnspec run azure -c \"azure.storage.accounts.all ( properties['networkAcls']['bypass'] == \"AzureServices\")\"\n  ```\n\n__cnspec shell__\n\nTo audit Microsoft Azure with `cnspec shell`:\n\n1. Run `az login` to authenticate with the correct Azure subscription and tenant. \n2. Launch `cnspec shell`:\n\n  ```bash\n  cnspec shell azure\n  ```\n\n3. Run the following query:\n\n  ```mql\n  azure.storage.accounts.all ( properties['networkAcls']['bypass'] == \"AzureServices\")\n  ```\n"
      remediation: "###Terraform\n\n```hcl\nresource \"azure_storage_account\" \"example\" {\n    ...\n  network_rules {\n    ...\n    bypass = [\"AzureServices\"]\n    ...\n  }\n}\n``` \n"
  - uid: mondoo-azure-security-ensure-auditing-on
    title: Ensure that 'Auditing' is set to 'On' for SQL Server
    impact: 80
    mql: |
      azure.sql.servers {
        auditingPolicy['state'] == "Enabled"
      }
    docs:
      desc: |
        This check ensures that 'Auditing' is set to 'On' for SQL Server.
      audit: "__cnspec run__\n\nTo audit Microsoft Azure with `cnspec run`:\n\n1. Run `az login` to authenticate with the correct Azure subscription and tenant.\n2. Run the following query:\n\n  ```bash\n  cnspec run azure -c \"azure.sql.servers { auditingPolicy['state'] }\"\n  ```\n\n__cnspec shell__\n\nTo audit Microsoft Azure with `cnspec shell`:\n\n1. Run `az login` to authenticate with the correct Azure subscription and tenant. \n2. Launch `cnspec shell`:\n\n  ```bash\n  cnspec shell azure\n  ```\n\n3. Run the following query:\n\n  ```mql\n  azure.sql.servers { auditingPolicy['state'] }\n  ```\n"
      remediation: "###Terraform\n\n```hcl\nresource \"azure_sql_server\" \"example_sql_server\" {\n  ...\n\n  extended_auditing_policy {\n    storage_endpoint                        = azure_storage_account.example.primary_blob_endpoint\n    storage_account_access_key              = azure_storage_account.example.primary_access_key\n    storage_account_access_key_is_secondary = true\n    retention_in_days                       = 90\n  }\n}\n``` \n"
  - uid: mondoo-azure-security-ensure-auditing-retention-greater-than-30-days
    title: Ensure that 'Auditing' Retention is 'greater than 30 days'
    impact: 80
    mql: |
      azure.sql.servers {
        auditingPolicy['retentionDays'] >= 30
      }
    docs:
      desc: |
        This check ensures that 'Auditing' Retention is 'greater than or equal to 30 days'
      audit: "__cnspec run__\n\nTo audit Microsoft Azure with `cnspec run`:\n\n1. Run `az login` to authenticate with the correct Azure subscription and tenant.\n2. Run the following query:\n\n  ```bash\n  cnspec run azure -c \"azure.sql.servers { auditingPolicy['retentionDays'] }\"\n  ```\n\n__cnspec shell__\n\nTo audit Microsoft Azure with `cnspec shell`:\n\n1. Run `az login` to authenticate with the correct Azure subscription and tenant. \n2. Launch `cnspec shell`:\n\n  ```bash\n  cnspec shell azure\n  ```\n\n3. Run the following query:\n\n  ```mql\n  azure.sql.servers { auditingPolicy['retentionDays'] }\n  ```\n"
      remediation: "###Terraform\n\n```hcl\nresource \"azure_sql_server\" \"example\" {\n  ...\n  extended_auditing_policy {\n    storage_endpoint           = azure_storage_account.example.primary_blob_endpoint\n    storage_account_access_key = azure_storage_account.example.primary_access_key\n    storage_account_access_key_is_secondary = true\n    retention_in_days                       = 30\n  }\n}\n```     \n"
  - uid: mondoo-azure-security-no-sql-databases-allow-ingress-0-0-0-0-0
    title: Ensure no SQL Databases allow ingress 0.0.0.0/0 (ANY IP)
    impact: 80
    mql: |
      azure.sql.servers {
        firewallRules.length >= 1
        firewallRules {
          startIpAddress != '0.0.0.0'
        }
      }
      azure.postgresql.servers {
        firewallRules.length >= 1
        firewallRules {
          startIpAddress != '0.0.0.0'
        }
      }
      azure.mysql.servers {
        firewallRules.length >= 1
        firewallRules {
          startIpAddress != '0.0.0.0'
        }
      }
      azure.mariadb.servers {
        firewallRules.length >= 1
        firewallRules {
          startIpAddress != '0.0.0.0'
        }
      }
    docs:
      desc: "This check ensures that no SQL databases allow ingress connections from \"0.0.0.0\". \n"
      audit: "__cnspec run__\n\nTo audit Microsoft Azure with `cnspec run`:\n\n1. Run `az login` to authenticate with the correct Azure subscription and tenant.\n2. Run the following query:\n\n  ```bash\n  cnspec run azure -c \"azure.sql.servers { firewallRules { startIpAddress } }\"\n  cnspec run azure -c \"azure.postgresql.servers { firewallRules { startIpAddress } }\"\n  cnspec run azure -c \"azure.mariadb.servers { firewallRules { startIpAddress } }\"\n  cnspec run azure -c \"azure.mysql.servers { firewallRules { startIpAddress } }\"\n  ```\n\n__cnspec shell__\n\nTo audit Microsoft Azure with `cnspec shell`:\n\n1. Run `az login` to authenticate with the correct Azure subscription and tenant. \n2. Launch `cnspec shell`:\n\n  ```bash\n  cnspec shell azure\n  ```\n\n3. Run the following query:\n\n  ```mql\n  azure.sql.servers { firewallRules { startIpAddress } }\n  azure.postgresql.servers { firewallRules { startIpAddress } }\n  azure.mariadb.servers { firewallRules { startIpAddress } } \n  azure.mysql.servers { firewallRules { startIpAddress } } \n  ```\n"
      remediation: "###Terraform\n\n__mySQL__\n\n```hcl\n# Ensure `start_ip_address` is not configured to `0.0.0.0`\n\nresource \"azure_mysql_firewall_rule\" \"example\" {\n  ...\n  start_ip_address    = \"192.168.2.22\"\n  end_ip_address      = \"255.255.255.255\"\n}\n``` \n\n__MariaDB__\n\n```hcl\n# Ensure `start_ip_address` is not configured to `0.0.0.0`\n\nresource \"azure_mariadb_firewall_rule\" \"example\" {\n  ...\n  start_ip_address    = \"192.168.2.22\"\n  end_ip_address      = \"255.255.255.255\"\n}\n``` \n\n__SQL__\n\n```hcl\n# Ensure `start_ip_address` is not configured to `0.0.0.0`\n\nresource \"azure_sql_firewall_rule\" \"example\" {\n  ...\n  start_ip_address    = \"192.168.2.22\"\n  end_ip_address      = \"255.255.255.255\"\n}\n```\n\n__Postgres__\n\n```hcl\n# Ensure `start_ip_address` is not configured to `0.0.0.0`\n\nresource \"azure_postgresql_firewall_rule\" \"example\" {\n  ...\n  start_ip_address    = \"192.168.2.22\"\n  end_ip_address      = \"255.255.255.255\"\n}\n``` \n"
  - uid: mondoo-azure-security-ensure-register-with-ad-is-enabled-on-app-service
    title: Ensure that App Services can authenticate with Active Directory
    impact: 80
    mql: "azure.web.apps { \n  identity[\"type\"] == \"SystemAssigned\" || identity[\"principalId\"] != null\n}\n"
    docs:
      desc: "This check ensures that the App services be able to authenticate through Azure AD. \n\nIn this way, the secrets will be removed from the app itself, and instead the app will connect to other Azure services securely without the need for usernames and passwords.\n"
      audit: "__cnspec run__\n\nTo audit Microsoft Azure with `cnspec run`:\n\nNote: It is also possible to use a client secret for app connection instead of a certificate. \n\nRun the following query:\n\n  ```bash\n  cnspec run azure -c \"azure.web.apps { identity[\"type\"] == \"SystemAssigned\" || identity[\"principalId\"] != null }\" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>\n  ```\n\n__cnspec shell__\n\nTo audit Microsoft Azure with `cnspec shell`:\n\n1. Launch `cnspec shell`:\n\n  ```bash\n  cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>\n  ```\n\n2. Run the following query:\n\n  ```mql\n  azure.web.apps { identity[\"type\"] == \"SystemAssigned\" || identity[\"principalId\"] != null }\n  ```\n"
      remediation: "### Microsoft Azure Portal\n\nTo update using the Microsoft Azure portal:\n1. Log in to the Microsoft Azure portal at https://portal.azure.com \n2. Navigate to **App Services**.\n3. Select each App, under \"setting\" select on \"identity\"\n4. Under the \"System assigned\" pane, set \"Status\" to \"On\" \n"
  - uid: mondoo-azure-security-ensure-web-app-is-using-the-latest-tls
    title: Ensure that Web Apps use the latest available version of TLS encryption
    impact: 80
    mql: "azure.web.apps { \n  configuration.properties[\"minTlsVersion\"] == \"1.2\"\n}\n"
    docs:
      desc: |
        It is highly recommended to use the latest TLS version available with Azure App Services for all secure Web App connections. Currently Azure App Services supports TLS 1.2.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        Note: It is also possible to use a client secret for app connection instead of a certificate.

        Run the following query:

          ```bash
          cnspec run azure -c "azure.web.apps { configuration.properties["minTlsVersion"] == "1.2" }" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        2. Run the following query:

          ```mql
          azure.web.apps { configuration.properties["minTlsVersion"] == "1.2" }
          ```
      remediation: "### Microsoft Azure Portal\n\nTo update using the Microsoft Azure portal:\n1. Log in to the Microsoft Azure portal at https://portal.azure.com \n2. Navigate to **App Services**.\n3. Select each App, under \"setting\" select on \"TLS/SSL settings\"\n4. Under the \"Bindings\" pane, ensure that \"Minimum TLS Version\" set to \"1.2\" under \"Protocol Settings\". \n"
  - uid: mondoo-azure-security-ensure-the-expiration-date-is-set-for-all-keys-and-secrets-in-kv
    title: Ensure that the expiration date is set for all keys and secrets in key vaults
    impact: 80
    mql: "azure.keyvault.vaults { \n  keys.all( enabled && expires != null )\n}\nazure.keyvault.vaults { \n  secrets.all( enabled == true && expires != null )\n}\n"
    docs:
      desc: "The expiration time attribute identifies the expiration time which after the key/secret must not be used for a cryptographic operation. \nBy default, keys/secrets never expire. Therefore, it is highly recommended that keys/secrets be rotated in the key vault and set an explicit expiration time.\n"
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        Note: It is also possible to use a client secret for app connection instead of a certificate.

        Run the following query:

          ```bash
          cnspec run azure -c "azure.keyvault.vaults { keys.all( enabled && expires != null ) }" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          cnspec run azure -c "azure.keyvault.vaults { secrets.all( enabled == true && expires != null ) }" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        2. Run the following query:

          ```mql
          azure.keyvault.vaults { keys.all( enabled && expires != null ) }
          azure.keyvault.vaults { secrets.all( enabled == true && expires != null ) }
          ```
      remediation: "### Microsoft Azure Portal\n\nTo update using the Microsoft Azure portal:\n1. Log in to the Microsoft Azure portal at https://portal.azure.com \n2. Navigate to **Key vaults**.\n3. For each Key Vault, select \"Keys\" or \"Secrets\"\n4. Make sure that each key/secret in the KV has \"EXPIRATION DATE\" set as appropriate\n"
  - uid: mondoo-azure-security-ensure-the-kv-is-recoverable
    title: Ensure it is possible to recover key vaults
    impact: 80
    mql: "azure.keyvault.vaults { \n  properties[\"enablePurgeProtection\"] == \"true\" \n  properties[\"enableSoftDelete\"] == \"true\"\n}\n"
    docs:
      desc: "Azure Key Vault can store keys, secrets, and certificates. Accidental unavailability of a Key Vault can cause serious problems in any organization.\n\nSoft Delete is a feature of Key Vault that retains Key Vaults and Key Vault items after initial deletion. By default, new Key Vaults created through the portal will have soft delete for 90 days configured.\nOnce enabled, soft delete can not be disabled. When soft delete is enabled, it is possible to purge soft deleted vaults and vault items.\n\nPurge protection is another feature of Key Vaults that is used to protect deleted Key Vaults for a certain period, called the \"retention period.\" Once enabled, purge protection prevents deleted key vaults from being purged until the retention period has been reached. This selection cannot be changed once the Key Vault is created. \nIf a Key Vault is created with purge protection, you can still delete it, but you will not be able to purge it once it is deleted. In this case, the deleted Key Vaults will have to wait for 90 days to pass to be permanently purged.\n"
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        Note: It is also possible to use a client secret for app connection instead of a certificate.

        Run the following query:

          ```bash
          cnspec run azure -c "azure.keyvault.vaults { properties["enablePurgeProtection"] == "true" properties["enableSoftDelete"] == "true" }" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        2. Run the following query:

          ```mql
          azure.keyvault.vaults { properties["enablePurgeProtection"] == "true" properties["enableSoftDelete"] == "true" }
          ```
      remediation: "### Microsoft Azure Portal\n\nTo update using the Microsoft Azure portal:\n1. Log in to the Microsoft Azure portal at https://portal.azure.com \n2. Navigate to **Key vaults**.\n3. Select \"Properties\" and ensure Soft delete has been enabled on this key vault\n4. At the bottom of the page, select \"Enable Purge Protection\"\n"
  - uid: mondoo-azure-security-ensure-logging-enabled-kv
    title: Ensure all operations on Key Vault is logged
    impact: 80
    mql: "azure.keyvault.vaults { \n  diagnosticSettings.any( properties[\"logs\"].where( _[\"category\"] == \"AuditEvent\" && _[\"retentionPolicy\"][\"days\"] >= 180 )  )\n}\n"
    docs:
      desc: |
        Monitoring how, by whom and when kv are accessed, enables an audit trail of interactions with confidential information, keys, secrets and certificates.

        Enabling logging for Key Vault saves information in an Azure storage account which the user provides. This will create a new container called insights-logs-auditevent for the specified storage account.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        Note: It is also possible to use a client secret for app connection instead of a certificate.

        Run the following query:

          ```bash
          cnspec run azure -c "azure.keyvault.vaults { diagnosticSettings.any( properties["logs"].where( _["category"] == "AuditEvent" && _["retentionPolicy"]["days"] >= 180 )  ) }" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        2. Run the following query:

          ```mql
          azure.keyvault.vaults { diagnosticSettings.any( properties["logs"].where( _["category"] == "AuditEvent" && _["retentionPolicy"]["days"] >= 180 )  ) }
          ```
      remediation: |
        ### Microsoft Azure Portal

        To update using the Microsoft Azure portal:
        1. Log in to the Microsoft Azure portal at https://portal.azure.com
        2. Navigate to **Key vaults**.
        3. Select "Properties" and ensure Soft delete has been enabled on this key vault
        4. At the bottom of the page, select "Enable Purge Protection"
  - uid: mondoo-azure-security-ensure-activity-log-alert-exists-for-create-update-delete-network-security-group
    title: Ensure that activity log alerts exist for the commands Create, Update, and Delete Network Security Group
    impact: 80
    mql: |
      azure.monitor.activityLog.alerts.where( actions.length > 0 ).any( conditions.any( _["equals"] == "Microsoft.Network/networkSecurityGroups/write" && _["fieldName"] == "operationName" ) )
      azure.monitor.activityLog.alerts.where( actions.length > 0 ).any( conditions.any( _["equals"] == "Microsoft.Network/networkSecurityGroups/delete" && _["fieldName"] == "operationName" ) )
    docs:
      desc: |
        Monitoring Network Security Group events can give clear insight into network access changes and it is very useful for detecting suspicious activity.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        Note: It is also possible to use a client secret for app connection instead of a certificate.

        Run the following query:

          ```bash
          cnspec run azure -c "azure.monitor.activityLog.alerts.where( actions.length > 0 ).any( conditions.any( _["equals"] == "Microsoft.Network/networkSecurityGroups/write" && _["fieldName"] == "operationName" ) )" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          cnspec run azure -c "azure.monitor.activityLog.alerts.where( actions.length > 0 ).any( conditions.any( _["equals"] == "Microsoft.Network/networkSecurityGroups/delete" && _["fieldName"] == "operationName" ) )" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        2. Run the following query:

          ```mql
          azure.monitor.activityLog.alerts.where( actions.length > 0 ).any( conditions.any( _["equals"] == "Microsoft.Network/networkSecurityGroups/write" && _["fieldName"] == "operationName" ) )
          azure.monitor.activityLog.alerts.where( actions.length > 0 ).any( conditions.any( _["equals"] == "Microsoft.Network/networkSecurityGroups/delete" && _["fieldName"] == "operationName" ) )
          ```
      remediation: "### Microsoft Azure Portal\n\nTo update using the Microsoft Azure portal:\n1. Log in to the Microsoft Azure portal at https://portal.azure.com \n2. Navigate to the \"Monitor\" blade\n  1. Select \"Alerts\"\n  2. Select \"Create\" and then \"Alert rule\" \n  3. Under the Scope tab, select \"Select scope\"\n  4. In the \"Select a resource\" window, select the appropriate filters:\n    - Filter by subscription: \"< choose the subscription alerts are needed for >\"\"\n    - Filter by resource location: **\"Network security groups\"**\n    - Filter by location: \"All\" \n    - Select the \"subscription name\" or \"resource group\" or \"Network security group\" that the Log Alert Rule will be applied to\n  5. Verify that the selection preview shows:\n    - \"All network security groups\" or \"< your network security group >\"\"\n    - \"< Resource Name >\" - The subscription, group, or resource you selected\n  6. Select \"Done\" \n  7. Under the Condition tab, select \"Add Condition\" \n  8. In the \"Select a signal\" window, under the \"Signal Name\" heading, select **`Create or Update Network Security Group (Microsoft.Network/networkSecurityGroups)`**\n  9. Need to repeat the previous step also for **`Delete Network Security Group (Microsoft.Network/networkSecurityGroups)`**\n  10. Under the Actions tab, choose appropriately:\n    - Select action groups - If you have an existing action group to notify the necessary personnel.\n    - Create action group - If you do not have an existing action group or want to create a new one.\n  11. Under the Details tab, fill in:\n    - Resource group - Select the resource group you want the alert rule to reside in.\n    - Alert rule name - Give your alert a recognizable and standardized name.\n    - Alert rule description - (Optional)\n  12. Select `Review + create` then verify the summary details\n  13. Select `Create`\n"
  - uid: mondoo-azure-security-ensure-that-notify-about-alerts-with-high-severity-is-on
    title: Ensure that "Notify about alerts with high severity" is enabled
    impact: 80
    mql: |
      azure.cloudDefender.securityContacts.all( alertNotifications["minimalSeverity"] == "High" && alertNotifications["state"] == "On" )
    docs:
      desc: |
        Enabling security alert emails ensures that security alert emails are received from Microsoft.
        This ensures that Admins are aware of any potential security issues and are able to react quickly.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        Note: It is also possible to use a client secret for app connection instead of a certificate.

        Run the following query:

          ```bash
          cnspec run azure -c "azure.cloudDefender.securityContacts.all( alertNotifications["minimalSeverity"] == "High" && alertNotifications["state"] == "On" )" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        2. Run the following query:

          ```mql
          azure.cloudDefender.securityContacts.all( alertNotifications["minimalSeverity"] == "High" && alertNotifications["state"] == "On" )
          ```
      remediation: "### Microsoft Azure Portal\n\nTo update using the Microsoft Azure portal:\n1. Log in to the Microsoft Azure portal at https://portal.azure.com \n2. Select `Microsoft Defender for Cloud`\n3. Select `Environment Settings` and then select the appropriate Management Group, Subscription, or Workspace\n4. Select on `Email notifications` and ensure that the `Notify about alerts with the following severity (or higher)` setting is checked and set to `High`\n"
  - uid: mondoo-azure-security-ensure-that-ssl-enabled-postgresql
    title: Ensure SSL connection enabled for PostgreSQL Database Server
    impact: 80
    mql: |
      azure.postgresql.servers.all( properties["sslEnforcement"] == "Enabled" )
    docs:
      desc: |
        All communications between the clients and the PostgreSQL server should be through SSL/TLS to add a layer of encryption to prevent any man in the middle attacks.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        Note: It is also possible to use a client secret for app connection instead of a certificate.

        Run the following query:

          ```bash
          cnspec run azure -c "azure.postgresql.servers.all( properties["sslEnforcement"] == "Enabled" )" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        2. Run the following query:

          ```mql
          azure.postgresql.servers.all( properties["sslEnforcement"] == "Enabled" )
          ```
      remediation: "### Microsoft Azure Portal\n\nTo update using the Microsoft Azure portal:\n1. Log in to the Microsoft Azure portal at https://portal.azure.com \n2. Go to Azure Database for `PostgreSQL server`\n3. For each database, click on `Connection security`\n4. In `SSL` settings, click on `ENABLED` to enforce SSL connections\n"
  - uid: mondoo-azure-security-ensure-that-ssl-enabled-latest-version-mariadb
    title: Ensure SSL connection enabled for MariaDB Database Server with the latest version
    impact: 80
    mql: |
      azure.mariaDb.servers.all( properties["sslEnforcement"] == "Enabled" )
      azure.mariaDb.servers.all( properties["minimalTlsVersion"] == "TLS1_2" )
    docs:
      desc: |
        All communications between the clients and the Mariadb server should be through SSL/TLS to add a layer of encryption to prevent any man in the middle attacks.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        Note: It is also possible to use a client secret for app connection instead of a certificate.

        Run the following query:

          ```bash
          cnspec run azure -c "azure.mariaDb.servers.all( properties["sslEnforcement"] == "Enabled" )" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        2. Run the following query:

          ```mql
          azure.mariaDb.servers.all( properties["sslEnforcement"] == "Enabled" )
          ```
      remediation: "### Microsoft Azure Portal\n\nTo update using the Microsoft Azure portal:\n1. Log in to the Microsoft Azure portal at https://portal.azure.com \n2. Go to Azure Database for `MariaDB server`\n3. For each database, click on `Connection security`\n4. In `SSL` settings, click on `ENABLED` to enforce SSL connections\n5. In TLS setting, make the latest version chosen as minimum tls version\n"
  - uid: mondoo-azure-security-ensure-deny-public-access-mariadb
    title: Ensure Public Network access for MariaDB is disabled
    impact: 80
    mql: |
      azure.mariaDb.servers.all( properties["publicNetworkAccess"] == "Disabled" )
    docs:
      desc: |
        All public access to MariaDB should be blocked, and only connections through private endpoints should be allowed to further enhance network security.
      audit: "__cnspec run__\n\nTo audit Microsoft Azure with `cnspec run`:\n\nNote: It is also possible to use a client secret for app connection instead of a certificate. \n\nRun the following query:\n\n  ```bash\n  cnspec run azure -c \"azure.mariaDb.servers.all( properties[\"publicNetworkAccess\"] == \"Disabled\" )\" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>\n  ```\n\n__cnspec shell__\n\nTo audit Microsoft Azure with `cnspec shell`:\n\n1. Launch `cnspec shell`:\n\n  ```bash\n  cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>\n  ```\n\n2. Run the following query:\n\n  ```mql\n  azure.mariaDb.servers.all( properties[\"publicNetworkAccess\"] == \"Disabled\" )\n  ```\n"
      remediation: "### Microsoft Azure Portal\n\nTo update using the Microsoft Azure portal:\n1. Log in to the Microsoft Azure portal at https://portal.azure.com \n2. Go to Azure Database for `MariaDB server`\n3. For each database, click on `Connection security`\n4. In `Deny Public network access` settings, select **Yes**\n"
  - uid: mondoo-azure-security-ensure-that-ssl-enabled-latest-version-mysql
    title: Ensure SSL connection enabled for MySQL Database Server with the latest version
    impact: 80
    mql: |
      azure.mySql.servers.all ( properties["sslEnforcement"] == "Enabled" )
      azure.mySql.servers.all ( properties["minimalTlsVersion"] == "TLS1_2" )
    docs:
      desc: |
        All communications between the clients and the MySQL server should be through SSL/TLS to add a layer of encryption to prevent any man in the middle attacks.
      audit: "__cnspec run__\n\nTo audit Microsoft Azure with `cnspec run`:\n\nNote: It is also possible to use a client secret for app connection instead of a certificate. \n\nRun the following query:\n\n  ```bash\n  cnspec run azure -c \"azure.mySql.servers.all ( properties[\"sslEnforcement\"] == \"Enabled\" )\" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>\n  cnspec run azure -c \"azure.mySql.servers.all ( properties[\"minimalTlsVersion\"] == \"TLS1_2\" )\" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>\n  ```\n\n__cnspec shell__\n\nTo audit Microsoft Azure with `cnspec shell`:\n\n1. Launch `cnspec shell`:\n\n  ```bash\n  cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>\n  ```\n\n2. Run the following query:\n\n  ```mql\n  azure.mySql.servers.all ( properties[\"sslEnforcement\"] == \"Enabled\" )\n  azure.mySql.servers.all ( properties[\"minimalTlsVersion\"] == \"TLS1_2\" )\n  ```\n"
      remediation: "### Microsoft Azure Portal\n\nTo update using the Microsoft Azure portal:\n1. Log in to the Microsoft Azure portal at https://portal.azure.com \n2. Go to Azure Database for `mySQL server`\n3. For each database, select `Connection security`\n4. In `SSL` settings, select `ENABLED` to enforce SSL connections\n5. At end, in TLS setting, choose the latest tls version\n"
  - uid: mondoo-azure-security-ensure-disabled-public-access-sql
    title: Ensure Public Network access for SQL server is disabled or only possible through firewall rules
    impact: 80
    mql: |
      azure.sql.servers.all ( properties["publicNetworkAccess"] == "Disabled" || properties["publicNetworkAccess"] == "Enabled" && firewallRules.length > 0 )
    docs:
      desc: |
        Customers can choose to connect to a database by using one of the following ways:
          * public endpoints (with IP-based server-level firewall rules or with virtual-network firewall rules)
          * private endpoints (by using Azure Private Link)

        When Public network access is set to Disable, only connections from private endpoints are allowed. All connections from public endpoints will be denied.
      audit: "__cnspec run__\n\nTo audit Microsoft Azure with `cnspec run`:\n\nNote: It is also possible to use a client secret for app connection instead of a certificate. \n\nRun the following query:\n\n  ```bash\n  cnspec run azure -c \"azure.sql.servers.all ( properties[\"publicNetworkAccess\"] == \"Disabled\" || properties[\"publicNetworkAccess\"] == \"Enabled\" && firewallRules.length > 0\" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>\n  ```\n\n__cnspec shell__\n\nTo audit Microsoft Azure with `cnspec shell`:\n\n1. Launch `cnspec shell`:\n\n  ```bash\n  cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>\n  ```\n\n2. Run the following query:\n\n  ```mql\n  azure.sql.servers.all ( properties[\"publicNetworkAccess\"] == \"Disabled\" || properties[\"publicNetworkAccess\"] == \"Enabled\" && firewallRules.length > 0 )\n  ```\n"
      remediation: "### Microsoft Azure Portal\n\nTo update using the Microsoft Azure portal:\n1. Log in to the Microsoft Azure portal at https://portal.azure.com \n2. Go to `SQL servers`\n3. For each server, click on `Networking` under Security\n4. In `Public network access` settings, click on Disabled or `Selected networks` with activated Firewall rules or Virtual networks\n"
  - uid: mondoo-azure-security-keyvault-public-access-disabled
    title: Ensure default Public Network access for Key Vault is disabled
    impact: 80
    mql: |
      azure.keyVault.vaults.all ( properties["publicNetworkAccess"] == "Disabled" )
    docs:
      desc: "The default Public Network Access to the Key Vault must be disabled in order to add a layer of security to one of the most important component in the Azure environment.\nBy default, when you create a new key vault, the Azure Key Vault firewall is disabled. All applications and Azure services can access the key vault and send requests to the key vault. This configuration doesn't mean that any user will be able to perform operations on your key vault. The key vault still restricts access to secrets, keys, and certificates stored in key vault by requiring Azure Active Directory authentication and access policy permissions.\n\nTo enhance network security, you can configure your vault to disable public access. This will deny all public configurations and allow only connections through private endpoints. It is also possible to allow public access from specific virtual networks and IP addresses. \n"
      audit: "__cnspec run__\n\nTo audit Microsoft Azure with `cnspec run`:\n\nNote: It is also possible to use a client secret for app connection instead of a certificate. \n\nRun the following query:\n\n  ```bash\n  cnspec run azure -c \"azure.keyVault.vaults.all ( properties[\"publicNetworkAccess\"] == \"Disabled\" )\" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>\n  ```\n\n__cnspec shell__\n\nTo audit Microsoft Azure with `cnspec shell`:\n\n1. Launch `cnspec shell`:\n\n  ```bash\n  cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>\n  ```\n\n2. Run the following query:\n\n  ```mql\n  azure.keyVault.vaults.all ( properties[\"publicNetworkAccess\"] == \"Disabled\" )\n  ```\n"
      remediation: "### Microsoft Azure Portal\n\nTo update using the Microsoft Azure portal:\n1. Log in to the Microsoft Azure portal at https://portal.azure.com \n2. Go to `Key vaults`\n3. For each key vault server, click on `Networking` under Settings\n4. In `Firewalls and virtual networks` settings, click on \"Disable public access\" \n"
  - uid: mondoo-azure-security-sql-server-audit-on
    title: Ensure that all activities on SQL server is audited
    impact: 60
    mql: |
      azure.sql.servers.all( auditingPolicy["state"] == "Enabled" )
    docs:
      desc: |
        Auditing is a very important feature and should be configured for every database or server in your deployment in Azure.
        When server level auditing is enabled, it's enabled for all existing databases and new databases which will be created in future.

        Enable Server audit when you must audit all databases for that logical server, enable database level audit when you want audit different action groups for a specific database or write to different target for a specific database.

        If you are enabling both server and database level audit for a database, then you can choose predicate expression to filter the events to ensure you are not capturing duplicate data.
      audit: "__cnspec run__\n\nTo audit Microsoft Azure with `cnspec run`:\n\nNote: It is also possible to use a client secret for app connection instead of a certificate. \n\nRun the following query:\n\n  ```bash\n  cnspec run azure -c \"azure.sql.servers.all( auditingPolicy[\"state\"] == \"Enabled\" )\" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>\n  ```\n\n__cnspec shell__\n\nTo audit Microsoft Azure with `cnspec shell`:\n\n1. Launch `cnspec shell`:\n\n  ```bash\n  cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>\n  ```\n\n2. Run the following query:\n\n  ```mql\n  azure.sql.servers.all( auditingPolicy[\"state\"] == \"Enabled\" )\n  ```\n"
      remediation: "### Microsoft Azure Portal\n\nTo update using the Microsoft Azure portal:\n1. Log in to the Microsoft Azure portal at https://portal.azure.com \n2. Go to `SQL servers`\n3. For each SQL server Click on `Auditing` and make sure `Enable Azure SQL Auditing` is set to `On`\n"
  - uid: mondoo-azure-security-sql-server-tde-on
    title: Ensure that transparent data encryption is enabled on SQL Server
    impact: 60
    mql: |
      azure.sql.servers { databases.where (name != "master").all( transparentDataEncryption["state"] == "Enabled" ) }
    docs:
      desc: |
        Transparent data encryption (TDE) encrypts SQL Server, Azure SQL Database, and Azure Synapse Analytics data files. This encryption is known as encrypting data at rest.

        TDE does real-time I/O encryption and decryption of data and log files. The encryption uses a database encryption key (DEK). The database boot record stores the key for availability during recovery. The DEK is a symmetric key. It's secured by a certificate that the server's master database stores or by an asymmetric key that an EKM module protects.

        TDE protects data at rest, which is the data and log files. It lets you follow many laws, regulations, and guidelines established in various industries. This ability lets software developers encrypt data by using AES and 3DES encryption algorithms without changing existing applications.

        Note:  TDE is not available for system databases.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        Note: It is also possible to use a client secret for app connection instead of a certificate.

        Run the following query:

          ```bash
          cnspec run azure -c "azure.sql.servers { databases.where (name != "master").all( transparentDataEncryption["state"] == "Enabled" ) }" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        2. Run the following query:

          ```mql
          azure.sql.servers { databases.where (name != "master").all( transparentDataEncryption["state"] == "Enabled" ) }
          ```
      remediation: "### Microsoft Azure Portal\n\nTo update using the Microsoft Azure portal:\n1. Log in to the Microsoft Azure portal at https://portal.azure.com \n2. Go to `SQL servers`\n3. For each DB instance, select `Transparent data encryption` and make sure `Data encryption` is set to `On`\n"
  - uid: mondoo-azure-security-diagnostic-settings-exist
    title: Ensure that Diagnostic Setting exists in our setup
    impact: 80
    mql: |
      azure.monitor.diagnosticSettings.length > 0
    docs:
      desc: "The diagnostic settings is an important piece in the security puzzle, and it is highly recommended by Microsoft in Azure Security Center. \n\nTo understand what exactly the \"diagnostic settings\" is, we need to understand the data source on Monitor component in Azure. \n\nAzure Monitor is based on different Logs and Metrics that we can collect from multiple resources. These data can be analyzed using a set of tools provided in Azure Monitor.\nAzure Resources generate a significant amount of monitoring data which categorized into two mondoo-azure-security-ensure-the-expiration-date-is-set-for-all-keys-and-secrets-in-kv:\n\n * Metrics : Numerical values that describe some aspect of a system at a particular point of time.\n * Logs  :  Provide detailed diagnostic and auditing information for Azure resources.\n\nThe Logs itself can be categorized into two types: \n\n * Resource logs aren't collected until they're routed to a destination.\n * Activity logs exist on their own but can be routed to other locations.\n\nEach Azure resource requires its own diagnostic setting, which defines the following criteria:\n\n * Sources: The type of metric and log data to send to the destinations defined in the setting. The available types vary by resource type.\n * Destinations: One or more destinations to send to.\n\n\nA diagnostic setting basically controls how logs are exported. By default, logs are retained only for 90 days. \nBy having the diagnostic settings, we can export the logs and store them for longer period in order to analyze the activities and find any security related issues.\n"
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        Note: It is also possible to use a client secret for app connection instead of a certificate.

        Run the following query:

          ```bash
          cnspec run azure -c "azure.monitor.diagnosticSettings.length > 0" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        2. Run the following query:

          ```mql
          azure.monitor.diagnosticSettings.length > 0
          ```
      remediation: "### Microsoft Azure Portal\n\nTo update using the Microsoft Azure portal:\n1. Log in to the Microsoft Azure portal at https://portal.azure.com \n2. Go to `Monitor` and select `Activity Logs`\n3. Select a subscription, and make sure there is already a \"diagnostic settings\" for that subscription\n"
  - uid: mondoo-azure-security-diagnostic-settings-essential-categories
    title: Ensure that Diagnostic Setting collects essential security categories
    impact: 80
    mql: |
      azure.monitor.diagnosticSettings.all( properties["logs"].where( _["enabled"] == "true" ).any( _["category"] == "Administrative" ) )
      azure.monitor.diagnosticSettings.all( properties["logs"].where( _["enabled"] == "true" ).any( _["category"] == "Security" ) )
      azure.monitor.diagnosticSettings.all( properties["logs"].where( _["enabled"] == "true" ).any( _["category"] == "Alert" )  )
    docs:
      desc: "\nDiagnostic setting controls how the diagnostic logs are exported and what type of data need to be collected and be exported to the defined destination.\nBy default no log categories are selected when the Diagnostic Setting is created. Capturing the appropriate log categories for the activities performed within your subscriptions provides proper insight into the environment and will help the SOC team in analyzing.\n\nWe recommend at minimum collect following categories:\n\n  * Security\n  * Alert\n  * Administrative \n"
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        Note: It is also possible to use a client secret for app connection instead of a certificate.

        Run the following query:

          ```bash
          cnspec run azure -c "azure.monitor.diagnosticSettings.all( properties["logs"].where( _["enabled"] == "true" ).any( _["category"] == "Administrative" ) )" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          cnspec run azure -c "azure.monitor.diagnosticSettings.all( properties["logs"].where( _["enabled"] == "true" ).any( _["category"] == "Security" ) )" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          cnspec run azure -c "azure.monitor.diagnosticSettings.all( properties["logs"].where( _["enabled"] == "true" ).any( _["category"] == "Alert" )  )" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        2. Run the following query:

          ```mql
          azure.monitor.diagnosticSettings.all( properties["logs"].where( _["enabled"] == "true" ).any( _["category"] == "Administrative" ) )
          azure.monitor.diagnosticSettings.all( properties["logs"].where( _["enabled"] == "true" ).any( _["category"] == "Security" ) )
          azure.monitor.diagnosticSettings.all( properties["logs"].where( _["enabled"] == "true" ).any( _["category"] == "Alert" )  )
          ```
      remediation: "### Microsoft Azure Portal\n\nTo update using the Microsoft Azure portal:\n1. Log in to the Microsoft Azure portal at https://portal.azure.com \n2. Go to `Monitor` and select `Activity Logs`\n3. Select a subscription, and make sure there is already a \"diagnostic settings\" for that subscription\n"
  - uid: mondoo-azure-security-disable-udp-virtualmachines
    title: Ensure direct UDP access to Azure Virtual Machines from the Internet is restricted
    impact: 80
    mql: "azure.network.securityGroups { \n  securityRules.where( properties['access'] == 'Allow' && properties['direction'] == 'Inbound' && properties['protocol'] == /UDP/ && properties['sourceAddressPrefix'] == /\\*|0\\.0\\.0\\.0|<nw>\\/0|\\/0|internet|any/ ) \n  } { \n    securityRules {\n      properties[\"destinationPortRange\"] != \"*\"\n      properties[\"destinationPortRange\"] != \"53\"\n      properties[\"destinationPortRange\"] != \"123\"\n      properties[\"destinationPortRange\"] != \"161\"\n      properties[\"destinationPortRange\"] != \"389\"\n      properties[\"destinationPortRange\"] != \"1900\"\n      if (properties[\"destinationPortRange\"].split(\"-\").length > 1) {\n        a = properties[\"destinationPortRange\"].split(\"-\")[0] < 53 && properties[\"destinationPortRange\"].split(\"-\")[1] < 53\n        b = properties[\"destinationPortRange\"].split(\"-\")[0] > 53 && properties[\"destinationPortRange\"].split(\"-\")[1] > 53\n        a || b\n      }\n      if (properties[\"destinationPortRange\"].split(\"-\").length > 1) {\n        a = properties[\"destinationPortRange\"].split(\"-\")[0] < 123 && properties[\"destinationPortRange\"].split(\"-\")[1] < 123\n        b = properties[\"destinationPortRange\"].split(\"-\")[0] > 123 && properties[\"destinationPortRange\"].split(\"-\")[1] > 123\n        a || b\n      }\n      if (properties[\"destinationPortRange\"].split(\"-\").length > 1) {\n        a = properties[\"destinationPortRange\"].split(\"-\")[0] < 161 && properties[\"destinationPortRange\"].split(\"-\")[1] < 161\n        b = properties[\"destinationPortRange\"].split(\"-\")[0] > 161 && properties[\"destinationPortRange\"].split(\"-\")[1] > 161\n        a || b\n      }\n      if (properties[\"destinationPortRange\"].split(\"-\").length > 1) {\n        a = properties[\"destinationPortRange\"].split(\"-\")[0] < 389 && properties[\"destinationPortRange\"].split(\"-\")[1] < 389\n        b = properties[\"destinationPortRange\"].split(\"-\")[0] > 389 && properties[\"destinationPortRange\"].split(\"-\")[1] > 389\n        a || b\n      }\n      if (properties[\"destinationPortRange\"].split(\"-\").length > 1) {\n        a = properties[\"destinationPortRange\"].split(\"-\")[0] < 1900 && properties[\"destinationPortRange\"].split(\"-\")[1] < 1900\n        b = properties[\"destinationPortRange\"].split(\"-\")[0] > 1900 && properties[\"destinationPortRange\"].split(\"-\")[1] > 1900\n        a || b\n      }\n      properties[\"destinationPortRanges\"].all(_ != 53 )\n      properties[\"destinationPortRanges\"].all(_ != 123 )\n      properties[\"destinationPortRanges\"].all(_ != 161 )\n      properties[\"destinationPortRanges\"].all(_ != 389 )\n      properties[\"destinationPortRanges\"].all(_ != 1900 ) \n  }\n}\n"
    docs:
      desc: "\nThe main security issue with exposing UDP services over the Internet is the broad attack surface that allows attackers to use Reflection Amplification Attack against Virtual Machines.\n\nA reflection attack involves an attacker spoofing a target's IP address and sending a request for information, mainly using UDP. The server then responds by sending an answer. This is called \"reflection\" (using the same protocol in both directions) attack.\nThe main issue is related to the way UDP protocol has been designed. UDP is a connection-less protocol that does not validate source IP addresses. Unless the application layer protocol uses countermeasures, an attacker can easily forge the IP packet datagram to include an arbitrary source IP address.\nWhen many UDP packets have their source IP address forged to the victim IP address, the destination server (or amplifier) responds to the victim (instead of the attacker), creating a reflected denial-of-service (DoS) attack.\n\nAny server having Open UDP ports can be targeted as a reflector. One way of protecting against this attack is to make sure well known UDP port services are not disclosed to the internet. \n\nSome application-layer protocols that rely on the UDP can be seen here:\n\n  * Domain Name System (DNS)\n  * Network Time Protocol (NTP)\n  * Connection-less Lightweight Directory Access Protocol (CLDAP)\n  * Character Generator Protocol (CharGEN)\n  * Simple Service Discovery Protocol (SSDP)\n  * BitTorrent\n  * Simple Network Management Protocol version 2 (SNMPv2)\n  * Portmap/Remote Procedure Call (RPC)\n  * Network Basic Input/Output System (NetBIOS)\n  * Trivial File Transfer Protocol (TFTP)\n"
      audit: "__cnspec run__\n\nTo audit Microsoft Azure with `cnspec run`:\n\nNote: It is also possible to use a client secret for app connection instead of a certificate.\n\nRun the following query:\n\n  ```bash\n  cnspec run azure -c \"azure.network.securityGroups { \n  securityRules.where( properties['access'] == 'Allow' && properties['direction'] == 'Inbound' && properties['protocol'] == /UDP/ && properties['sourceAddressPrefix'] == /\\*|0\\.0\\.0\\.0|<nw>\\/0|\\/0|internet|any/ ) \n  } { \n    securityRules {\n      properties[\"destinationPortRange\"] != \"*\"\n      properties[\"destinationPortRange\"] != \"53\"\n      properties[\"destinationPortRange\"] != \"123\"\n      properties[\"destinationPortRange\"] != \"161\"\n      properties[\"destinationPortRange\"] != \"389\"\n      properties[\"destinationPortRange\"] != \"1900\"\n      if (properties[\"destinationPortRange\"].split(\"-\").length > 1) {\n        a = properties[\"destinationPortRange\"].split(\"-\")[0] < 53 && properties[\"destinationPortRange\"].split(\"-\")[1] < 53\n        b = properties[\"destinationPortRange\"].split(\"-\")[0] > 53 && properties[\"destinationPortRange\"].split(\"-\")[1] > 53\n        a || b\n      }\n      if (properties[\"destinationPortRange\"].split(\"-\").length > 1) {\n        a = properties[\"destinationPortRange\"].split(\"-\")[0] < 123 && properties[\"destinationPortRange\"].split(\"-\")[1] < 123\n        b = properties[\"destinationPortRange\"].split(\"-\")[0] > 123 && properties[\"destinationPortRange\"].split(\"-\")[1] > 123\n        a || b\n      }\n      if (properties[\"destinationPortRange\"].split(\"-\").length > 1) {\n        a = properties[\"destinationPortRange\"].split(\"-\")[0] < 161 && properties[\"destinationPortRange\"].split(\"-\")[1] < 161\n        b = properties[\"destinationPortRange\"].split(\"-\")[0] > 161 && properties[\"destinationPortRange\"].split(\"-\")[1] > 161\n        a || b\n      }\n      if (properties[\"destinationPortRange\"].split(\"-\").length > 1) {\n        a = properties[\"destinationPortRange\"].split(\"-\")[0] < 389 && properties[\"destinationPortRange\"].split(\"-\")[1] < 389\n        b = properties[\"destinationPortRange\"].split(\"-\")[0] > 389 && properties[\"destinationPortRange\"].split(\"-\")[1] > 389\n        a || b\n      }\n      if (properties[\"destinationPortRange\"].split(\"-\").length > 1) {\n        a = properties[\"destinationPortRange\"].split(\"-\")[0] < 1900 && properties[\"destinationPortRange\"].split(\"-\")[1] < 1900\n        b = properties[\"destinationPortRange\"].split(\"-\")[0] > 1900 && properties[\"destinationPortRange\"].split(\"-\")[1] > 1900\n        a || b\n      }\n      properties[\"destinationPortRanges\"].all(_ != 53 )\n      properties[\"destinationPortRanges\"].all(_ != 123 )\n      properties[\"destinationPortRanges\"].all(_ != 161 )\n      properties[\"destinationPortRanges\"].all(_ != 389 )\n      properties[\"destinationPortRanges\"].all(_ != 1900 ) \n  }\n}\" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>\n  ```\n\n__cnspec shell__\n\nTo audit Microsoft Azure with `cnspec shell`:\n\n1. Launch `cnspec shell`:\n\n  ```bash\n  cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>\n  ```\n\n2. Run the following query:\n\n  ```mql\n  azure.network.securityGroups { \n    securityRules.where( properties['access'] == 'Allow' && properties['direction'] == 'Inbound' && properties['protocol'] == /UDP/ && properties['sourceAddressPrefix'] == /\\*|0\\.0\\.0\\.0|<nw>\\/0|\\/0|internet|any/ ) \n    } { \n      securityRules {\n        properties[\"destinationPortRange\"] != \"*\"\n        properties[\"destinationPortRange\"] != \"53\"\n        properties[\"destinationPortRange\"] != \"123\"\n        properties[\"destinationPortRange\"] != \"161\"\n        properties[\"destinationPortRange\"] != \"389\"\n        properties[\"destinationPortRange\"] != \"1900\"\n        if (properties[\"destinationPortRange\"].split(\"-\").length > 1) {\n          a = properties[\"destinationPortRange\"].split(\"-\")[0] < 53 && properties[\"destinationPortRange\"].split(\"-\")[1] < 53\n          b = properties[\"destinationPortRange\"].split(\"-\")[0] > 53 && properties[\"destinationPortRange\"].split(\"-\")[1] > 53\n          a || b\n        }\n        if (properties[\"destinationPortRange\"].split(\"-\").length > 1) {\n          a = properties[\"destinationPortRange\"].split(\"-\")[0] < 123 && properties[\"destinationPortRange\"].split(\"-\")[1] < 123\n          b = properties[\"destinationPortRange\"].split(\"-\")[0] > 123 && properties[\"destinationPortRange\"].split(\"-\")[1] > 123\n          a || b\n        }\n        if (properties[\"destinationPortRange\"].split(\"-\").length > 1) {\n          a = properties[\"destinationPortRange\"].split(\"-\")[0] < 161 && properties[\"destinationPortRange\"].split(\"-\")[1] < 161\n          b = properties[\"destinationPortRange\"].split(\"-\")[0] > 161 && properties[\"destinationPortRange\"].split(\"-\")[1] > 161\n          a || b\n        }\n        if (properties[\"destinationPortRange\"].split(\"-\").length > 1) {\n          a = properties[\"destinationPortRange\"].split(\"-\")[0] < 389 && properties[\"destinationPortRange\"].split(\"-\")[1] < 389\n          b = properties[\"destinationPortRange\"].split(\"-\")[0] > 389 && properties[\"destinationPortRange\"].split(\"-\")[1] > 389\n          a || b\n        }\n        if (properties[\"destinationPortRange\"].split(\"-\").length > 1) {\n          a = properties[\"destinationPortRange\"].split(\"-\")[0] < 1900 && properties[\"destinationPortRange\"].split(\"-\")[1] < 1900\n          b = properties[\"destinationPortRange\"].split(\"-\")[0] > 1900 && properties[\"destinationPortRange\"].split(\"-\")[1] > 1900\n          a || b\n        }\n        properties[\"destinationPortRanges\"].all(_ != 53 )\n        properties[\"destinationPortRanges\"].all(_ != 123 )\n        properties[\"destinationPortRanges\"].all(_ != 161 )\n        properties[\"destinationPortRanges\"].all(_ != 389 )\n        properties[\"destinationPortRanges\"].all(_ != 1900 ) \n    }\n  }\n  ```\n"
      remediation: |
        Disable direct UDP access to your Azure Virtual Machines from the Internet. There are other options you can be used to access UDP based services running on these virtual machines:
        * Point-to-site VPN
        * Site-to-site VPN
        * ExpressRoute
