# Copyright (c) Mondoo, Inc.
# SPDX-License-Identifier: BUSL-1.1

policies:
  - uid: mondoo-azure-security
    name: Microsoft Azure Security
    version: 1.4.0
    license: BUSL-1.1
    tags:
      mondoo.com/category: security
      mondoo.com/platform: azure,cloud
    authors:
      - name: Mondoo, Inc
        email: hello@mondoo.com
    docs:
      desc: |-
        ## Overview

        Microsoft Azure Security by Mondoo provides guidance for establishing minimum recommended security and operational best practices for Microsoft Azure.

        ## Remote scan

        Remote scans use cnspec providers to retrieve on-demand scan results without having to install any agents.

        For a complete list of providers, run:

        ```bash
        cnspec scan --help
        ```

        ### Prerequisites

        Remote scans of Azure require API credentials with access to the subscription.

        Note: Some of the checks in this policy query data using Microsoft's Graph API. To successfully run these checks, you must create an Azure AD app registration for cnspec with proper permissions. Follow the instructions on https://mondoo.com/docs/platform/infra/cloud/azure/azure-integration-scan/ to set up this app.

        To run all checks at the same time, ensure your app registration has the necessary permissions (as described in the document linked above) and then run:

        ```bash
        cnspec scan azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id> --policy-bundle mondoo-azure-security.mql.yaml
        ```

        ### Scan an Azure subscription

        ```bash
        cnspec scan azure --subscription <subscription_id>
        ```

        ## Join the community!

        Our goal is to build policies that are simple to deploy, accurate, and actionable.

        If you have any suggestions for how to improve this policy or need support, [join the community](https://github.com/orgs/mondoohq/discussions) in GitHub Discussions.
    groups:
      - title: Azure Core
        filters: |
          asset.platform == "azure"
        checks:
          - uid: mondoo-azure-security-default-network-access-rule-storage-accounts-deny
          - uid: mondoo-azure-security-diagnostic-settings-essential-categories
          - uid: mondoo-azure-security-diagnostic-settings-exist
          - uid: mondoo-azure-security-disable-udp-virtualmachines
          - uid: mondoo-azure-security-ensure-activity-log-alert-exists-for-create-update-delete-network-security-group
          - uid: mondoo-azure-security-ensure-auditing-retention-greater-than-30-days
          - uid: mondoo-azure-security-ensure-disabled-public-access-sql
          - uid: mondoo-azure-security-ensure-logging-enabled-kv
          - uid: mondoo-azure-security-ensure-os-disk-are-encrypted
          - uid: mondoo-azure-security-ensure-register-with-ad-is-enabled-on-app-service
          - uid: mondoo-azure-security-ensure-that-notify-about-alerts-with-high-severity-is-on
          - uid: mondoo-azure-security-ensure-that-ssl-enabled-latest-version-mysql
          - uid: mondoo-azure-security-ensure-that-ssl-enabled-postgresql
          - uid: mondoo-azure-security-ensure-the-expiration-date-is-set-for-all-keys-and-secrets-in-kv
          - uid: mondoo-azure-security-ensure-the-kv-is-recoverable
          - uid: mondoo-azure-security-ensure-web-app-is-using-the-latest-tls
          - uid: mondoo-azure-security-keyvault-public-access-disabled
          - uid: mondoo-azure-security-no-sql-databases-allow-ingress-0-0-0-0-0
          - uid: mondoo-azure-security-public-access-level-private-blob-containers
          - uid: mondoo-azure-security-rdp-access-restricted-from-internet
          - uid: mondoo-azure-security-secure-transfer-required-enabled
          - uid: mondoo-azure-security-sql-server-audit-on
          - uid: mondoo-azure-security-sql-server-tde-on
          - uid: mondoo-azure-security-ssh-access-restricted-from-internet
          - uid: mondoo-azure-security-trusted-microsoft-services-enabled-for-storage-account-access
    scoring_system: 2
queries:
  - uid: mondoo-azure-security-ensure-os-disk-are-encrypted
    title: Ensure that OS disks are encrypted
    impact: 80
    mql: |
      azure.subscription.compute.vms.all(osDisk.properties.encryption != empty)
    docs:
      desc: |
        This check ensures that both OS disks (boot volumes) are encrypted. Customer managed keys can be either Azure Disk Encryption (ADE) or server-side encryption (SSE).
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Run this query:

          ```bash
          cnspec run azure -c "azure.subscription.compute.vms.all(osDisk.properties.encryption != empty)"
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Launch `cnspec shell`:

          ```bash
          cnspec shell azure
          ```

        3. Run this query:

          ```mql
          azure.subscription.compute.vms.all(osDisk.properties.encryption != empty)
          ```
      remediation: |
        ### Terraform

        __Encrypt disks Linux VM__

        ```hcl
        # Encrypt Linux OS disk with Terraform
        resource "azure_linux_virtual_machine" "example" {
          name                = "example-linux-machine"
          resource_group_name = azure_resource_group.example.name
          location            = azure_resource_group.example.location

          ...

          encryption_at_host_enabled = true

          ...
        }
        ```

        __Encrypt disks Windows VM__

        ```hcl
        resource "azure_windows_virtual_machine" "example" {
          name                = "example-windows-machine"
          resource_group_name = azure_resource_group.example.name
          location            = azure_resource_group.example.location

          ...

          encryption_at_host_enabled = true

          ...
        }
        ```

        __Encrypt disks managed disks__

        ```hcl
        resource "azure_managed_disk" "example" {
          name                 = var.disk_name
          location             = var.location
          resource_group_name  = var.resource_group_name
          ...

          encryption_settings {
            enabled = true
          }

          ...
        }
        ```

        ### Microsoft Azure Portal

        To update using Microsoft Azure Portal:

        1. Log into Microsoft Azure Portal at https://portal.azure.com.
        2. Go to **Virtual machines**.
        3. For each virtual machine:
           a. Select the virtual machine.
           b. Select **Disks**.
           c. Select the **X** to detach the disk from the VM.
           d. Search for **Disks** and locate any unattached disk.
           e. Select the disk and select **Encryption**.
           f. Change the encryption type, then select the encryption set.
           g. Select **Save**.
           h. Go back to the VM and re-attach the disk.

        ### Azure CLI

        ```bash
        az vm encryption enable -g <resource_group> --name <vm_name> --disk-encryption-keyvault <keyvault_name> --key-encryption-key <key_name> --volume-type [ALL|OS|DATA]
        ```
    refs:
      - url: https://learn.microsoft.com/en-us/azure/virtual-machines/disk-encryption-overview
        title: Overview of managed disk encryption options
  - uid: mondoo-azure-security-ssh-access-restricted-from-internet
    title: Ensure that SSH access is restricted from the internet
    impact: 80
    mql: |
      allNsgTCP= azure.subscription.network.securityGroups.where(securityRules
        .where(
          properties.access == 'Allow'
            && direction == 'Inbound'
            && properties.protocol == /TCP|\*/
            && properties.sourceAddressPrefix == /\*|0\.0\.0\.0|<nw>\/0|\/0|internet|any/
        )
      )
      allNsgTCP.all(properties.destinationPortRange != "*")
      allNsgTCP.all(securityRules.none(destinationPortRange.any(fromPort <= 22 && toPort >= 22)))
    docs:
      desc: |
        This check ensures that SSH on port 22 is not configured to allow access from anywhere with the CIDR block "0.0.0.0".
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Run this query:

          ```bash
          cnspec run azure -c "allNsgTCP= azure.subscription.network.securityGroups.where(securityRules
        .where(
          properties.access == 'Allow'
            && direction == 'Inbound'
            && properties.protocol == /TCP|\*/
            && properties.sourceAddressPrefix == /\*|0\.0\.0\.0|<nw>\/0|\/0|internet|any/
        )
        )
        allNsgTCP.all(properties.destinationPortRange != "*")
        allNsgTCP.all(securityRules.none(destinationPortRange.any(fromPort <= 22 && toPort >= 22)))"
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Launch `cnspec shell`:

          ```bash
          cnspec shell azure
          ```

        3. Run this query:

          ```mql
          allNsgTCP= azure.subscription.network.securityGroups.where(securityRules
        .where(
          properties.access == 'Allow'
            && direction == 'Inbound'
            && properties.protocol == /TCP|\*/
            && properties.sourceAddressPrefix == /\*|0\.0\.0\.0|<nw>\/0|\/0|internet|any/
        )
        )
        allNsgTCP.all(properties.destinationPortRange != "*")
        allNsgTCP.all(securityRules.none(destinationPortRange.any(fromPort <= 22 && toPort >= 22)))
          ```
      remediation: |
        ### Terraform

        ```hcl
        # Ensure the `source_address_prefix` is configured to a restrictive CIDR address

        resource "azure_network_security_group" "my_terraform_nsg" {
          name                = "myNetworkSecurityGroup"
          location            = azure_resource_group.rg.location
          resource_group_name = azure_resource_group.rg.name

          security_rule {
            name                       = "SSH"
            priority                   = 1001
            direction                  = "Inbound"
            access                     = "Allow"
            protocol                   = "Tcp"
            source_port_range          = "*"
            destination_port_range     = "22"
            source_address_prefix      = "192.168.22.5/24"
            destination_address_prefix = "*"
          }
        }
        ```
  - uid: mondoo-azure-security-rdp-access-restricted-from-internet
    title: Ensure that RDP access is restricted from the internet
    impact: 80
    mql: |
      allNsgTCP= azure.subscription.network.securityGroups.where(securityRules
        .where(
          properties.access == 'Allow'
            && direction == 'Inbound'
            && properties.protocol == /TCP|\*/
            && properties.sourceAddressPrefix == /\*|0\.0\.0\.0|<nw>\/0|\/0|internet|any/
        )
      )
      allNsgTCP.all(properties.destinationPortRange != "*")
      allNsgTCP.all(securityRules.none(destinationPortRange.any(fromPort <= 3389 && toPort >= 3389)))
    docs:
      desc: |
        This check ensures that RDP on port 3389 is not configured to allow access from anywhere with the CIDR block "0.0.0.0".
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Run this query:

          ```bash
          cnspec run azure -c "allNsgTCP= azure.subscription.network.securityGroups.where(securityRules
        .where(
          properties.access == 'Allow'
            && direction == 'Inbound'
            && properties.protocol == /TCP|\*/
            && properties.sourceAddressPrefix == /\*|0\.0\.0\.0|<nw>\/0|\/0|internet|any/
        )
        )
        allNsgTCP.all(properties.destinationPortRange != "*")
        allNsgTCP.all(securityRules.none(destinationPortRange.any(fromPort <= 3389 && toPort >= 3389)))"
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Launch `cnspec shell`:

          ```bash
          cnspec shell azure
          ```

        3. Run this query:

          ```mql
          allNsgTCP= azure.subscription.network.securityGroups.where(securityRules
        .where(
          properties.access == 'Allow'
            && direction == 'Inbound'
            && properties.protocol == /TCP|\*/
            && properties.sourceAddressPrefix == /\*|0\.0\.0\.0|<nw>\/0|\/0|internet|any/
        )
        )
        allNsgTCP.all(properties.destinationPortRange != "*")
        allNsgTCP.all(securityRules.none(destinationPortRange.any(fromPort <= 3389 && toPort >= 3389)))
          ```
      remediation: |
        ### Terraform

        ```hcl
        # Ensure the `source_address_prefix` is configured to a restrictive CIDR address

        resource "azure_network_security_group" "example" {
          name                = "example-rdp-security"
          location            = azure_resource_group.rg.location
          resource_group_name = azure_resource_group.rg.name

          security_rule {
            name                       = "RDP"
            priority                   = 1001
            direction                  = "Inbound"
            access                     = "Allow"
            protocol                   = "Tcp"
            source_port_range          = "*"
            destination_port_range     = "3389"
            source_address_prefix      = "192.168.22.5/24"
            destination_address_prefix = "*"
          }
        }
        ```
  - uid: mondoo-azure-security-secure-transfer-required-enabled
    title: Ensure that all data must be encrypted in transit
    impact: 80
    mql: |
      azure.subscription.storage.accounts.all(properties.EnableHttpsTrafficOnly == true)
    docs:
      desc: |
        This check ensures that "Secure transfer required" is enabled.  This setting enforces the use of HTTPS for data operations, ensuring that data transmitted to and from Azure storage accounts is secured. It's an important security measure to protect data from interception or tampering during transmission, aligning with best practices for data security in the cloud.
        When the 'secure transfer required' setting is enabled in Azure, it mandates the use of HTTPS for accessing storage accounts through REST APIs. Any HTTP requests are automatically rejected. This also impacts the Azure files service; unencrypted connections, including certain SMB protocols and some Linux SMB clients, will fail. However, it's important to note that Azure storage doesn't support HTTPS for custom domain names, so this security feature doesn't apply when using a custom domain. This setting is crucial for ensuring that data in transit is encrypted and secure.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Run this query:

          ```bash
          cnspec run azure -c " azure.subscription.storage.accounts.all(properties.EnableHttpsTrafficOnly == true)"
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Launch `cnspec shell`:

          ```bash
          cnspec shell azure
          ```

        3. Run this query:

          ```mql
           azure.subscription.storage.accounts.all(properties.EnableHttpsTrafficOnly == true)
          ```
      remediation: |
        ### Terraform

        ```hcl
        resource "azure_storage_account" "example_storage_account" {
          ...
          enable_https_traffic_only = true
        }
        ```
  - uid: mondoo-azure-security-public-access-level-private-blob-containers
    title: Ensure that anonymous access to blob containers and public access on storage accounts are disabled
    impact: 80
    mql: |
      azure.subscription.storage.accounts.all(properties.AllowBlobPublicAccess == "false" ) ||
       azure.subscription.storage.accounts.all(containers.all(properties.publicAccess == "None" ))
    docs:
      desc: |
        This check ensures that anonymous access to blob containers is disabled. It also checks that public access on storage accounts is disabled.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Run this query:

          ```bash
          cnspec run azure -c "azure.subscription.storage.accounts.all(properties.AllowBlobPublicAccess == "false" ) ||
            azure.subscription.storage.accounts.all(containers.all(properties.publicAccess == "None" ))"
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Launch `cnspec shell`:

          ```bash
          cnspec shell azure
          ```

        3. Run this query:

          ```mql
          azure.subscription.storage.accounts.all(properties.AllowBlobPublicAccess == "false" ) ||
            azure.subscription.storage.accounts.all(containers.all(properties.publicAccess == "None" ))

          ```
      remediation: |
        ### Terraform

        ```hcl
        resource "azure_storage_container" "example_storage_container" {
            ...
          container_access_type = "private"
        }
        ```

        ### Microsoft Azure Portal

        1. Log into the Microsoft Azure Portal at https://portal.azure.com.
        2. Go to **Storage accounts**.
        3. For each storage account:
           a. Select the storage account.
           b. For each container:
             i. Select the container.
             ii. Select **Change access level**.
             iii. Select **Private (no anonymous access)**.
             iv. Select the **OK** button.

        ### Azure CLI

        ```bash
        az storage container set-permission
        --name <container_name>
        --public-access off
        --account-name <account_name>
        --account-key <account_key>
        ```
  - uid: mondoo-azure-security-default-network-access-rule-storage-accounts-deny
    title: Ensure the default network access rule for Storage Accounts is set to deny
    impact: 80
    mql: |
      azure.subscription.storage.accounts.all(properties.NetworkRuleSet.defaultAction == "Deny")
    docs:
      desc: |
        This check ensures that access to the default network for storage accounts is set to deny.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Run this query:

          ```bash
          cnspec run azure -c "azure.subscription.storage.accounts.all(properties.NetworkRuleSet.defaultAction == "Deny")"
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Launch `cnspec shell`:

          ```bash
          cnspec shell azure
          ```

        3. Run this query:

          ```mql
          azure.subscription.storage.accounts.all(properties.NetworkRuleSet.defaultAction == "Deny")
          ```
      remediation: |
        ### Terraform

        ```hcl
        # Ensure the `default_action` is set to `Deny`

        resource "azure_storage_account_network_rules" "example_storage_account" {
          resource_group_name  = azure_resource_group.example.name
          storage_account_name = azure_storage_account.example.name

          default_action       = "Deny"
        }
        ```

        ```hcl
        resource "azure_storage_account" "example_storage_account" {
          name                = "example_storage_account"
          resource_group_name = azure_resource_group.example.name
          location            = azure_resource_group.example.location

          network_rules {
            default_action = "Deny"
          }

          ...
        }
        ```
  - uid: mondoo-azure-security-trusted-microsoft-services-enabled-for-storage-account-access
    title: Ensure "Trusted Microsoft Services" is enabled for storage account access
    impact: 80
    mql: |
      azure.subscription.storage.accounts.all(properties.NetworkRuleSet.bypass.contains("AzureServices"))
    docs:
      desc: |
        This check ensures that "Trusted Microsoft Services" is enabled for storage account access. When using Azure storage accounts, certain Azure services might need to bypass network rules due to their operational networks. The "Allow trusted Azure services" exception allows these services to access the storage account securely, using strong authentication. This exception is crucial for services that interact directly with storage accounts but are not able to conform to network rules. Services such as Azure Backup, Azure Site Recovery, Azure DevTest Labs, Azure Event Grid, Azure Event Hubs, Azure Networking, Azure Monitor, and Azure SQL Data Warehouse are examples of services that can be granted access through this exception when they are registered in the subscription. This setup is important for maintaining both functionality and security in Azure environments.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Run this query:

          ```bash
          cnspec run azure -c "azure.subscription.storage.accounts.all(properties.NetworkRuleSet.bypass.contains("AzureServices"))"
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Launch `cnspec shell`:

          ```bash
          cnspec shell azure
          ```

        3. Run this query:

          ```mql
          azure.subscription.storage.accounts.all(properties.NetworkRuleSet.bypass.contains("AzureServices"))
          ```
      remediation: |
        ### Terraform

        ```hcl
        resource "azure_storage_account" "example" {
            ...
          network_rules {
            ...
            bypass = ["AzureServices"]
            ...
          }
        }
        ```
  - uid: mondoo-azure-security-ensure-auditing-retention-greater-than-30-days
    title: Ensure that audit logs are retained for at least 30 days
    impact: 80
    mql: |
      azure.subscription.sql.servers.all(auditingPolicy.retentionDays >= 30) ||
       azure.subscription.sql.servers.all(auditingPolicy.retentionDays == 0)
    docs:
      desc: |
        This check ensures that auditing retention is set to greater than or equal to 30 days.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Run this query:

          ```bash
          cnspec run azure -c "azure.subscription.sql.servers.all(auditingPolicy.retentionDays >= 30) || azure.subscription.sql.servers.all(auditingPolicy.retentionDays == 0)"
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Launch `cnspec shell`:

          ```bash
          cnspec shell azure
          ```

        3. Run this query:

          ```mql
          azure.subscription.sql.servers.all(auditingPolicy.retentionDays >= 30) || azure.subscription.sql.servers.all(auditingPolicy.retentionDays == 0)
          ```
      remediation: |
        ### Terraform

        ```hcl
        resource "azure_sql_server" "example" {
          ...
          extended_auditing_policy {
            storage_endpoint           = azure_storage_account.example.primary_blob_endpoint
            storage_account_access_key = azure_storage_account.example.primary_access_key
            storage_account_access_key_is_secondary = true
            retention_in_days                       = 30
          }
        }
        ```
  - uid: mondoo-azure-security-no-sql-databases-allow-ingress-0-0-0-0-0
    title: Ensure no SQL Databases allow ingress 0.0.0.0/0 (ANY IP)
    impact: 80
    mql: |
      azure.subscription.sql.servers.all(firewallRules.all(startIpAddress != "0.0.0.0"))
      azure.subscription.postgreSql.servers.all(firewallRules.all(startIpAddress != "0.0.0.0"))
      azure.subscription.mySql.servers.all(firewallRules.all(startIpAddress != "0.0.0.0"))
      azure.subscription.mariaDb.servers.all(firewallRules.all(startIpAddress != "0.0.0.0"))
    docs:
      desc: |
        This check ensures that no SQL databases allow ingress connections from "0.0.0.0".
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Run this query:

          ```bash
          cnspec run azure -c "azure.subscription.sql.servers.all(firewallRules.all(startIpAddress != "0.0.0.0"))"
          cnspec run azure -c "azure.subscription.postgreSql.servers.all(firewallRules.all(startIpAddress != "0.0.0.0"))"
          cnspec run azure -c "azure.subscription.mySql.servers.all(firewallRules.all(startIpAddress != "0.0.0.0"))"
          cnspec run azure -c "azure.subscription.mariaDb.servers.all(firewallRules.all(startIpAddress != "0.0.0.0"))"
          ```

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Run `az login` to authenticate with the correct Azure subscription and tenant.
        2. Launch `cnspec shell`:

          ```bash
          cnspec shell azure
          ```

        3. Run this query:

          ```mql
          azure.subscription.sql.servers.all(firewallRules.all(startIpAddress != "0.0.0.0"))
          azure.subscription.postgreSql.servers.all(firewallRules.all(startIpAddress != "0.0.0.0"))
          azure.subscription.mySql.servers.all(firewallRules.all(startIpAddress != "0.0.0.0"))
          azure.subscription.mariaDb.servers.all(firewallRules.all(startIpAddress != "0.0.0.0"))
          ```
      remediation: |
        ### Terraform

        __mySQL__

        ```hcl
        # Ensure `start_ip_address` is not configured to `0.0.0.0`

        resource "azure_mysql_firewall_rule" "example" {
          ...
          start_ip_address    = "192.168.2.22"
          end_ip_address      = "255.255.255.255"
        }
        ```

        __MariaDB__

        ```hcl
        # Ensure `start_ip_address` is not configured to `0.0.0.0`

        resource "azure_mariadb_firewall_rule" "example" {
          ...
          start_ip_address    = "192.168.2.22"
          end_ip_address      = "255.255.255.255"
        }
        ```

        __SQL__

        ```hcl
        # Ensure `start_ip_address` is not configured to `0.0.0.0`

        resource "azure_sql_firewall_rule" "example" {
          ...
          start_ip_address    = "192.168.2.22"
          end_ip_address      = "255.255.255.255"
        }
        ```

        __Postgres__

        ```hcl
        # Ensure `start_ip_address` is not configured to `0.0.0.0`

        resource "azure_postgresql_firewall_rule" "example" {
          ...
          start_ip_address    = "192.168.2.22"
          end_ip_address      = "255.255.255.255"
        }
        ```
  - uid: mondoo-azure-security-ensure-register-with-ad-is-enabled-on-app-service
    title: Ensure that app services can authenticate with Microsoft Entra ID
    impact: 80
    mql: |
      azure.subscription.web.apps.all(identity.type == "SystemAssigned") ||
       azure.subscription.web.apps.all(identity.principalId != empty)
    docs:
      desc: |
        This check ensures that all app services can authenticate through Microsoft Entra ID (formerly Azure AD). This approach removes secrets from the app itself. Instead, the app connects to other Azure services securely without the need for user names and passwords.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`, run this query:

          ```bash
          cnspec run azure -c "azure.subscription.web.apps.all(identity.type == "SystemAssigned") || azure.subscription.web.apps.all(identity.principalId != empty)" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        Note: It is also possible to use a client secret for the app connection instead of a certificate.

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        2. Run this query:

          ```mql
          azure.subscription.web.apps.all(identity.type == "SystemAssigned") || azure.subscription.web.apps.all(identity.principalId != empty)
          ```
      remediation: |
        ### Microsoft Azure Portal

        To update using Microsoft Azure Portal:
        1. Log into Microsoft Azure Portal at https://portal.azure.com.
        2. Go to **App Services**.
        3. For each app:
           a. Select the app.
           b. Under **Settings**, select **Identity**.
           c. On the **System assigned** tab, set **Status** to **On**.
  - uid: mondoo-azure-security-ensure-web-app-is-using-the-latest-tls
    title: Ensure that Web Apps use the latest available version of TLS encryption
    impact: 80
    mql: |
      azure.subscription.web.apps.all(configuration.properties.minTlsVersion == "1.2")
    docs:
      desc: |
        It is highly recommended to use the latest TLS version available with Azure App Services for all secure Web App connections. Currently Azure App Services supports TLS 1.2.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`, run this query:

          ```bash
          cnspec run azure -c "azure.subscription.web.apps.all(configuration.properties.minTlsVersion == "1.2")" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        Note: It is also possible to use a client secret for app connection instead of a certificate.

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        2. Run this query:

          ```mql
          azure.subscription.web.apps.all(configuration.properties.minTlsVersion == "1.2")
          ```
      remediation: |
        ### Microsoft Azure Portal

        To update using Microsoft Azure Portal:
        1. Log into Microsoft Azure Portal at https://portal.azure.com
        2. Go to **App Services**.
        3. For each app:
           a. Select the app.
           b. Select **Configuration** and select the **General settings** tab.
           c. Under **Minimum Inbound TLS Version**, select **1.2**.
           d. Select **Save**.
  - uid: mondoo-azure-security-ensure-the-expiration-date-is-set-for-all-keys-and-secrets-in-kv
    title: Ensure that the expiration date is set for all keys and secrets in key vaults
    impact: 80
    mql: |
      azure.subscription.keyVault.vaults.all(keys.all(enabled == true))
      azure.subscription.keyVault.vaults.all(keys.all(expires != empty))
      azure.subscription.keyVault.vaults.all(secrets.all(enabled == true))
      azure.subscription.keyVault.vaults.all(secrets.all(expires != empty))
    docs:
      desc: |
        The expiration date attribute identifies when you can no longer use the key/secret for a cryptographic operation. By default, keys/secrets never expire. Therefore, it is highly recommended that you rotate keys/secrets in the key vault and set an explicit expiration date.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`, run this query:

          ```bash
          cnspec run azure -c "azure.subscription.keyVault.vaults.all(keys.all(enabled && expires != empty))" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          cnspec run azure -c "azure.subscription.keyVault.vaults.all(secrets.all(enabled && expires != empty))" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        Note: It is also possible to use a client secret for app connection instead of a certificate.

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        2. Run this query:

          ```mql
          azure.subscription.keyVault.vaults.all(keys.all(enabled == true))
          azure.subscription.keyVault.vaults.all(keys.all(expires != empty))
          azure.subscription.keyVault.vaults.all(secrets.all(enabled == true))
          azure.subscription.keyVault.vaults.all(secrets.all(expires != empty))
          ```
      remediation: |
        ### Microsoft Azure Portal

        To update using Microsoft Azure Portal:

        1. Log into Microsoft Azure Portal at https://portal.azure.com.
        2. Go to **Key vaults**.
        3. For each key vault:
           a. Select the key vault.
           b. Select **Keys** or **Secrets**.
           c. Make sure that the key/secret in the key vault has an expiration date.
  - uid: mondoo-azure-security-ensure-the-kv-is-recoverable
    title: Ensure it is possible to recover key vaults
    impact: 80
    mql: |
      azure.subscription.keyVault.vaults.all(properties.enablePurgeProtection == "true")
      azure.subscription.keyVault.vaults.all(properties.enableSoftDelete == "true")
    docs:
      desc: |
        Azure Key Vault can store keys, secrets, and certificates. Accidental unavailability of a key vault can cause serious problems in any organization.

        Soft delete is a feature of Azure Key Vault that retains key vaults and key vault items after initial deletion. By default, new key vaults created through the portal are configured with soft delete for 90 days.

        Once enabled, soft delete can not be disabled. When soft delete is enabled, it is possible to purge soft deleted vaults and vault items.

        Purge protection is another feature of key vaults that is used to protect deleted key vaults for a certain period, called the "retention period." Once enabled, purge protection prevents deleted key vaults from being purged until the retention period is reached. This selection cannot be changed once the key vault is created.

        If a key vault is created with purge protection, you can still delete it, but you will not be able to purge it once it is deleted. In this case, the deleted key vaults must wait 90 days to be permanently purged.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`, run this query:

          ```bash
          cnspec run azure -c "azure.subscription.keyVault.vaults.all(properties.enablePurgeProtection == "true")" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          cnspec run azure -c "azure.subscription.keyVault.vaults.all(properties.enableSoftDelete == "true")" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        Note: It is also possible to use a client secret for app connection instead of a certificate.

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        2. Run this query:

          ```mql
          azure.subscription.keyVault.vaults.all(properties.enablePurgeProtection == "true")
          azure.subscription.keyVault.vaults.all(properties.enableSoftDelete == "true")
          ```
      remediation: |
        ### Microsoft Azure Portal

        To update using Microsoft Azure Portal:

        1. Log into Microsoft Azure Portal at https://portal.azure.com.
        2. Go to **Key vaults**.
        3. for each key vault:
           a. Select **Properties** and ensure **Soft-delete** is enabled.
           b. Select **Enable Purge Protection**.
           c. Select **Save**.
  - uid: mondoo-azure-security-ensure-logging-enabled-kv
    title: Ensure all operations in Azure Key Vault are logged
    impact: 80
    mql: |
      azure.subscription.keyVault.vaults.all(diagnosticSettings.any(properties.logs.where(category == "AuditEvent").all(retentionPolicy.days >= 180)))
    docs:
      desc: |
        Monitoring how, by whom, and when key vaults are accessed creates an audit trail of interactions with confidential information, keys, secrets, and certificates.

        Enabling logging for Azure Key Vault saves information in an Azure storage account that you provide. This creates a new container called insights-logs-auditevent for the specified storage account.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`, run this query:

          ```bash
          cnspec run azure -c "azure.subscription.keyVault.vaults.all(diagnosticSettings.any(properties.logs.where(category == "AuditEvent").all(retentionPolicy.days >= 180)))" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        Note: It is also possible to use a client secret for app connection instead of a certificate.

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        2. Run this query:

          ```mql
          azure.subscription.keyVault.vaults.all(diagnosticSettings.any(properties.logs.where(category == "AuditEvent").all(retentionPolicy.days >= 180)))
          ```
      remediation: |
        ### Microsoft Azure Portal

        1. Log into Microsoft Azure Portal at https://portal.azure.com.
        2. Go to **Key vaults**.
        3. For each key vault:
           a. Select the key vault.
           b. Under **Monitoring**, select **Diagnostic settings** and then select **+ Add diagnostic setting**.
           c. Select **Audit** and **All logs**.
           d. Select **Archive to a storage account** and choose a storage account.
           e. Select **Save**.
  - uid: mondoo-azure-security-ensure-activity-log-alert-exists-for-create-update-delete-network-security-group
    title: Ensure that activity log alerts exist for the commands Create, Update, and Delete Network Security Group
    impact: 80
    mql: |
      azure.subscription.monitor.activityLog.alerts.where(actions != empty).any(conditions.any(equals == "Microsoft.Authorization/policyAssignments/write" && fieldName == "operationName"))
      azure.subscription.monitor.activityLog.alerts.where(actions != empty).any(conditions.any(equals == "Microsoft.Network/networkSecurityGroups/delete" && fieldName == "operationName"))
    docs:
      desc: |
        Monitoring network security group events can give clear insight into network access changes and is useful for detecting suspicious activity.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`, run this query:

          ```bash
          cnspec run azure -c "azure.subscription.monitor.activityLog.alerts.where(actions != empty).any(conditions.any(equals == "Microsoft.Network/networkSecurityGroups/write" && fieldName == "operationName" ))" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          cnspec run azure -c "azure.subscription.monitor.activityLog.alerts.where(actions != empty).any(conditions.any(equals == "Microsoft.Network/networkSecurityGroups/delete" && fieldName == "operationName" ))" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        Note: It is also possible to use a client secret for app connection instead of a certificate.

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        2. Run this query:

          ```mql
          azure.subscription.monitor.activityLog.alerts.where(actions != empty).any(conditions.any(equals == "Microsoft.Network/networkSecurityGroups/write" && fieldName == "operationName" ))
          azure.subscription.monitor.activityLog.alerts.where(actions != empty).any(conditions.any(equals == "Microsoft.Network/networkSecurityGroups/delete" && fieldName == "operationName" ))
          ```
      remediation: |
        ### Microsoft Azure Portal

        To update using Microsoft Azure Portal:

        1. Log into Microsoft Azure Portal at https://portal.azure.com.
        2. Go to **Monitor**.
        3. Select **Alerts**.
        4. In the **+ Create** drop-down, select **Alert rule**.
        5. Under **Resource types**, select **Network security group**.
        6. Select the subscription name, resource group, or network security group" to apply the rule to.
        7. Verify that the selection preview shows:
            - All network security groups or your selected network security group
            - The subscription, group, or resource you selected
        8. Select the **Apply** button.
        9. Select the **Condition** tab and select **See all signals**.
        10. Select **Create or Update Network Security Group**.
        11. Select the **Actions** tab and either choose an existing action group or create a new one to notify the necessary personnel.
        12. Select the **Details** tab and provide:
            - The resource group where you want the alert rule to reside
            - A name (and optional description) for the alert rule
        13. Select the **Review + create button and verify the summary.
        14. Select the **Create** button.
        15. Repeat steps 4-15 but in step 10, select **Delete Network Security Group**.
  - uid: mondoo-azure-security-ensure-that-notify-about-alerts-with-high-severity-is-on
    title: Ensure that "Notify about alerts with high severity" is enabled
    impact: 80
    mql: |
      azure.subscription.cloudDefender.securityContacts.all(alertNotifications.minimalSeverity == "High")
      azure.subscription.cloudDefender.securityContacts.all(alertNotifications.state == "On")
    docs:
      desc: |
        Enabling security alert email ensures that Microsoft makes administrators aware of any potential security issues so they can react quickly.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`, run this query:

          ```bash
          cnspec run azure -c "azure.subscription.cloudDefender.securityContacts.all(alertNotifications.minimalSeverity == "High" && alertNotifications.state == "On" )" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        Note: It is also possible to use a client secret for app connection instead of a certificate.

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        2. Run this query:

          ```mql
          azure.subscription.cloudDefender.securityContacts.all(alertNotifications.minimalSeverity == "High")
          azure.subscription.cloudDefender.securityContacts.all(alertNotifications.state == "On")
          ```
      remediation: |
        ### Microsoft Azure Portal

        To update using Microsoft Azure Portal:

        1. Log into Microsoft Azure Portal at https://portal.azure.com.
        2. Go to **Microsoft Defender for Cloud**.
        3. Select **Environment Settings** and select the management group, subscription, or workspace.
        4. Select **Email notifications** and ensure that the **Notify about alerts with the following severity (or higher)** setting is checked and set to **High**.
  - uid: mondoo-azure-security-ensure-that-ssl-enabled-postgresql
    title: Ensure SSL connection enabled for PostgreSQL database servers
    impact: 80
    mql: |
      azure.subscription.postgreSql.servers.all(properties.sslEnforcement == "Enabled")
    docs:
      desc: |
        All communication between clients and PostgreSQL database servers should be through SSL/TLS. This added layer of encryption prevents man-in-the-middle attacks.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`, run this query:

          ```bash
          cnspec run azure -c "azure.subscription.postgreSql.servers.all(properties.sslEnforcement == "Enabled")" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        Note: It is also possible to use a client secret for app connection instead of a certificate.

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        2. Run this query:

          ```mql
          azure.subscription.postgreSql.servers.all(properties.sslEnforcement == "Enabled")
          ```
      remediation: |
        ### Microsoft Azure Portal

        To update using Microsoft Azure Portal:

        1. Log into Microsoft Azure Portal at https://portal.azure.com.
        2. Go to **Azure Database for PostgreSQL**.
        3. For each database, select **Connection security** and enable SSL.
  - uid: mondoo-azure-security-ensure-that-ssl-enabled-latest-version-mysql
    title: Ensure SSL connection enabled for MySQL Database Server with the latest version
    impact: 80
    mql: |
      azure.subscription.mySql.servers.all(properties.sslEnforcement == "Enabled")
      azure.subscription.mySql.servers.all(properties.minimalTlsVersion == "TLS1_2")
    docs:
      desc: |
        All communication between clients and MySQL servers should be through SSL/TLS. This adds a layer of encryption to prevent man-in-the-middle attacks.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`, run this query:

          ```bash
          cnspec run azure -c "azure.subscription.mySql.servers.all(properties.sslEnforcement == "Enabled" )" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          cnspec run azure -c "azure.subscription.mySql.servers.all(properties.minimalTlsVersion == "TLS1_2" )" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        Note: It is also possible to use a client secret for app connection instead of a certificate.

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        2. Run this query:

          ```mql
          azure.subscription.mySql.servers.all(properties.sslEnforcement == "Enabled")
          azure.subscription.mySql.servers.all(properties.minimalTlsVersion == "TLS1_2")
          ```
      remediation: |
        ### Microsoft Azure Portal

        To update using Microsoft Azure Portal:
        1. Log into Microsoft Azure Portal at https://portal.azure.com.
        2. Go to **Azure Database for mySQL server**.
        3. For each database:
           a. Select **Connection security**.
           b. Enable **SSL**.
           c. Ensure that the latest version of TLS is selected as the minimum.
  - uid: mondoo-azure-security-ensure-disabled-public-access-sql
    title: Ensure public network access for SQL server is blocked or Limited to Use Selected Networks Instead of All Networks
    impact: 80
    mql: |
      azure.subscription.sql.servers.all(properties.publicNetworkAccess == "Disabled") ||
       azure.subscription.sql.servers.where(properties.publicNetworkAccess == "Enabled").all(virtualNetworkRules != empty || firewallRules != empty)
    docs:
      desc: |
        Customers can choose to connect to a database by either:
          * Public endpoints (with IP-based server-level firewall rules or with virtual-network firewall rules)
          * Private endpoints (using Azure Private Link)

        When public network access is disabled, only connections from private endpoints are allowed. All connections from public endpoints are denied.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`, run this query:

          ```bash
          cnspec run azure -c "azure.subscription.sql.servers.all(properties.publicNetworkAccess == "Disabled") || azure.subscription.sql.servers.where(properties.publicNetworkAccess == "Enabled").all(virtualNetworkRules != empty || firewallRules != empty)" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        Note: It is also possible to use a client secret for app connection instead of a certificate.

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        2. Run this query:

          ```mql
          azure.subscription.sql.servers.all(properties.publicNetworkAccess == "Disabled") || azure.subscription.sql.servers.where(properties.publicNetworkAccess == "Enabled").all(virtualNetworkRules != empty || firewallRules != empty)
          ```
      remediation: |
        ### Microsoft Azure Portal

        To update using Microsoft Azure Portal:

        1. Log into Microsoft Azure Portal at https://portal.azure.com.
        2. Go to **SQL servers**.
        3. For each server:
           a. Under **Security**, select **Networking**.
           b. For **Public network access**, select **Disable** or **Selected networks**.
  - uid: mondoo-azure-security-keyvault-public-access-disabled
    title: Ensure default public network access for Azure Key Vault is disabled or Limited to Use Selected Networks Instead of All Networks
    impact: 80
    mql: |
      azure.subscription.keyVault.vaults.all(properties.publicNetworkAccess == "Disabled") ||
        azure.subscription.keyVault.vaults.where(properties.publicNetworkAccess == "Enabled").all(properties.networkAcls.virtualNetworkRules != empty || properties.networkAcls.ipRules != empty)
    docs:
      desc: |
        To enhance the security of Azure Key Vault, a critical component in the Azure environment, it's advisable to restrict public network access. By default, a new key vault has its firewall disabled, permitting unrestricted access from applications and Azure services, though operations are still restricted by Microsoft Entra authentication and access policies.

        For stronger network security, consider these options:

          * Disable Public Network Access: This blocks all public internet connections to the key vault, allowing only connections through private endpoints.
          * Limit Access to Selected Networks: If public access is necessary, restrict it by configuring the Azure Key Vault firewall. You can define specific virtual networks or set firewall rules by adding IP ranges, limiting access to trusted internet sources or your on-premises networks.

        Implementing these measures ensures that only authorized networks and applications can access your key vault, significantly bolstering its security.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`, run this query:

          ```bash
          cnspec run azure -c "azure.subscription.keyVault.vaults.all(properties.publicNetworkAccess == "Disabled") || azure.subscription.keyVault.vaults.where(properties.publicNetworkAccess == "Enabled").all(properties.networkAcls.virtualNetworkRules != empty || properties.networkAcls.ipRules != empty)" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        Note: It is also possible to use a client secret for app connection instead of a certificate.

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        2. Run this query:

          ```mql
          azure.subscription.keyVault.vaults.all(properties.publicNetworkAccess == "Disabled") ||
        azure.subscription.keyVault.vaults.where(properties.publicNetworkAccess == "Enabled").all(properties.networkAcls.virtualNetworkRules != empty || properties.networkAcls.ipRules != empty)
          ```
      remediation: |
        ### Microsoft Azure Portal

        To update using Microsoft Azure Portal:

        1. Log into Microsoft Azure Portal at https://portal.azure.com.
        2. Go to **Key vaults**.
        3. For each key vault:
           a. Under **Settings**, select **Networking**.
           b. For **Firewalls and virtual networks**, select **Disable public access**.
  - uid: mondoo-azure-security-sql-server-audit-on
    title: Ensure that all activities on SQL server are audited
    impact: 60
    mql: |
      azure.subscription.sql.servers.all(auditingPolicy.state == "Enabled")
    docs:
      desc: |
        Auditing is a very important feature and should be configured for every database or server in your Azure deployment. When you enable server-level auditing, you enable it for all existing databases and for new databases you create in the future.

        Enable server auditing when you must audit all databases for that logical server. Enable database level audit when you want to audit different action groups for a specific database or write to a different target for a specific database.

        If you enable both server- and database-level auditing for a database, you can choose predicate expressions to filter the events and ensure you don't duplicate data.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`, run this query:

          ```bash
          cnspec run azure -c "azure.subscription.sql.servers.all(auditingPolicy.state == "Enabled")" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        Note: It is also possible to use a client secret for app connection instead of a certificate.

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        2. Run this query:

          ```mql
          azure.subscription.sql.servers.all(auditingPolicy.state == "Enabled")
          ```
      remediation: |
        ### Microsoft Azure Portal

        To update using Microsoft Azure Portal:

        1. Log into Microsoft Azure Portal at https://portal.azure.com.
        2. Go to **SQL servers**.
        3. For each SQL server select **Auditing** and make sure the **Enable Azure SQL Auditing** toggle is on.
  - uid: mondoo-azure-security-sql-server-tde-on
    title: Ensure that transparent data encryption is enabled for SQL Server databases
    impact: 60
    mql: |
      azure.subscription.sql.servers.all(databases.where(name != "master").all(transparentDataEncryption.state == "Enabled"))
    docs:
      desc: |
        Transparent data encryption (TDE) encrypts SQL Server, Azure SQL Database, and Azure Synapse Analytics data files. This encryption is known as encrypting data at rest.

        TDE does real-time I/O encryption and decryption of data and log files. The encryption uses a database encryption key (DEK). The database boot record stores the key for availability during recovery. The DEK is a symmetric key. It's secured by a certificate that the server's master database stores or by an asymmetric key that an EKM module protects.

        TDE protects data at rest, which is the data and log files. It lets you follow many laws, regulations, and guidelines established in various industries. Your software developers can encrypt data by using AES and 3DES encryption algorithms without changing existing applications.

        Note: TDE is not available for system databases.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec , run this query:

          ```bash
          cnspec run azure -c "azure.subscription.sql.servers.all(databases.where(name != "master").all(transparentDataEncryption.state == "Enabled"))" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        Note: It is also possible to use a client secret for app connection instead of a certificate.

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        2. Run this query:

          ```mql
          azure.subscription.sql.servers.all(databases.where(name != "master").all(transparentDataEncryption.state == "Enabled"))
          ```
      remediation: |
        ### Microsoft Azure Portal

        To update using Microsoft Azure Portal:

        1. Log into Microsoft Azure Portal at https://portal.azure.com.
        2. Go to **SQL databases**.
        3. For each database instance:
           a. Select the database.
           b. Under **Security**, select **Data encryption**.
           c. On the **Transparent data encryption** tab, make sure **Data encryption** is set to **On**.
  - uid: mondoo-azure-security-diagnostic-settings-exist
    title: Ensure that diagnostic settings exist for the subscription
    impact: 80
    mql: |
      azure.subscription.monitor.diagnosticSettings != empty
    docs:
      desc: |
        Diagnostic settings are an important piece in the security puzzle, Microsoft highly recommendeds using them in Azure Security Center. To understand what the diagnostic settings are, you must understand the data source of the Monitor component in Azure.

        Azure Monitor is based on different logs and metrics collected from multiple resources. This can be analyzed using a set of tools provided in Azure Monitor.
        Azure Resources generate a significant amount of monitoring data which categorized into two types:

         * Metrics: Numerical values that describe some aspect of a system at a particular point of time
         * Logs:  Text that provides detailed diagnostic and auditing information for Azure resources

        Logs also can be categorized into two types:

         * Resource logs aren't collected until they're routed to a destination.
         * Activity logs exist on their own but can be routed to other locations.

        Each Azure resource requires its own diagnostic setting, which defines the following criteria:

         * Sources: The type of metric and log data to send to the destinations defined in the setting. The available types vary by resource type.
         * Destinations: One or more destinations to send to.

        A diagnostic setting controls how logs are exported. By default, logs are retained only for 90 days. By using diagnostic settings, we can export logs and store them for longer periods in order to analyze the activities and find any security-related issues.
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`, run this query:

          ```bash
          cnspec run azure -c "azure.subscription.monitor.diagnosticSettings != empty" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        Note: It is also possible to use a client secret for app connection instead of a certificate.

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        2. Run this query:

          ```mql
          azure.subscription.monitor.diagnosticSettings != empty
          ```
      remediation: |
        ### Microsoft Azure Portal

        To update using Microsoft Azure Portal:

        1. Log into Microsoft Azure Portal at https://portal.azure.com.
        2. Go to **Monitor**.
        3. Under **Settings**, select **Diagnostic settings**.
        4. Select a subscription and make sure there are diagnostic settings for that subscription.
  - uid: mondoo-azure-security-diagnostic-settings-essential-categories
    title: Ensure that diagnostic settings collect essential security categories
    impact: 80
    mql: |
      azure.subscription.monitor.diagnosticSettings != empty
      azure.subscription.monitor.diagnosticSettings.all(properties.logs.where(category == "Administrative").all(enabled == true))
      azure.subscription.monitor.diagnosticSettings.all(properties.logs.where(category == "Security").all(enabled == true))
      azure.subscription.monitor.diagnosticSettings.all(properties.logs.where(category == "Alert").all(enabled == true))
      azure.subscription.monitor.diagnosticSettings.all(properties.logs.where(category == "Policy").all(enabled == true))
    docs:
      desc: |
        Diagnostic settings control how the diagnostic logs are exported and what type of data is collected and exported to the defined destination.

        By default, no log categories are selected when a diagnostic setting is created. Capturing the appropriate log categories for the activities performed within your subscriptions provides proper insight into the environment and will help the SOC team in their analysis.

        We recommend, at a minimum, collecting these categories:

          * Security
          * Alert
          * Administrative
          * Policy
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`, run this query:

          ```bash
          cnspec run azure -c "azure.subscription.monitor.diagnosticSettings.all(properties.logs.where(category == "Administrative").all(enabled == true))" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          cnspec run azure -c "azure.subscription.monitor.diagnosticSettings.all(properties.logs.where(category == "Security").all(enabled == true))" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          cnspec run azure -c "azure.subscription.monitor.diagnosticSettings.all(properties.logs.where(category == "Alert").all(enabled == true))" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          cnspec run azure -c "azure.subscription.monitor.diagnosticSettings.all(properties.logs.where(category == "Policy").all(enabled == true))" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        Note: It is also possible to use a client secret for app connection instead of a certificate.

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        2. Run this query:

          ```mql
          azure.subscription.monitor.diagnosticSettings.all(properties.logs.where(category == "Administrative").all(enabled == true))
          azure.subscription.monitor.diagnosticSettings.all(properties.logs.where(category == "Security").all(enabled == true))
          azure.subscription.monitor.diagnosticSettings.all(properties.logs.where(category == "Alert").all(enabled == true))
          azure.subscription.monitor.diagnosticSettings.all(properties.logs.where(category == "Policy").all(enabled == true))
          ```
      remediation: |
        ### Microsoft Azure Portal

        To update using Microsoft Azure Portal:

        1. Log into Microsoft Azure Portal at https://portal.azure.com.
        2. Go to **Monitor** and select **Activity Log**.
        3. Select **Export Activity logs**.
        4. Select a subscription and select make sure there are diagnostic settings for **Administrative**, **Security**, and **Alert** data.
  - uid: mondoo-azure-security-disable-udp-virtualmachines
    title: Ensure direct UDP access to Azure virtual machines from the internet is restricted
    impact: 80
    mql: |
      allNsgUDP= azure.subscription.network.securityGroups.where(securityRules
        .where(
          properties.access == 'Allow'
            && direction == 'Inbound'
            && properties.protocol == /UDP/
            && properties.sourceAddressPrefix == /\*|0\.0\.0\.0|<nw>\/0|\/0|internet|any/
        )
      )
      allNsgUDP.all(properties.destinationPortRange != "*")
      allNsgUDP.all(securityRules.none(destinationPortRange.any(fromPort <= 53 && toPort >= 53)))
      allNsgUDP.all(securityRules.none(destinationPortRange.any(fromPort <= 123 && toPort >= 123)))
      allNsgUDP.all(securityRules.none(destinationPortRange.any(fromPort <= 161 && toPort >= 161)))
      allNsgUDP.all(securityRules.none(destinationPortRange.any(fromPort <= 389 && toPort >= 389)))
      allNsgUDP.all(securityRules.none(destinationPortRange.any(fromPort <= 1900 && toPort >= 1900)))
    docs:
      desc: |
        The main security issue with exposing UDP services over the internet is the broad attack surface that allows attackers to use reflection amplification attack against virtual machines.

        A reflection attack involves an attacker spoofing a target's IP address and sending a request for information, mainly using UDP. The server then responds by sending an answer. This is called "reflection" (using the same protocol in both directions) attack.

        The main issue is related to the way UDP protocol is designed. UDP is a connection-less protocol that does not validate source IP addresses. Unless the application layer protocol uses countermeasures, an attacker can easily forge the IP packet datagram to include an arbitrary source IP address.

        When many UDP packets have their source IP address forged to the victim IP address, the destination server (or amplifier) responds to the victim (instead of the attacker), creating a reflected denial-of-service (DoS) attack.

        Any server with open UDP ports can be targeted as a reflector. One way of protecting against this attack is to make sure well known UDP port services are not disclosed to the internet.

        Some application-layer protocols that rely on the UDP are:

          * Domain Name System (DNS)
          * Network Time Protocol (NTP)
          * Connection-less Lightweight Directory Access Protocol (CLDAP)
          * Character Generator Protocol (CharGEN)
          * Simple Service Discovery Protocol (SSDP)
          * BitTorrent
          * Simple Network Management Protocol version 2 (SNMPv2)
          * Portmap/Remote Procedure Call (RPC)
          * Network Basic Input/Output System (NetBIOS)
          * Trivial File Transfer Protocol (TFTP)
      audit: |
        __cnspec run__

        To audit Microsoft Azure with `cnspec run`, run this query:

          ```bash
          cnspec run azure -c "allNsgUDP= azure.subscription.network.securityGroups.where(securityRules
        .where(
          properties.access == 'Allow'
            && direction == 'Inbound'
            && properties.protocol == /UDP/
            && properties.sourceAddressPrefix == /\*|0\.0\.0\.0|<nw>\/0|\/0|internet|any/
        )
        )
        allNsgUDP.all(properties.destinationPortRange != "*")
        allNsgUDP.all(securityRules.none(destinationPortRange.any(fromPort <= 53 && toPort >= 53)))
        allNsgUDP.all(securityRules.none(destinationPortRange.any(fromPort <= 123 && toPort >= 123)))
        allNsgUDP.all(securityRules.none(destinationPortRange.any(fromPort <= 161 && toPort >= 161)))
        allNsgUDP.all(securityRules.none(destinationPortRange.any(fromPort <= 389 && toPort >= 389)))
        allNsgUDP.all(securityRules.none(destinationPortRange.any(fromPort <= 1900 && toPort >= 1900)))" --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>```

        Note: It is also possible to use a client secret for app connection instead of a certificate.

        __cnspec shell__

        To audit Microsoft Azure with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell azure --certificate-path <*.pem> --tenant-id <tenant_id> --client-id <client_id>
          ```

        2. Run this query:

          ```mql
        allNsgUDP= azure.subscription.network.securityGroups.where(securityRules
        .where(
          properties.access == 'Allow'
            && direction == 'Inbound'
            && properties.protocol == /UDP/
            && properties.sourceAddressPrefix == /\*|0\.0\.0\.0|<nw>\/0|\/0|internet|any/
        )
        )
        allNsgUDP.all(properties.destinationPortRange != "*")
        allNsgUDP.all(securityRules.none(destinationPortRange.any(fromPort <= 53 && toPort >= 53)))
        allNsgUDP.all(securityRules.none(destinationPortRange.any(fromPort <= 123 && toPort >= 123)))
        allNsgUDP.all(securityRules.none(destinationPortRange.any(fromPort <= 161 && toPort >= 161)))
        allNsgUDP.all(securityRules.none(destinationPortRange.any(fromPort <= 389 && toPort >= 389)))
        allNsgUDP.all(securityRules.none(destinationPortRange.any(fromPort <= 1900 && toPort >= 1900)))
          ```
      remediation: |
        Disable direct UDP access to your Azure virtual machines from the internet. There are other options you can use to access UDP-based services running on these virtual machines:
        * Point-to-site VPN
        * Site-to-site VPN
        * ExpressRoute
