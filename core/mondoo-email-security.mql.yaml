# Copyright (c) Mondoo, Inc.
# SPDX-License-Identifier: BUSL-1.1

policies:
  - uid: mondoo-email-security
    name: Mondoo Email Security
    version: 1.1.0
    license: BUSL-1.1
    tags:
      mondoo.com/category: security
      mondoo.com/platform: host
    authors:
      - name: Mondoo, Inc
        email: hello@mondoo.com
    docs:
      desc: |
        This policy bundle verifies best practices for authenticating email messages using security protocols such as Sender Policy Framework (SPF), Domain Keys Identified Mail (DKIM), and Domain-based Message Authentication, Reporting & Conformance (DMARC).

        ### Running the Policy

        ```bash
        cnspec scan host mondoo.com -f mondoo-email-security.mql.yaml
        ```

         ## Join the community!

        Our goal is to build policies that are simple to deploy, accurate, and actionable.

        If you have any suggestions for how to improve this policy, or if you need support, [join the community](https://github.com/orgs/mondoohq/discussions) in GitHub Discussions.
    groups:
      - title: Email Security
        filters: |
          asset.platform == "host"
          dns.mx != empty
        checks:
          - uid: mondoo-email-security-txt-record
          - uid: mondoo-email-security-a-record
          - uid: mondoo-email-security-dmarc-ruf
          - uid: mondoo-email-security-dmarc-rua
          - uid: mondoo-email-security-dmarc-policy
          - uid: mondoo-email-security-dmarc-version
          - uid: mondoo-email-security-dmarc
          - uid: mondoo-email-security-spf
          - uid: mondoo-email-security-single-spf
          - uid: mondoo-email-security-spf-length
          - uid: mondoo-email-security-spf-whitespaces
          - uid: mondoo-email-security-spf-fail
          - uid: mondoo-email-security-spf-dns-record
          - uid: mondoo-email-security-dkim
          - uid: mondoo-email-security-reverse-ip-ptr-record-set
queries:
  - uid: mondoo-email-security-reverse-ip-ptr-record-set
    title: Ensure Reverse IP Lookup PTR record is set (DNS Forward confirmed)
    mql: |
      reverseDNSDomain =
        dns.params.A.rData.first.split(".")[3] + "."
          + dns.params.A.rData.first.split(".")[2] + "."
          +  dns.params.A.rData.first.split(".")[1] + "."
          +  dns.params.A.rData.first.split(".")[0]
          + ".in-addr.arpa"
      dns(reverseDNSDomain).params.PTR.rData.any(_.contains(domainName.fqdn))
    docs:
      desc: |
        This check ensures that reverse DNS (rDNS) records are properly configured for IPv4 addresses.

        **Why this matters**

        Reverse DNS queries are used to map an IP address to its corresponding domain name. Properly configured rDNS records are essential for several reasons:

        - **Email deliverability**: Many email servers perform reverse DNS lookups to verify the authenticity of the sending server. Without a valid rDNS record, emails may be flagged as spam or rejected.
        - **Authentication**: Reverse DNS combined with forward DNS (FCrDNS) creates a form of authentication, ensuring that the IP address maps to a domain name and vice versa.
        - **Compliance with best practices**: Major email providers, such as Google, require valid rDNS records for sending IP addresses to ensure proper email handling.
        - **Improved diagnostics**: Proper rDNS records make it easier to identify and troubleshoot issues related to network traffic and server configurations.

        By ensuring that rDNS records are correctly configured, organizations can improve email deliverability, enhance security, and comply with industry best practices for DNS configuration.
      audit: Run the `dig -t PTR <special-reverse-domain>` command and verify that the it points to your mail domain.
      remediation: |
        Set up valid reverse DNS (rDNS) records for the IP addresses of your outbound mail servers. Reverse DNS ensures that when a receiving mail server performs a lookup on the sending IP, it resolves to a fully qualified domain name (FQDN) associated with your organization’s domain—this helps validate the authenticity of your emails and reduces the likelihood of your messages being marked as spam.

        For example, if mail.lunalectric.com sends email from the IP address 123.123.123.123, the reverse DNS for that IP should resolve to a name within your domain, such as mail.lunalectric.com.

        Steps to configure rDNS:
          1.	Identify the public IP addresses of your mail servers.
          2.	Contact your hosting provider or DNS host (whoever controls the IP range) to request that a PTR (Pointer) record be set for each IP.
          3.	Ensure each PTR record resolves to a valid FQDN like mail.lunalectric.com.
          4.	Confirm that the forward DNS for mail.lunalectric.com also resolves back to 123.123.123.123 to establish a valid forward-confirmed reverse DNS (FCrDNS) match.

        You can verify the rDNS setup using tools like dig or nslookup:

        ```bash
        nslookup 123.123.123.123
        ```

        A properly configured setup will show:

        ```
        123.123.123.123.in-addr.arpa	name = mail.lunalectric.com.
        ```
    refs:
      - url: https://en.wikipedia.org/wiki/Reverse_DNS_lookup
        title: Reverse DNS Lookup
      - url: https://en.wikipedia.org/wiki/Forward-confirmed_reverse_DNS
        title: Forward-confirmed reverse DNS
      - url: https://support.google.com/a/answer/81126?hl=en#ip
        title: Google Email sender guidelines - IP Addresses

  - uid: mondoo-email-security-txt-record
    title: Domain Apex should have a TXT record
    mql: dns.records.where(type == "TXT") != empty
    docs:
      desc: |
        This check ensures that a domain's apex has a TXT record configured.

        **Why this matters**

        TXT records are versatile DNS records used to store text-based information about a domain. They are commonly used for purposes such as email authentication (e.g., SPF, DKIM, DMARC), domain verification, and other metadata.

        - **Email authentication**: TXT records are essential for implementing SPF, DKIM, and DMARC protocols, which help prevent email spoofing and phishing attacks.
        - **Domain verification**: Many services, such as Google Workspace or Microsoft 365, require TXT records to verify domain ownership.
        - **Security and compliance**: Properly configured TXT records contribute to a secure and compliant DNS setup.

        By ensuring that a TXT record exists at the domain apex, organizations can leverage these benefits to enhance email security, verify domain ownership, and comply with best practices for DNS configuration.
      audit: Run the `dig -t TXT <domain>` command and verify that the SPF record is set.
      remediation: |
        Add a TXT record to your DNS zone file.

        You can verify that the TXT record was added correctly using the following command:

        ```bash
        dig +short TXT lunalectric.com
        ```

        The output should show the TXT record you added.
    refs:
      - url: https://en.wikipedia.org/wiki/TXT_record
        title: TXT Record
  - uid: mondoo-email-security-a-record
    title: Domain Apex should have an anchor (A) record
    mql: dns.records.where(type == "A") != empty
    docs:
      desc: |
        This check ensures that a domain's apex anchor (A) record is properly configured.

        **Why this matters**

        A records are essential for mapping a domain name to an IP address, enabling users to access websites and services hosted on the domain. Properly configured A records provide several benefits:

        - **Improved accessibility**: Ensures that users can reliably access your website or service using the domain name.
        - **Compliance with DNS standards**: Properly configured A records align with DNS best practices, reducing the risk of resolution issues.
        - **Enhanced flexibility**: Allows for easier management of server changes, such as migrations or load balancing.
        - **Security and reliability**: Ensures that the domain resolves to a trusted and intended IP address, reducing the risk of misconfigurations or malicious redirections.

        By ensuring that a domain's apex A record is set, organizations can maintain a reliable and secure DNS configuration.
      audit: |
        Run the `dig -t A <domain>` command and verify that there is an A record.

        Example output:
        ```
        lunalectric.com.  300 IN A 123.123.123.123
        ```
      remediation: |
        Add an A record to your DNS zone file. If you're not hosting a dedicated service on the root domain, consider pointing the A record to a web server that redirects visitors to your main corporate website.

        You an verify that an A record exists for your domain (e.g., lunalectric.com), you can run the following command:

        ```bash
        dig +short A lunalectric.com
        ```

        The output should show the IP address of the server that hosts your website. If you see an IP address, it means the A record is set up correctly. If you see "no answer" or "NXDOMAIN," it means the A record is not set up.
    refs:
      - url: https://www.easyredir.com/blog/what-is-an-apex-domain/
        title: A Record
  - uid: mondoo-email-security-spf
    title: Ensure SPF record is set
    mql: |
      dns.params['TXT']['rData'].one(/v=spf1/)
    docs:
      desc: |
        This check ensures that a domain's Sender Policy Framework (SPF) record is properly configured.

        **Why this matters**

        Sender Policy Framework (SPF) is a method of preventing email spoofing by allowing the owner of a domain to publish a list of mail servers that are authorized to send email from that domain. Properly configured SPF records provide several benefits:

        - **Email authentication**: Ensures that only authorized mail servers can send emails on behalf of your domain, reducing the risk of spoofing and phishing attacks.
        - **Improved deliverability**: Helps email providers identify legitimate emails, reducing the likelihood of your messages being marked as spam.
        - **Compliance with best practices**: Aligns with industry standards for email security, enhancing trust in your domain's communications.
        - **Enhanced security**: Protects your domain's reputation by preventing unauthorized use for malicious purposes.

        By ensuring that SPF records are correctly configured, organizations can improve email security, enhance deliverability, and comply with email authentication best practices.
      audit: |
        Run the `dig -t TXT <domain>` command and verify that the SPF record is set.

        Example output:
        ```
        lunalectric.com.  300 IN TXT "v=spf1 include:_spf.google.com ~all"
        ```
      remediation: |
        Add a TXT record to your DNS zone file with the following format:

        ```dns
        <domain> IN TXT "v=spf1 include:_spf.google.com ~all"
        ```

        You can verify that the SPF record was added correctly using the following command:

        ```bash
        dig +short TXT lunalectric.com
        ```
        The output should show the SPF record you added. If you see "no answer" or "NXDOMAIN," it means the SPF record is not set up.
    refs:
      - url: https://en.wikipedia.org/wiki/Sender_Policy_Framework
        title: SPF Record
  - uid: mondoo-email-security-single-spf
    title: Ensure there are not multiple SPF records
    mql: dns.params['TXT']['rData'].where(/v=spf1/).length <= 1
    docs:
      desc: A domain should have only one Sender Policy Framework (SPF) record.
      audit: Run the `dig -t TXT <domain>` command and verify that there is only one SPF record
      remediation: |
        Remove all but one SPF record from your DNS zone file.

        You can verify that the SPF record was added correctly using the following command:

        ```bash
        dig +short TXT lunalectric.com
        ```

        The output should show the single SPF record you retained. If you see "no answer" or "NXDOMAIN," it means the SPF record is not set up.
    refs:
      - url: https://en.wikipedia.org/wiki/Sender_Policy_Framework
        title: SPF Record
  - uid: mondoo-email-security-spf-length
    title: Ensure SPF record is not too long
    mql: dns.params['TXT']['rData'].where(/v=spf1/).all(_.length <= 255)
    docs:
      desc: The Sender Policy Framework (SPF) record should not be longer than 255 characters.
      audit: Run the `dig -t TXT <domain>` command and verify that the SPF record is not longer than 255 characters
      remediation: |
        Remove some of the entries from your SPF record.

        You can verify that the SPF record using the following command:

        ```bash
        dig +short TXT lunalectric.com
        ```
    refs:
      - url: https://datatracker.ietf.org/doc/html/rfc7208#section-3.3
        title: Sender Policy Framework (SPF)for Authorizing Use of Domains in Email, Version 1
  - uid: mondoo-email-security-spf-whitespaces
    title: Ensure SPF record does not contain any excess whitespace
    mql: dns.params['TXT']['rData'].where(/v=spf1/).where(/\s{2,}/) == empty
    docs:
      desc: The Sender Policy Framework (SPF) record should not contain any unnecessary whitespace.
      audit: Run the `dig -t TXT <domain>` command and verify that the SPF record does not contain any whitespace
      remediation: |
        Remove all excess whitespace from your SPF record.

        You can verify that the SPF record using the following command:

        ```bash
        dig +short TXT lunalectric.com
        ```
    refs:
      - url: https://en.wikipedia.org/wiki/Sender_Policy_Framework
        title: SPF Record
  - uid: mondoo-email-security-spf-fail
    title: SPF should be set to fail or soft fail all
    mql: |
      dns.params['TXT']['rData'].where(/v=spf1/).all(/all/)
    docs:
      desc: The Sender Policy Framework (SPF) record should be set to soft fail all.
      audit: Run the `dig -t TXT <domain>` command and verify that the SPF record is set to fail or soft fail all
      remediation: |
        The SPF record should end with all.

        You can verify that the SPF record using the following command:

        ```bash
        dig +short TXT lunalectric.com
        ```
    refs:
      - url: https://www.m3aawg.org/sites/default/files/m3aawg-email-authentication-recommended-best-practices-09-2020.pdf
        title: M3AAWG Email Authentication Recommended Best Practices (2020)
  - uid: mondoo-email-security-spf-dns-record
    title: Do not use deprecated SPF DNS Record Type
    mql: dns.records.where(type == "SPF") == empty
    docs:
      desc: The Sender Policy Framework (SPF) record should not use the deprecated SPF DNS Record Type.
      audit: Run the `dig SPF <domain>` command and verify that the SPF record does not use the deprecated SPF DNS Record Type
      remediation: |
        Remove the deprecated SPF DNS Record Type from your SPF record.

        You can verify that the SPF record using the following command:

        ```bash
        dig +short TXT lunalectric.com
        ```
    refs:
      - url: https://en.wikipedia.org/wiki/Sender_Policy_Framework#DNS_SPF_Records
        title: DNS SPF Records
  - uid: mondoo-email-security-dmarc
    title: Ensure DMARC DNS entry exists
    mql: dns("_dmarc."+domainName.fqdn).records != empty
    docs:
      desc: DMARC is a scalable mechanism by which a mail-originating organization can express domain-level policies and preferences for message validation, disposition, and reporting that a mail-receiving organization can use to improve mail handling.
      audit: Run the `dig _dmarc.<domain>` command and verify that the DMARC DNS entry exists
      remediation: |
        Add the _dmarc entry to you DNS zone file.
    refs:
      - url: https://www.m3aawg.org/sites/default/files/m3aawg-email-authentication-recommended-best-practices-09-2020.pdf
        title: M3AAWG Email Authentication Recommended Best Practices (2020)
      - url: https://en.wikipedia.org/wiki/DMARC
        title: DMARC
  - uid: mondoo-email-security-dmarc-version
    title: Ensure DMARC version 1
    mql: dns("_dmarc."+domainName.fqdn).params['TXT']['rData'].all(/v=DMARC1/)
    docs:
      desc: Set the DMARC version in the TXT record to 1.
      audit: Run the `dig _dmarc.<domain>` command and verify that the DMARC TXT record contains `v=DMARC1`.
      remediation: |
        Add a TXT record to your DNS zone file with the following format:

        ```dns
        <domain> IN TXT "v=DMARC1; p=reject; pct=100; rua=mailto:lunalectric.com; ruf=mailto:lunalectric.com; fo=1;"
        ```

        You can verify that the DMARC record was added correctly using the following command:

        ```bash
        dig +short TXT _dmarc.lunalectric.com
        ```

        The output should show the DMARC record you added. If you see "no answer" or "NXDOMAIN," it means the DMARC record is not set up.
    refs:
      - url: https://www.m3aawg.org/sites/default/files/m3aawg-email-authentication-recommended-best-practices-09-2020.pdf
        title: M3AAWG Email Authentication Recommended Best Practices (2020)
      - url: https://en.wikipedia.org/wiki/DMARC
        title: DMARC
  - uid: mondoo-email-security-dmarc-policy
    title: Ensure DMARC policy is set to quarantine or reject
    mql: dns("_dmarc."+domainName.fqdn).params['TXT']['rData'].all(/reject|quarantine/)
    docs:
      desc: In the DMARC implementation, you can tell email receivers how to handle email messages that fail authentication and protect your domain from spoofing and other phishing attacks. There are three DMARC policies (Monitoring Policy, Quarantine Policy, Reject Policy) that you can implement.
      audit: Run the `dig TXT _dmarc.<domain>` command and verify that the DMARC policy quarantine or reject is configured.
      remediation: |
        Add a TXT record to your DNS zone file with the following format:

        ```dns
        <domain> IN TXT "v=DMARC1; p=reject; pct=100; rua=mailto:lunalectric.com; ruf=mailto:lunalectric.com; fo=1;"
        ```

        You can verify that the DMARC record was added correctly using the following command:

        ```bash
        dig +short TXT _dmarc.lunalectric.com
        ```
        The output should show the DMARC record you added. If you see "no answer" or "NXDOMAIN," it means the DMARC record is not set up.
    refs:
      - url: https://www.m3aawg.org/sites/default/files/m3aawg-email-authentication-recommended-best-practices-09-2020.pdf
        title: M3AAWG Email Authentication Recommended Best Practices (2020)
      - url: https://en.wikipedia.org/wiki/DMARC
        title: DMARC
  - uid: mondoo-email-security-dmarc-rua
    title: Ensure DMARC RUA tag
    mql: dns("_dmarc."+domainName.fqdn).params['TXT']['rData'].all(/rua=mailto/)
    docs:
      desc: |
        Receiving email servers regularly send DMARC Aggregate Reports (RUA) to all domains that have an adequately implemented DMARC policy. These reports contain encrypted aggregate statistics in XML format and are sent to the email addresses specified in the RUA tag of the DMARC record. In simpler terms, the RUA tag is used to specify one or more email addresses where you want to receive DMARC Aggregate Reports.
      audit: Run the `dig TXT _dmarc.<domain>` command and verify that the DMARC RUA tag is configured.
      remediation: |
        Add a TXT record to your DNS zone file with the following format:

        ```dns
        <domain> IN TXT "v=DMARC1; p=reject; pct=100; rua=mailto:lunalectric.com; ruf=mailto:lunalectric.com; fo=1;"
        ```

        You can verify that the DMARC record was added correctly using the following command:

        ```bash
        dig +short TXT _dmarc.lunalectric.com
        ```
        The output should show the DMARC record you added. If you see "no answer" or "NXDOMAIN," it means the DMARC record is not set up.
    refs:
      - url: https://www.m3aawg.org/sites/default/files/m3aawg-email-authentication-recommended-best-practices-09-2020.pdf
        title: M3AAWG Email Authentication Recommended Best Practices (2020)
      - url: https://en.wikipedia.org/wiki/DMARC
        title: DMARC
  - uid: mondoo-email-security-dmarc-ruf
    title: Ensure DMARC RUF tag
    mql: dns("_dmarc."+domainName.fqdn).params['TXT']['rData'].all(/ruf=mailto/)
    docs:
      desc: |
        The RUF (or DMARC Failure or Forensic Report) tag was designed to inform domain administrators when emails fail SPF, DKIM, and DMARC authentication checks. The report includes sensitive details about the email, such as the header, subject, URLs, and attachments. However, many organizations prefer not to request RUF reports due to privacy and compliance concerns. The main goal is to comply with privacy laws and prevent data breaches.
      audit: Run the `dig TXT _dmarc.<domain>` command and verify that the DMARC RUF tag is configured.
      remediation: |
        Add a TXT record to your DNS zone file with the following format:

        ```dns
        <domain> IN TXT "v=DMARC1; p=reject; pct=100; rua=mailto:lunalectric.com; ruf=mailto:lunalectric.com; fo=1;"
        ```

        You can verify that the DMARC record was added correctly using the following command:

        ```bash
        dig +short TXT _dmarc.lunalectric.com
        ```

        The output should show the DMARC record you added. If you see "no answer" or "NXDOMAIN," it means the DMARC record is not set up.
    refs:
      - url: https://www.m3aawg.org/sites/default/files/m3aawg-email-authentication-recommended-best-practices-09-2020.pdf
        title: M3AAWG Email Authentication Recommended Best Practices (2020)
  - uid: mondoo-email-security-dkim
    title: Ensure DKIM is configured
    props:
      - uid: mondooEmailSecurityDkimSelectors
        title: Define a list of valid DKIM selectors
        mql: |
          [
            "google",
            "selector1",
            "selector2",
            "k1",
            "dkim",
            "mx",
            "mailjet"
          ]
    mql: |
      props.mondooEmailSecurityDkimSelectors.contains(dns(_+"._domainkey."+domainName.fqdn).params['TXT']['rData'].first == /p=/)
      props.mondooEmailSecurityDkimSelectors.contains(dns(_+"._domainkey."+domainName.fqdn).params['TXT']['rData'].first == /k=rsa/)
    docs:
      desc: |
        A DKIM record is a specialized DNS TXT record that stores the public key used to verify an email's authenticity.
      audit: Run the `dig TXT <selector>._domainkey.<domain>` command and verify that the public key is available.
      remediation: |
        Add a TXT record to your DNS zone file with the following format:

        ```dns
        <selector>._domainkey.<domain> IN TXT "v=DKIM1; p=76E629F05F9EF6658533333F5ADE69A240657AB2FC3"
        ```

        You can verify that the DKIM record was added correctly using the following command:

        ```bash
        dig +short TXT <selector>._domainkey.lunalectric.com
        ```
        The output should show the DKIM record you added. If you see "no answer" or "NXDOMAIN," it means the DKIM record is not set up.
    refs:
      - url: https://www.m3aawg.org/sites/default/files/m3aawg-email-authentication-recommended-best-practices-09-2020.pdf
        title: M3AAWG Email Authentication Recommended Best Practices (2020)
      - url: https://en.wikipedia.org/wiki/DomainKeys_Identified_Mail
        title: DomainKeys Identified Mail
