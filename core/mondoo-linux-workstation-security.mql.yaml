policies:
  - uid: mondoo-linux-workstation-security
    name: Linux Workstation Security by Mondoo
    version: 0.1.0
    authors:
      - name: Mondoo, Inc
        email: hello@mondoo.com
    props:
      kexAlgos: ""
      macAlgos: ""
      sshdCiphers: ""
    scoring_system: 2
    specs:
      - title: Secure Boot
        asset_filter:
          query: |
            platform.family.contains(_ == 'linux')
        scoring_queries:
          mondoo-client-linux-security-baseline-permissions-on-bootloader-config-are-configured: null
          mondoo-client-linux-security-baseline-secure-boot-is-enabled: null
        data-queries:
          mondoo-client-linux-security-baseline-permissions-on-bootloader-config-metadata: null
          mondoo-client-linux-security-baseline-secure-boot-is-enabled-metadata: null
      - title: Disk encryption
        asset-filter:
          query: |
            platform.family.contains(- == 'linux')
        scoring-queries:
          mondoo-client-linux-security-baseline-root-and-home-are-encrypted: null
          mondoo-client-linux-security-baseline-aes-encryption-algorithmen: null
        data-queries:
          mondoo-client-linux-security-baseline-disk-encrpytion-metadata: null
          mondoo-client-linux-security-baseline-aes-encryption-algo-metadata: null
      - title: BIOS Firmware up-to-date
        asset_filter:
          query: |
            platform.family.contains(_ == 'linux')
            package('fwupd').installed
        scoring_queries:
          mondoo-client-linux-security-baseline-bios-uptodate: null
        data_queries:
          mondoo-client-linux-security-baseline-bios-data: null
    docs:
      desc: |
        ## Overview
        This policy provides prescriptive guidance for establishing a secure configuration posture for Client Linux systems running on x86 and x64 platforms.

        Commands and scripts are provided which should work on most distributions however some translation to local styles may be required in places.

        Where possible Red Hat, Debian, and SUSE derivative styles are provided. Many lists are included including filesystem types, services, clients, and network protocols. Not all items in these lists are guaranteed to exist on all distributions and additional similar items may exist, which should be considered in addition to those explicitly mentioned. The guidance within broadly assumes that operations are being performed as the root user. Operations performed using sudo instead of the root user may produce unexpected results, or fail to make the intended changes to the system. Non-root users may not be able to access certain areas of the system, especially after remediation has been performed. It is advisable to verify root users path integrity and the integrity of any programs being run before execution of commands and scripts included in this benchmark.

        ### Intended Audience

        This benchmark is intended for system and application administrators, security specialists, auditors, help desk, and platform deployment personnel who plan to develop, deploy, assess, or secure solutions that incorporate Linux on x86 or x64 platforms.

        ## Local scan

        Local scan refer to scans of files and operating systems where `cnspec` is installed.

        To scan the `localhost` against this policy:

        ```bash
        cnspec scan local
        ```

        ## Remote scan

        Remote scans use native transports in `cnspec` to provide on demand scan results without the need to install any agents, or integration.

        For a complete list of native transports run:

        ```bash
        cnspec scan --help
        ```

        ### Prerequisites

        Remote scans of Linux hosts requires authentication such as SSH keys.

        ### Scan a remote Linux host (SSH authentication)

        ```bash
        cnspec scan ssh <user>@<IP_ADDRESS> -i /path/to/ssh_key
        ```

        ### Scan AWS EC2 instance (AWS SSM)

        ```bash
        cnspec scan ssh <user>@<IP_ADDRESS> -i /path/to/ssh_key
        ```

        ## Join the community!

        Our goal is to build policies that are simple to deploy, accurate, and actionable.

        If you have any suggestions on how to improve this policy, or if you need support, [join the community](https://github.com/orgs/mondoohq/discussions) in GitHub Discussions.
props:
  - uid: kexAlgos
    title: Define the hardened key exchange algorithms for all SSH configurations
    query: |
      return ["ecdh-sha2-nistp256","ecdh-sha2-nistp384","ecdh-sha2-nistp521","diffie-hellman-group-exchange-sha256",
           "diffie-hellman-group16-sha512","diffie-hellman-group18-sha512","diffie-hellman-group14-sha256","curve25519-sha256","curve25519-sha256@libssh.org"]
  - uid: macAlgos
    title: Define the accepted MAC algorithms
    query: |
      return ["umac-64-etm@openssh.com","umac-128-etm@openssh.com","hmac-sha2-256-etm@openssh.com","hmac-sha2-512-etm@openssh.com",
              "hmac-sha1-etm@openssh.com","umac-64@openssh.com","umac-128@openssh.com","hmac-sha2-256","hmac-sha2-512","hmac-sha1","hmac-sha1-etm@openssh.com"]
  - uid: sshdCiphers
    title: Define the hardened ciphers for all SSH configurations
    query: |
      return ["chacha20-poly1305@openssh.com", "aes256-gcm@openssh.com", "aes128-gcm@openssh.com", "aes256-ctr", "aes192-ctr", "aes128-ctr"]
queries:
  - uid: mondoo-client-linux-security-baseline-permissions-on-bootloader-config-are-configured
    title: Ensure permissions on bootloader config are configured
    severity: 90
    docs:
      desc: |-
        The grub files contain information on boot settings and passwords for unlocking boot options.

        If the system uses UEFI, /boot/efi is a vfat filesystem. The vfat filesystem itself doesn't have the concept of permissions but can be mounted under Linux with whatever permissions desired.
      remediation: |-
        Run the following commands to set ownership and permissions on your grub configuration file(s):

        ```
        # chown root:root /boot/grub2/grub.cfg
        # chmod og-rwx /boot/grub2/grub.cfg

        # chown root:root /boot/grub2/grubenv
        # chmod og-rwx /boot/grub2/grubenv

        # chown root:root /boot/grub2/user.cfg
        # chmod og-rwx /boot/grub2/user.cfg
        ```

        \*\*OR If the system uses UEFI, edit `/etc/fstab` and add the `fmask=0077` , `uid=0` , and `gid=0` options:

        _Example:_

        ```
        <device> /boot/efi vfat defaults,umask=0027,fmask=0077,uid=0,gid=0 0 0
        ```

        _Note: This may require a re-boot to enable the change_
    query: |
      if (file("/boot/grub/grub.cfg").exists) {
        file("/boot/grub/grub.cfg") {
          user.name == 'root'
          group.name == 'root'
          permissions.group_readable == false
          permissions.group_writeable == false
          permissions.group_executable == false
          permissions.other_readable == false
          permissions.other_writeable == false
          permissions.other_executable == false
        }
      }

      if (file("/boot/grub/menu.lst").exists) {
        file("/boot/grub/menu.lst") {
          user.name == 'root'
          group.name == 'root'
          permissions.group_readable == false
          permissions.group_writeable == false
          permissions.group_executable == false
          permissions.other_readable == false
          permissions.other_writeable == false
          permissions.other_executable == false
        }
      }

      if (file("/boot/grub2/grub.cfg").exists) {
         file("/boot/grub2/grub.cfg") {
          user.name == 'root'
          group.name == 'root'
          permissions.group_readable == false
          permissions.group_writeable == false
          permissions.group_executable == false
          permissions.other_readable == false
          permissions.other_writeable == false
          permissions.other_executable == false
         }
       }

      if (file("/boot/grub/user.cfg").exists) {
        file("/boot/grub/user.cfg") {
          user.name == 'root'
          group.name == 'root'
          permissions.group_readable == false
          permissions.group_writeable == false
          permissions.group_executable == false
          permissions.other_readable == false
          permissions.other_writeable == false
          permissions.other_executable == false
        }
      }

      if (file("/boot/grub2/user.cfg").exists) {
         file("/boot/grub2/user.cfg") {
          user.name == 'root'
          group.name == 'root'
          permissions.group_readable == false
          permissions.group_writeable == false
          permissions.group_executable == false
          permissions.other_readable == false
          permissions.other_writeable == false
          permissions.other_executable == false
         }
       }
      if(mount.list.where( fstype == 'vfat' && path == /boot/) != []) {
        mount.list.where( fstype == 'vfat' && path == /boot/) {
          options['fmask'] == "0077"
        }
      }
  - uid: mondoo-client-linux-security-baseline-secure-boot-is-enabled
    title: Ensure Secure Boot is enabled
    severity: 90
    docs:
      desc: |
        Secure Boot is required in order to ensure that the booting kernel hasn't been modified. It needs to be enabled in your computer's firmware and be supported by your Linux distribution.
      audit: |
        Run the `mokutil --sb-state` command and check whether it prints `SecureBoot enabled`
      remediation: |
        Enable Secure Boot in your computer's firmware and use a Linux distribution supporting Secure Boot
    query: |
      command('mokutil --sb-state').stdout.downcase.contains('secureboot enabled')
  - uid: mondoo-client-linux-security-baseline-root-and-home-are-encrypted
    title: Ensure / and /home are encrypted
    severity: 90
    docs:
      desc: |
        It is mandatory to encrypt the / and /home partitions in case of theft
      audit: Get the device names serving `/` and `root` by running `df`, check the device status using `dmsetup status`
    query: |-
      mount.list.where( path == '/') {
        lsblkDevice = parse.json(content: command('lsblk -a --json -s ' + _.device).stdout).params
        lsblkDevice['blockdevices'][0]['children'][0]['type'] == 'crypt' || lsblkDevice['blockdevices'][0]['type'] == 'crypt'
      }
      if( mount.list.where( path == /home/) != [] ) {
        mount.list.where( path == '/home') {
          lsblkDevice = parse.json(content: command('lsblk -a --json -s ' + _.device).stdout).params
          lsblkDevice['blockdevices'][0]['children'][0]['type'] == 'crypt' || lsblkDevice['blockdevices'][0]['type'] == 'crypt'
        }
      }
  - uid: mondoo-client-linux-security-baseline-aes-encryption-algorithmen
    title: Ensure AES encryption algorithm is used
    severity: 90
    docs:
      desc: |
        It is mandatory to encrypt the / and /home with the aes-xts-plain64 or aes-xts-benbi algorithm.
      audit: |
        Run the `cryptsetup --dump-json-metadata luksDump /dev/disk/by-uuid/<device uuid>` command and check whether encryption is used.
      remediation: |
        Encrypt you complete disk with the following command:

        ```
        cryptsetup luksFormat --type luks2 --cipher aes-xts-benbi --key-size 512 --hash sha512 --iter-time 5000 --label <label> /dev/disk/by-partlabel/<device>
        ```
    query: |
      lsblk.list.where( fstype == /crypt/) { parse.json(content: command('cryptsetup --dump-json-metadata luksDump /dev/disk/by-uuid/' + uuid).stdout).params['segments']['0']['encryption'].contains('aes-xts') }
  - uid: mondoo-client-linux-security-baseline-bios-uptodate
    title: Ensure system BIOS is running the latest available version
    severity: 60
    docs:
      desc: |
        The system BIOS should be on the latest available version. This check depends on fwupdmgr to be available on the system.
        Warning: The fwupd daemon will try to connect to the Internet automatically to receive the lastest updates.
      audit: |
        Runs the `fwupdmgr get-updates -y --json` command to find if the BIOS already running the latest version.
      remediation: |
        Make sure to keep your BIOS firmware up-to-date by running the following commands:

        1.
        ```
        fwupdmgr get-updates
        ```

        2.
        ```
        fwupdmgr update
        ```

        Alternatively, use your manufacturer's manual update process.
    query: |
      parse.json(content: command('fwupdmgr get-updates -y --json').stdout).params["Devices"].length == 0
  - uid: mondoo-client-linux-security-baseline-bios-data
    title: Gather BIOS Information
    query: machine.bios { version vendor releaseDate }
  - uid: mondoo-client-linux-security-baseline-disk-encrpytion-metadata
    title: Gather metadata on disk encryption
    query: |
      command('lsblk').stdout
  - uid: mondoo-client-linux-security-baseline-permissions-on-bootloader-config-metadata
    title: Gather metadata on current bootloader config
    query: |
      if (file("/boot/grub/grub.cfg").exists) file("/boot/grub/grub.cfg") {dirname basename permissions}
      if (file("/boot/grub2/grub.cfg").exists) file("/boot/grub2/grub.cfg") {dirname basename permissions}
      if (file("/boot/grub/user.cfg").exists) file("/boot/grub/user.cfg") {dirname basename permissions}
      if (file("/boot/grub2/user.cfg").exists) file("/boot/grub2/user.cfg") {dirname basename permissions}
  - uid: mondoo-client-linux-security-baseline-secure-boot-is-enabled-metadata
    title: Print out the results of 'mokutil --sb-state' for troubleshooting purposes
    query: |
      command('mokutil --sb-state').stdout
  - uid: mondoo-client-linux-security-baseline-aes-encryption-algo-metadata
    title: Print out the ciphersuite used for disk encryption
    query: "lsblk.list.where( fstype == /crypt/) {name} { command ('cryptsetup luksDump /dev/' + name).stdout }      \n"
