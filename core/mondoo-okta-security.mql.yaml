policies:
  - uid: mondoo-okta-security
    name: Okta Organization Security by Mondoo
    version: 1.0.0
    scoring_system: 2
    authors:
      - name: Mondoo, Inc
        email: hello@mondoo.com
    tags:
      mondoo.com/platform: okta-org,saas
      mondoo.com/category: security
    docs:
      desc: |
        # Overview

        The Mondoo Okta Security policy bundle provides security recommendations for Okta organizations.

        ## About remote scanning

        Remote scans with cnspec provide on demand security assessments of infrastructure and services without the need to install any agents or integrations. cnspec comes with a growing list of providers to connect and scan local and remote targets. 

        A complete list of providers can be found by running the following command: 
        
        ```bash
        cnspec scan --help
        ``` 

        ### cnspec Okta provider
        
        This policy uses the `okta` provider to authenticate with Okta's API in order to remotely scan an Okta organization. Additional information on the `okta` provider can be found by running the following command: 
        
        ```bash
        cnspec scan okta --help
        ```
      
        ## Configuring the Okta provider

        The `okta` provider for cnspec requires an API token to authenticate and run scans. 

        ### Create an API token

        To create an API token, see [Create an API token](https://developer.okta.com/docs/guides/create-an-api-token/main/) on Okta's documentation site.
        
        ### Configure a OKTA_TOKEN environment variable

        You supply your API token to cnspec using the `OKTA_TOKEN` environment variable. 

        #### Linux / macOS

        ```bash
        export OKTA_TOKEN=<OKTA_TOKEN>
        ```

        #### Windows 

        ```powershell
        $Env:OKTA_TOKEN = "<OKTA_TOKEN>"
        ```        

        ## Scan an Okta organization
        
        To scan the configuration of an Okta organization all together:  

        ```bash
        cnspec scan okta --organization DOMAIN.okta.com --token $OKTA_TOKEN  --policy-bundle mondoo-okta-security.mql.yaml
        ```

        ## Join the community!

        Our goal is to build policies that are simple to deploy, accurate, and actionable. 
        
        If you have any suggestions on how to improve this policy, or if you need support, [join the community](https://github.com/orgs/mondoohq/discussions) in GitHub Discussions.
    specs:
      - asset_filter:
          query: asset.platform == "okta" || asset.platform == "okta-org"
        scoring_queries:
          mondoo-okta-security-okta-mfa-access: null
          mondoo-okta-security-okta-enforce-session-lifetime: null
          mondoo-okta-security-okta-disable-persist-cookies: null
          mondoo-okta-security-okta-auth-openid-saml: null
          mondoo-okta-security-okta-users-unlock: null
          mondoo-okta-security-okta-auth-swa-critical: null
          mondoo-okta-security-okta-mfa-sign-in: null
queries:
  - uid: mondoo-okta-security-okta-mfa-access
    title: Ensure MFA is active for everybody accessing Okta platform
    severity: 100
    docs:
      desc: |
        This control checks that the MFA has been enabled for all users in the Okta tenant. 
      audit: |
        __cnspec run__

        To audit Okta `cnspec run`:

        Run the following query:

          ```mql
          cnspec run okta -c "okta.policies.signOn.all(_.rules.all(status == "ACTIVE"))" --organization <org-name> --token <OKTA_TOKEN>
          cnspec run okta -c "okta.policies.signOn.all(_.rules.all(actions["signon"]["requireFactor"] == true))" --organization <org-name> --token <OKTA_TOKEN>
          ```

        __cnspec shell__

        To audit Okta with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell okta ---organization <org-name> --token <OKTA_TOKEN>
          ```
        
        2. Run the following query:

          ```mql
          okta.policies.signOn.all(_.rules.all(status == "ACTIVE"))
          okta.policies.signOn.all(_.rules.all(actions["signon"]["requireFactor"] == true))
          ```
      remediation: |
        ### Okta Console

        To update via the Okta portal:
        1. Log in as Administrator to the related Okta organization (Identity Engine)
        2. Select from Security the "Global Session Policy" 
        3. "Add policy" in case would like to add specific policy for MFA, otherwise the same procedure can be followed for "Default Policy" 
        4. Assign the Policy to "Everyone"
        5. "Add rule", and make sure "Multifactor Authentication (MFA)" set to "Required"
        6. You can use the Authentication Policy to define multifactor requirements. 
        7. Make sure at the end the status of the rule is "Active"
    query: |
      okta.policies.signOn.all(_.rules.all(status == "ACTIVE"))
      okta.policies.signOn.all(_.rules.all(actions["signon"]["requireFactor"] == true))
  - uid: mondoo-okta-security-okta-enforce-session-lifetime
    title: Ensure a limited session lifetime has been enforced
    severity: 80
    docs:
      desc: |
        Session lifetime determines the maximum idle time of an end user's sign-on session to Okta. By enforcing a limited session lifetime for users, admins reduce the window of time wherein a malicious third party could attempt to access a user's applications from an active session.
        
        This is especially important considering the workforce is no longer  strictly confined to within the walls of an office. This functionality is a must for any organization with employees, contractors, and partners that work from home or other remote locations like coffee shops and  airports. 

        The maximum session lifetime ensures that a session will expire after this maximum session time even if idle time never expires. Setting an upper bound minimizes the risk of session cookies misuse or hijacking.
        User session will expire when the user has been inactive on Okta for the set time period, regardless of Max Okta session lifetime. 
      audit: |
        __cnspec run__

        To audit Okta `cnspec run`:

        Run the following query:

          ```mql
          cnspec run okta -c "okta.policies.signOn.all(_.rules.all(actions["signon"]["session"]["maxSessionIdleMinutes"] <= 120))" --organization <org-name> --token <OKTA_TOKEN>
          cnspec run okta -c "okta.policies.signOn.all(_.rules.all(actions["signon"]["session"]["maxSessionLifetimeMinutes"] <= 1440))" --organization <org-name> --token <OKTA_TOKEN>
          ```

        __cnspec shell__

        To audit Okta with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell okta ---organization <org-name> --token <OKTA_TOKEN>
          ```
        
        2. Run the following query:

          ```mql
          okta.policies.signOn.all(_.rules.all(actions["signon"]["session"]["maxSessionIdleMinutes"] <= 120))
          okta.policies.signOn.all(_.rules.all(actions["signon"]["session"]["maxSessionLifetimeMinutes"] <= 1440))
          ```
      remediation: |
        ### Okta Console

        To update via the Okta portal:
        1. Log in as Administrator to the related Okta organization (Identity Engine)
        2. Select from Security the "Global Session Policy" 
        3. Edit the Rules related to the policy (as well as Default Policy)
        4. In "Session management" select the "Set time limit (Recommended)" and choose 1 Days or less!
        5. In "Expire session after user has been idle on Okta for" choose 2 Hours or less!
        6. Update rule at the end. 
    query: |
      okta.policies.signOn.all(_.rules.all(actions["signon"]["session"]["maxSessionIdleMinutes"] <= 120))
      okta.policies.signOn.all(_.rules.all(actions["signon"]["session"]["maxSessionLifetimeMinutes"] <= 1440))
  - uid: mondoo-okta-security-okta-auth-openid-saml
    title: Ensure OpenID or SAML authentication are used for app access
    severity: 80
    docs:
      desc: |

        Okta supports two protocols for handling federated SSO. OpenID Connect (OIDC) and Security Assertion Markup Language (SAML). The SSO protocol that you choose to implement your integration with is based on your app and use case. For new integrations, OIDC is recommended.

        OpenID Connect is widely used not only in organizations but also in everyday scenarios like “Log in with Google”. The OAuth flow is quite different from the SAML flow. The main difference is that some actions happen in the user’s browser which is called the front channel and some actions directly between the Client Application and the Identity Provider (the backchannel).
        This reduces the attack surface substantially as the most important requests are sent through the backchannel.

        SAML, in the most basic (and the most popular) setup, allows you to pass information about a user between an Identity Provider and a Service Provider (Client Application) via the user’s browser (User Agent). It does not require a direct connection between the Identity Provider and the Service Provider – everything happens via browser redirects. The user requests a signed document that confirms their identity from the Identity Provider, gets authenticated, and then sends the signed document to the Service Provider in order to log in. The signed document can also include information about the user’s privileges, groups, etc.

        Useful comparison can be found here, https://developer.okta.com/docs/guides/oin-sso-overview/
        
      audit: |
        __cnspec run__

        To audit Okta `cnspec run`:

        Run the following query:

          ```mql
          cnspec run okta -c "okta.applications.all(_.signOnMode == "OPENID_CONNECT" ||  _.signOnMode == "SAML_2_0")" --organization <org-name> --token <OKTA_TOKEN>
          ```

        __cnspec shell__

        To audit Okta with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell okta ---organization <org-name> --token <OKTA_TOKEN>
          ```
        
        2. Run the following query:

          ```mql
          okta.applications.all(_.signOnMode == "OPENID_CONNECT" ||  _.signOnMode == "SAML_2_0")
          ```
      remediation: |
        ### Okta Console

        To update via the Okta portal:
        1. Log in as Administrator to the related Okta organization (Identity Engine)
        2. Select from Applications the "Applications" 
        3. Select the "Create App Integration" or "Browse App Catalog" to see the available apps.
        4. At the end the Users need to be assigned to the App. 
    query: |
      okta.applications.all(_.signOnMode == "OPENID_CONNECT" || _.signOnMode == "SAML_2_0")
  - uid: mondoo-okta-security-okta-users-unlock
    title: Ensure normal Users cannot Unlock themselves
    severity: 60
    docs:
      desc: |

        User account that has been locked due to exceeding the password entry limitation, or other reasons, should only inform the administrator and he/she should not be able to unlock themselves.

        In contrast the self-service password recovery might be considered for Okta Admins, https://support.okta.com/help/s/article/How-to-configure-selfservice-account-recovery?language=en_US
        
      audit: |
        __cnspec run__

        To audit Okta `cnspec run`:

        Run the following query:

          ```mql
          cnspec run okta -c "okta.policies.password.all(_.rules.all(actions["selfServiceUnlock"]["access"] == "DENY"))" --organization <org-name> --token <OKTA_TOKEN>
          ```

        __cnspec shell__

        To audit Okta with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell okta ---organization <org-name> --token <OKTA_TOKEN>
          ```
        
        2. Run the following query:

          ```mql
          okta.policies.password.all(_.rules.all(actions["selfServiceUnlock"]["access"] == "DENY")) 
          ```
      remediation: |
        ### Okta Console

        To update via the Okta portal:
        1. Log in as Administrator to the related Okta organization (Identity Engine)
        2. Select from Applications the "Applications" 
        3. Select from Security the "Authenticators" and the password
        4. You can add completely the new password policy by "Add New Password Policy" or edit the existent one. 
        5. Then "Add rule" and make sure under "Users can perform self-service", the "Unlock account" has been not selected. 
        6. Update the rule and you are done!
    query: |
      okta.policies.password.all(_.rules.all(actions["selfServiceUnlock"]["access"] == "DENY")) 
  - uid: mondoo-okta-security-okta-auth-swa-critical
    title: Ensure Secure Web Authentication (SWA) is disabled for critical apps
    severity: 60
    docs:
      desc: |

        Secure Web Authentication (SWA) is an Okta technology that provides Single Sign-On (SSO) functionality to external web applications that don't support federated protocols.

        Administrators can set the credentials for the application, or the end user can enter a specific username and password. Okta keeps the credentials for that  application inside a secure store, encrypted with strong AES-256  encryption. After setting the credentials, end users only need to  authenticate with Okta, and then they can SSO directly into the  application. 

        In a simple terms, SWA is basically a password safe which acts like a password manager, by saving the password in the application directly and okta knows what that password is. 

        It is always recommended to use OpenID or when not possible SAML for critical applications. 
      audit: |
        __cnspec run__

        To audit Okta `cnspec run`:

        Run the following query:

          ```mql
          cnspec run okta -c "okta.applications.none(signOnMode == "AUTO_LOGIN" || signOnMode == "BROWSER_PLUGIN")" --organization <org-name> --token <OKTA_TOKEN>
          ```

        __cnspec shell__

        To audit Okta with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell okta ---organization <org-name> --token <OKTA_TOKEN>
          ```
        
        2. Run the following query:

          ```mql
          okta.applications.none(signOnMode == "AUTO_LOGIN" || signOnMode == "BROWSER_PLUGIN" ) 
          ```
      remediation: |
        ### Okta Console

        To update via the Okta portal:
        1. Log in as Administrator to the related Okta organization (Identity Engine)
        2. Select from Applications the "Applications" 
        3. Select the "Create App Integration" or "Browse App Catalog" to see the available apps.
        4. Integrate the app with the OpenID or SAML.
        4. At the end the Users need to be assigned to the App.
    query: |
      okta.applications.none(signOnMode == "AUTO_LOGIN" || signOnMode == "BROWSER_PLUGIN")
  - uid: mondoo-okta-security-okta-mfa-sign-in
    title: Ensure the option "at every sign-in" has been enabled for MFA
    severity: 40
    docs:
      desc: |
        It is recommended in order to maximize the security posture, the MFA happens at every sign-in attempt. 
      audit: |
        __cnspec run__

        To audit Okta `cnspec run`:

        Run the following query:

          ```mql
          cnspec run okta -c "okta.policies.signOn.all(_.rules.all(actions["signon"]["factorPromptMode"] == "ALWAYS"))" --organization <org-name> --token <OKTA_TOKEN>
          ```

        __cnspec shell__

        To audit Okta with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell okta ---organization <org-name> --token <OKTA_TOKEN>
          ```
        
        2. Run the following query:

          ```mql
          okta.policies.signOn.all(_.rules.all(actions["signon"]["factorPromptMode"] == "ALWAYS"))
          ```
      remediation: |
        ### Okta Console

        To update via the Okta portal:
        1. Log in as Administrator to the related Okta organization (Identity Engine)
        2. Select from Security the "Global Session Policy" 
        3. "Add policy" in case would like to add specific policy for MFA, otherwise the same procedure can be followed for "Default Policy" 
        4. Assign the Policy to "Everyone"
        5. "Add rule", and make sure "Multifactor Authentication (MFA)" set to "Required"
        6. Under "Users will be prompted for MFA" select "At every sign-in"
        7. Make sure at the end the status of the rule is "Active"
    query: |
      okta.policies.signOn.all(_.rules.all(actions["signon"]["factorPromptMode"] == "ALWAYS"))
  - uid: mondoo-okta-security-okta-disable-persist-cookies
    title: Ensure Persist session cookies across browser sessions is disabled
    severity: 40
    docs:
      desc: |
        If enabled, when user reopens the same browser, they will not be asked to sign-in again if the session is still active. 

        Session Cookies (Non-Persistent cookies) are stored in memory and never written to the disk. Session cookies remain active as long as the browser remains active – once the browser is closed, the cookies vanish

      audit: |
        __cnspec run__

        To audit Okta `cnspec run`:

        Run the following query:

          ```mql
          cnspec run okta -c "okta.policies.signOn.all(_.rules.all(actions["signon"]["session"]["usePersistentCookie"] == false))" --organization <org-name> --token <OKTA_TOKEN>
          ```

        __cnspec shell__

        To audit Okta with `cnspec shell`:

        1. Launch `cnspec shell`:

          ```bash
          cnspec shell okta ---organization <org-name> --token <OKTA_TOKEN>
          ```
        
        2. Run the following query:

          ```mql
          okta.policies.signOn.all(_.rules.all(actions["signon"]["session"]["usePersistentCookie"] == false))
          ```
      remediation: |
        ### Okta Console

        To update via the Okta portal:
        1. Log in as Administrator to the related Okta organization (Identity Engine)
        2. Select from Security the "Global Session Policy" 
        3. Edit the Rules related to the policy (as well as Default Policy)
        5. in "Persist session cookies across browser sessions " choose Disabled.
        6. Update rule at the end. 
    query: |
      okta.policies.signOn.all(_.rules.all(actions["signon"]["session"]["usePersistentCookie"] == false))