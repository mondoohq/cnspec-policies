owner_mrn: //policy.api.mondoo.app
policies:
  - uid: github-organization
    name: GitHub Organization Security Best-Practices by Mondoo
    version: 1.3.0
    is_public: true
    scoring_system: 2
    authors:
      - name: Mondoo, Inc
        email: hello@mondoo.com
    docs:
      desc: |
       The GitHub Organization Best-Practices policy bundle provides guidance for establishing minimum recommended security and operational best practices for GitHub organizations.

        __Configuration__

        To scan your GitHub Organization from your workstation:

        1. Enable the GitHub Organization Best-Practices policy in the Policy Hub.
        2. Create a [personal access token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token).
        3. Open a terminal and configure an environment variable with your personal access token:
           
           ```bash
           export GITHUB_TOKEN=<your personal access token>
           ```
          
        4. Run a scan:

           ```bash
           cnspec scan github org <ORG_NAME>
           ```

        If you have questions, comments, or have identified ways to improve this policy, please write us at hello@mondoo.io, or reach out in [GitHub Discussions](https://github.com/orgs/mondoohq/discussions).
    specs:
      - asset_filter:
          query: platform.name == "github-org"
        scoring_queries:
          two-factor-auth:
          verified-domain:
          org-default-permission-level:
        data_queries:
          github-org-data-01:
          github-org-data-02:
  - uid: github-repository
    name: GitHub Repository Security Best-Practices by Mondoo
    version: 1.0.0
    is_public: true
    scoring_system: 2
    authors:
      - name: Mondoo, Inc
        email: hello@mondoo.com
    docs:
      desc: |
       The GitHub Repository Best-Practices policy bundle provides guidance for establishing minimum recommended security and operational best practices for GitHub repositories.

        __Configuration__

        To scan a GitHub repository from your workstation:

        1. Enable the GitHub Repository Best-Practices policy in the Policy Hub.
        2. Create a [personal access token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token).
        3. Open a terminal and configure an environment variable with your personal access token:
           
           ```bash
           export GITHUB_TOKEN=<your personal access token>
           ```
          
        4. Run a scan:

           ```bash
           cnspec scan github repo <repo_name>
           ```
    props:
      requiredPullRequestReviews:
    specs:
      - asset_filter:
          query: |
            platform.name == "github-repo" 
        scoring_queries:
          repo-prevent-force-pushes: null
          repo-require-status-checks-before-merging: null
          repo-required-signed-commits: null
          repo-binary-artifacts: null
          repo-enforce-branch-protection: null
          repo-security-policy: null
          repo-license: null
          repo-code-of-conduct: null
          repo-support-resources: null
          repo-include-authors: null
          repo-pull-request-template: null
          repo-readme-getting-started: null
props:
  - uid: requiredPullRequestReviews
    title: Define the required number of reviewers on pull request
    query: 1

queries:
  - uid: two-factor-auth
    title: Enable Two-factor authentication for all users in the Organization
    severity: 90
    docs:
      desc: |
        Two-factor authentication (2FA) is an extra layer of security used when logging into websites or apps. With 2FA, you have to log in with your username and password and provide another form of authentication that only you know or have access to.
      
      audit: |
        __cnspec shell__

        1. Open a Terminal.
        2. Connect cnspec shell to GitHub  `cnspec shell github org <org_name> --token $GITHUB_TOKEN`
        3. Run the following query

           ```mql
           github.organization.twoFactorRequirementEnabled 
           ```
      remediation: |
        GitHub has several options for configuring 2FA for your organization. To enable 2FA, see [Configuring two-factor authentication](https://docs.github.com/en/authentication/securing-your-account-with-two-factor-authentication-2fa/configuring-two-factor-authentication) in GitHub's documentation. 
    refs:
      - title: "GitHub Docs"
        url: https://github.com/organizations/mondoolabs/settings/security
    query: |
      github.organization.twoFactorRequirementEnabled
  - uid: verified-domain
    title: Organization should have a verified domain attached
    severity: 80
    docs:
      desc: |
        You can verify your ownership of domains with GitHub to confirm your organization's identity. You can also approve domains that GitHub can send email notifications to for members of your organization. After verifying ownership of your organization's domains, a "Verified" badge will display on the organization's profile.
      
      audit: |
        __cnspec shell__

        1. Open a Terminal.
        2. Connect cnspec shell to GitHub  `cnspec shell github org <org_name> --token $GITHUB_TOKEN`
        3. Run the following query

           ```mql
           github.organization.isVerified
           ```
      remediation: |
        GitHub has several options for configuring 2FA for your organization. To enable 2FA, see [Configuring two-factor authentication](https://docs.github.com/en/authentication/securing-your-account-with-two-factor-authentication-2fa/configuring-two-factor-authentication) in GitHub's documentation.
    refs:
      - title: "GitHub Docs"
        url: https://github.com/organizations/mondoolabs/settings/domains
    query: |
      github.organization.isVerified
  - uid: org-default-permission-level
    title: Verify GitHub Organization Base Permissions
    severity: 50
    docs:
      desc: |
        You can set base permissions that apply to all members of an organization when accessing any of the organization's repositories. Base permissions do not apply to outside collaborators.

        By default, members of an organization will have Read permissions to the organization's repositories.
      
      audit: |
        __cnspec shell__

        1. Open a Terminal.
        2. Connect cnspec shell to GitHub  `cnspec shell github org <org_name> --token $GITHUB_TOKEN`
        3. Run the following query

           ```mql
           github.organization.defaultRepositoryPermission
           ```
      remediation: |
        To set base permissions for GitHub, see [Setting base permissions for an organization](https://docs.github.com/en/organizations/managing-access-to-your-organizations-repositories/setting-base-permissions-for-an-organization) in GitHub's documentation.
    refs:
      - title: "GitHub Docs"
        url: https://docs.github.com/en/organizations/managing-access-to-your-organizations-repositories/repository-permission-levels-for-an-organization
    query: |
      github.organization.defaultRepositoryPermission == "none" || github.organization.defaultRepositoryPermission == "read"
  - uid: repo-prevent-force-pushes
    title: Ensure repository does not allow force pushes to the default and release branches
    severity: 80
    docs:
      desc: |
        Branch protection enforces certain workflows or requirements are met before a collaborator can push changes to a branch in a repository. It is recommended that both the default branch and any release branches have branch protection enabled, with branch protection rules applied.   
      audit: |
        __cnspec shell__

        1. Open a Terminal.
        2. Connect cnspec shell to GitHub  `cnspec shell github repo <org/repo_name> --token $GITHUB_TOKEN`
        3. Run the following query

           ```mql
           github.repository.branches.where( isDefault == true) { protected protectionRules { allowForcePushes['enabled'] } }
           ```
      remediation: |
        - Enable branch protection settings in your source hosting provider to avoid force pushes or deletion of your important branches.
        - See [Managing a branch protection rule](https://docs.github.com/en/github/administering-a-repository/managing-a-branch-protection-rule) on the GitHub documentation site.
    refs:
      - title: "GitHub Docs - About protected branches"
        url: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches
    query: |
      github.repository.branches.where( isDefault == true ) {
        name
        protected == true
        protectionRules != null
        protectionRules {
          allowForcePushes['enabled'] == false
        }
      }
  - uid: repo-require-status-checks-before-merging
    title: Ensure status checks are passing before merging PRs on the default and release branches
    severity: 80
    docs:
      desc: |
        Branch protection enforces certain workflows or requirements are met before a collaborator can push changes to a branch in a repository. It is recommended that both the default branch and any release branches have branch protection enabled, with branch protection rules applied.   
      audit: |
        __cnspec shell__

        1. Open a Terminal.
        2. Connect cnspec shell to GitHub  `cnspec shell github repo <org/repo_name> --token $GITHUB_TOKEN`
        3. Run the following query

           ```mql
           github.repository.branches.where( isDefault == true) { protected protectionRules { requiredStatusChecks.length } }
           ```
      remediation: |
        - Enable branch protection settings in your source hosting provider to avoid force pushes or deletion of your important branches.
        - See [Managing a branch protection rule](https://docs.github.com/en/github/administering-a-repository/managing-a-branch-protection-rule) on the GitHub documentation site.
    refs:
      - title: "GitHub Docs - About protected branches"
        url: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches
    query: |
      github.repository.branches.where( isDefault == true ) {
        name
        protected == true
        protectionRules != null
        protectionRules {
          requiredStatusChecks.length > 0
        }
      }
  - uid: repo-required-signed-commits
    title: Ensure repository requires signed commits
    severity: 80
    docs:
      desc: |
        Branch protection enforces certain workflows or requirements are met before a collaborator can push changes to a branch in a repository. It is recommended that both the default branch and any release branches have branch protection enabled, with branch protection rules applied.   
      audit: |
        __cnspec shell__

        1. Open a Terminal.
        2. Connect cnspec shell to GitHub  `cnspec shell github repo <org/repo_name> --token $GITHUB_TOKEN`
        3. Run the following query

           ```mql
           github.repository.branches.where( isDefault == true) { protected protectionRules { requiredSignatures } }
           ```
      remediation: |
        - Enable branch protection settings in your source hosting provider to avoid force pushes or deletion of your important branches.
        - See [Managing a branch protection rule](https://docs.github.com/en/github/administering-a-repository/managing-a-branch-protection-rule) on the GitHub documentation site.
    refs:
      - title: "GitHub Docs - About protected branches"
        url: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches
    query: |
      github.repository.branches.where( isDefault == true ) {
        name
        protectionRules {*}
        protected == true
        protectionRules != null
        protectionRules {
          requiredSignatures == true
        }
      }
  - uid: repo-enforce-branch-protection
    title: Ensure repository does not allow bypass branch protections rules
    severity: 70
    docs:
      desc: |
        Branch protection enforces certain workflows or requirements are met before a collaborator can push changes to a branch in a repository. It is recommended that both the default branch and any release branches have branch protection enabled, with branch protection rules applied.   
      audit: |
        __cnspec shell__

        1. Open a Terminal.
        2. Connect cnspec shell to GitHub  `cnspec shell github repo <org/repo_name> --token $GITHUB_TOKEN`
        3. Run the following query

           ```mql
           github.repository.branches.where( isDefault == true) { protected protectionRules { enforceAdmins['enabled'] } }
           ```
      remediation: |
        - Enable branch protection settings in your source hosting provider to avoid force pushes or deletion of your important branches.
        - See [Managing a branch protection rule](https://docs.github.com/en/github/administering-a-repository/managing-a-branch-protection-rule) on the GitHub documentation site.
    refs:
      - title: "GitHub Docs - About protected branches"
        url: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches
    query: |
      github.repository.branches.where( isDefault == true ) {
        name
        protected == true
        protectionRules != null
        protectionRules {
          enforceAdmins['enabled'] == true
        }
      }
  - uid: repo-security-policy
    title: Ensure repository defines a security policy
    severity: 30
    docs:
      desc: |
        This control tries to determine that the repository defines a security policy. 

        It is recommended to provide instructions for how to report a security vulnerability in your project by adding a security policy to your repository.  
      audit: |
        __cnspec shell__

        1. Open a Terminal.
        2. Connect cnspec shell to GitHub  `cnspec shell github repo <org/repo_name> --token $GITHUB_TOKEN`
        3. Run the following query

           ```mql
           github.repository.files.where( name == /SECURITY.md/ )
           ```
      remediation: |
        See [Adding a security policy to your repository](https://docs.github.com/en/code-security/getting-started/adding-a-security-policy-to-your-repository#adding-a-security-policy-to-your-repository) on the GitHub documentation site. 
    refs:
      - title: "GitHub Docs - Adding a security policy to your repository"
        url: https://docs.github.com/en/code-security/getting-started/adding-a-security-policy-to-your-repository
    query: |
      if ( github.organization.repositories.one(name == ".github") ) {
        github.organization.repositories.where( name == ".github") {
          files.one( name.downcase == "security.md")
        }
      } else {
        github.repository.files.one( name.downcase == "security.md")
      }
  - uid: repo-license
    title: Ensure repository declares a license
    severity: 30
    docs:
      desc: |
        Check tries to determine if the project has published a license. It works by checking standard locations for a file named according to common conventions for licenses.

        A license can give users information about how the source code may or may not be used. The lack of a license will impede any kind of security review or audit and creates a legal risk for potential users.  
      audit: |
        __cnspec shell__

        1. Open a Terminal.
        2. Connect cnspec shell to GitHub  `cnspec shell github repo <org/repo_name> --token $GITHUB_TOKEN`
        3. Run the following query

           ```mql
           github.repository.files.where( name == /LICENSE/ )
           ```
      remediation: |
        See [Adding a security policy to your repository](https://docs.github.com/en/code-security/getting-started/adding-a-security-policy-to-your-repository#adding-a-security-policy-to-your-repository) on the GitHub documentation site. 
    refs:
      - title: "GitHub Docs - Adding a security policy to your repository"
        url: https://docs.github.com/en/code-security/getting-started/adding-a-security-policy-to-your-repository
    query: |
      github.repository.files.one( name == /LICENSE/ )
  - uid: repo-binary-artifacts
    title: Ensure repository does not generate binary artifacts
    severity: 90
    docs:
      desc: |
        This check determines whether the project has generated executable (binary) artifacts in the source repository. Binary artifacts pose security challenges because they cannot be reviewed, and users will often directly use executables if they are included in the source repository, leading to many dangerous behaviors.
      audit: |
        __cnspec shell__

        1. Open a Terminal.
        2. Connect cnspec shell to GitHub  `cnspec shell github repo <org/repo_name> --token $GITHUB_TOKEN`
        3. Run the following query

           ```mql
           github.repository { files { isBinary } files {files { isBinary } } }
           ```
      remediation: |
        Remove the generated executable artifacts from the repository, and then build from source. 
    refs:
      - title: "OSSF Scorecard - Binary Artifacts"
        url: https://github.com/ossf/scorecard/blob/main/docs/checks.md#binary-artifacts
    query: |
      github.repository { files.all( isBinary == false ) files { files.all( isBinary == false )}}
  - uid: repo-support-resources
    title: Ensure repository has a support policy
    severity: 30
    docs:
      desc: |
        GitHub repositories should include a SUPPORT file to let people know about ways to get help with the project.

        To direct people to specific support resources, you can add a SUPPORT file to your repository's root, docs, or .github folder. When someone creates an issue in your repository, they will see a link to your project's SUPPORT file.
    refs:
      - title: Adding support resources to your project
        url: https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/adding-support-resources-to-your-project
    query: |
      // if a .github repo exists, then check if the SUPPORT.md is there
      if ( github.organization.repositories.one(name == ".github") ) {
        github.organization.repositories.where( name == ".github") {
          files.one( name.downcase == "support.md")
        }
      } else {
          github.repository.files.one( name.downcase == "support.md")
      }
  - uid: repo-code-of-conduct
    title: Ensure repository has a code of conduct policy
    severity: 30
    docs:
      desc: |
        Open source code repositories should include a code of conduct. Including a code of conduct helps to clarify the projects values and principles.
      audit: |
        __cnspec shell__

        1. Open a Terminal.
        2. Connect cnspec shell to GitHub  `cnspec shell github repo <org/repo_name> --token $GITHUB_TOKEN`
        3. Run the following query

           ```mql
           github.repository.files.where( name.downcase == "code_of_conduct.md") 
           ```
      remediation: |
        See [Adding a code of conduct to your project](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/adding-a-code-of-conduct-to-your-project) on the GitHub docs site. 
    refs:
      - title: Adding a code of conduct to your project
        url: https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/adding-a-code-of-conduct-to-your-project
    query: |
      // if a .github repo exists, then check if the CODE_OF_CONDUCT.md is there
      if ( github.organization.repositories.one(name == ".github") ) {
        github.organization.repositories.where( name == ".github") {
          files.one( name.downcase == "code_of_conduct.md")
        }
      } else {
        github.repository.files.one( name.downcase == "code_of_conduct.md")
      }
  - uid: repo-include-authors
    title: Ensure the README.md includes authors
    severity: 20
    docs:
      desc: |
        Including the authors in the README provides transparency to the users looking to use the project in their environments. 
      audit: |
        __cnspec shell__

        1. Open a Terminal.
        2. Connect cnspec shell to GitHub  `cnspec shell github repo <org/repo_name> --token $GITHUB_TOKEN`
        3. Run the following query

           ```mql
           github.repository.files.where( name.downcase == "code_of_conduct.md") 
           ```
      remediation: |
        Update the `README.md` with information about the project's authors.      
    query: |
      github.repository.files.where(name.downcase  == "readme.md") {
        content == /Authors/i
      }
  - uid: repo-readme-getting-started
    title: Ensure the README.md includes getting started guide
    severity: 30
    query: |
      github.repository.files.where(name.downcase  == "readme.md") {
        content == /Getting started/i
      }
  - uid: repo-pull-request-template
    title: Ensure a pull request template for your repository exists
    severity: 30
    refs:
      - title: Creating a pull request template for your repository
        url: https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/creating-a-pull-request-template-for-your-repository
    query: |
      github.repository.files.map(name).one( _ == "pull_request_template.md" || _ == "LICENSE.rst" || _ == "LICENSE.txt" )
  - uid: github-org-03
    title: GitHub members should be able to create internal repositories
    query: github.organization.membersCanCreateInternalRepositories == true
  - uid: github-org-04
    title: GitHub organization should not be able to create public repositories
    query: github.organization.membersCanCreatePublicRepositories == false
  - uid: github-org-05
    title: GitHub organization should be able to create private repositories
    query: github.organization.membersCanCreatePrivateRepositories == true
  - uid: github-org-data-01
    title: Gather GitHub Org Name
    query: github.organization.name
  - uid: github-org-data-02
    title: Gather GitHub Org Login
    query: github.organization.login
