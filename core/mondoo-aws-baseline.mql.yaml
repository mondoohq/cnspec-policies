owner_mrn: //policy.api.mondoo.app
policies:
- uid: mondoo-aws-baseline
  name: AWS Baseline by Mondoo
  version: 1.0.0
  is_public: true
  authors:
    - name: Mondoo, Inc
      email: hello@mondoo.com
  docs:
    desc: |-
      AWS Security by Mondoo provides guidance for establishing minimum recommended security and operational best practices for AWS. The controls in this policy bundle are based on AWS's Operational Best Practices recommendations as part of the [AWS Config conformance packs](https://docs.aws.amazon.com/config/latest/developerguide/conformance-packs.html).
        
      If you have questions, comments, or have identified ways to improve this policy, please write us at hello@mondoo.com, or reach out in the [Mondoo Slack Community](https://mondoo.link/slack).
  props:
    maxAccessKeyAge:
    maxCredentialUsageAge:
    iamPasswordPolicyMaxPasswordAge:
    iamPasswordPolicyMinimumPasswordLength:
    iamPasswordPolicyPasswordReusePrevention:
    iamPasswordPolicyRequireLowercaseCharacters:
    iamPasswordPolicyRequireNumbers:
    iamPasswordPolicyRequireSymbols:
    iamPasswordPolicyRequireUppercaseCharacters:
  specs:
  - asset_filter:
      query: |
        platform.name == "aws"
        platform.kind == "api"
    scoring_queries:
      mondoo-aws-iam-root-access-key-check:
      mondoo-aws-root-account-mfa-enabled:
      mondoo-aws-root-account-regular-use:
      mondoo-aws-iam-password-policy:
      mondoo-aws-mfa-enabled-for-iam-console-access:
      mondoo-aws-credentials-unused-45-days-greater-are-disabled:
      mondoo-aws-access-keys-rotated:
      mondoo-aws-iam-group-has-users-check:
      mondoo-aws-iam-users-only-one-access-key:
      mondoo-aws-iam-user-no-inline-policies-check:
      mondoo-aws-iam-policy-no-statements-with-admin-access:
      mondoo-aws-iam-no-stored-expired-certificates:
      mondoo-aws-s3-bucket-versioning-mfa-delete-enabled:
      mondoo-aws-s3-buckets-block-public-access:
      mondoo-aws-no-network-acl-ingress-admin-ports:
      mondoo-aws-no-sec-groups-ingress-admin-ports:
      mondoo-aws-vpc-default-security-group-closed:
props:
  - uid: maxAccessKeyAge
    title: Define the max amount of days an IAM key is allowed to exist before rotation
    query: 90
  - uid: maxCredentialUsageAge
    title: Define the max amount of days a credential is allowed to go unused.
    query: 90
  - uid: iamPasswordPolicyMaxPasswordAge
    title: The amount of time (in days) a password is allowed to exist before being rotated
    query: 90
  - uid: iamPasswordPolicyMinimumPasswordLength
    title: Minimum password length
    query: 14
  - uid: iamPasswordPolicyPasswordReusePrevention
    title: Number of password before allowing reuse
    query: 24
  - uid: iamPasswordPolicyRequireLowercaseCharacters
    title: Denotes whether lowercase characters are required for passwords.
    query: true
  - uid: iamPasswordPolicyRequireNumbers
    title: Denotes whether numbers are required for passwords.
    query: true
  - uid: iamPasswordPolicyRequireSymbols
    title: Denotes whether symbols are required for passwords.
    query: true
  - uid: iamPasswordPolicyRequireUppercaseCharacters
    title: Denotes whether uppercase characters are required for passwords.
    query: true
  - uid: restrictedIncomingTrafficBlockedPort1
    title: Defines a blocked TCP port
    query: 20
  - uid: restrictedIncomingTrafficBlockedPort2
    title: Defines a blocked TCP port
    query: 21
  - uid: restrictedIncomingTrafficBlockedPort3
    title: Defines a blocked TCP port
    query: 3389
  - uid: restrictedIncomingTrafficBlockedPort4
    title: Defines a blocked TCP port
    query: 3306
  - uid: restrictedIncomingTrafficBlockedPort5
    title: Defines a blocked TCP port
    query: 4333
  - uid: s3AccountLevelPublicAccessBlocksBlockPublicAcls
    title: Denotes whether public ACLs should be blocked
    query: true
  - uid: s3AccountLevelPublicAccessBlocksBlockPublicPolicy
    title: Denotes whether public policies should be blocked
    query: true
  - uid: s3AccountLevelPublicAccessBlocksIgnorePublicAcls
    title: Denotes whether public ACLs should be ignored
    query: true
  - uid: s3AccountLevelPublicAccessBlocksRestrictPublicBuckets
    title: Denotes whether public buckets should be blocked
    query: true
  - uid: guarddutyNonArchivedFindingsDaysHighSev
    title: Count of days a high severity finding is allowed to exist in a non-archived state
    query: 1
  - uid: guarddutyNonArchivedFindingsDaysLowSev
    title: Count of days a low severity finding is allowed to exist in a non-archived state
    query: 30
  - uid: guarddutyNonArchivedFindingsDaysMediumSev
    title: Count of days a medium severity finding is allowed to exist in a non-archived state
    query: 7
  - uid: acmCertificateExpirationCheckDaysToExpiration
    title: Specify the number of days a certificate is allowed to exist before expiration
    query: 90
  - uid: numRegionsSecHubEnabled
    title: Define the amount of regions that should have Security Hub enabled
    query: 16
  - uid: ebsVolumeDeleteOnTermination
    title: Defines whether instances should be configured to delete volumes on termination
    query: true
queries:
- uid: mondoo-aws-iam-root-access-key-check
  title: Ensure no root user account access key exists
  docs:
    desc: |
      AWS strongly recommends you do not use the root user for your everyday tasks, even the administrative ones. Instead, adhere to the best practice of using the root user only to create your first IAM user. Then securely lock away the root user credentials and use them to perform only a few account and service management tasks. Anyone with root user credentials for your AWS account has unrestricted access to all the resources in your account, including billing information.
    audit: |
      __Mondoo Shell__

      1. Open a Terminal.
      2. Connect Mondoo Shell to your AWS environment `mondoo shell -t aws`
      3. Run the following query 
      
         ```mql
         aws.iam.credentialReport.where( properties["user"] == "<root_account>") { accessKey1Active accessKey2Active }
         ```

        Example output

        ```mql
        aws.iam.credentialReport.where: [
          0: {
            accessKey1Active: false
            accessKey2Active: false
          }
        ]
        ```
    remediation: |
      If any access keys exist for the root user, see [Deleting access keys for the root user](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user.html#id_root-user_manage_delete-key) in the AWS documentation.

  refs:
   - title: AWS Documentation - AWS account root user
     url: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user.html
  query: |
    # @msg Found ${length} access keys assigned to the root user.
    # 
    # ${{accessKey1Active accessKey2Active accessKey1LastUsedDate accessKey2LastUsedDate}} 
    aws.iam.credentialReport.where( properties["user"] == "<root_account>") {
      accessKey1Active == false 
      accessKey2Active == false 
    }
- uid: mondoo-aws-root-account-mfa-enabled
  title: Ensure MFA is enabled for the "root user" account
  docs: 
    desc: |
      AWS highly recommends that you follow the security best practice to enable multi-factor authentication (MFA) for your root account. Because your root user can perform sensitive operations in your account, adding an additional layer of authentication helps you to better secure your account. Multiple types of MFA are available.
    audit: |
      __Mondoo Shell__

      1. Open a Terminal.
      2. Connect Mondoo Shell to your AWS environment `mondoo shell -t aws`
      3. Run the following query 
      
         ```mql
         aws.iam.credentialReport.where( properties["user"] == "<root_account>") { mfaActive passwordLastChanged passwordLastUsed }
         ```

        Example output

        ```mql
        aws.iam.credentialReport.where: [
          0: {
            mfaActive: true
          }
        ]
        ```
    remediation: |
      To enable MFA for the root user, see [Enable a virtual MFA device for your AWS account root user (console)](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user.html#id_root-user_manage_mfa) in the AWS documentation.
  refs:
    - title: Enable a virtual MFA device for your AWS account root user (console)
      url: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user.html#id_root-user_manage_mfa
  query: |
    # @msg Root user does not have virtual MFA enabled.
    # 
    # ${{ mfaActive passwordLastChanged passwordLastUsed }}      
    aws.iam.credentialReport.where( properties["user"] == "<root_account>") { mfaActive == true }
- uid: mondoo-aws-iam-password-policy
  title: Checks whether the account password policy for IAM users meets the specified requirements
  docs: 
    desc: |
      AWS allows for custom password policies on your AWS account to specify complexity requirements and mandatory rotation periods for your IAM users' passwords. IAM user passwords must meet the default AWS password policy if you don't set a custom password policy. AWS security best practices recommend the following password complexity requirements:
      
      - Require at least one uppercase character in password.
      - Require at least one lowercase character in passwords.
      - Require at least one symbol in passwords.
      - Require at least one number in passwords.
      - Require a minimum password length of at least 14 characters.
      - Require at least 24 passwords before allowing reuse. 
      - Require at least 90 before password expiration 

      This control checks all of the specified password policy requirements.  
    audit: |
      __Mondoo Shell__

      1. Open a Terminal.
      2. Connect Mondoo Shell to your AWS environment `mondoo shell -t aws`
      3. Run the following query 
      
         ```mql
         aws.iam.accountPasswordPolicy
         ```

        Example output

        ```mql
        aws.iam.accountPasswordPolicy: {
          AllowUsersToChangePassword: true
          ExpirePasswords: true
          HardExpiry: false
          MaxPasswordAge: "180"
          MinimumPasswordLength: "14"
          PasswordReusePrevention: "24"
          RequireLowercaseCharacters: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercaseCharacters: true
        }
        ```
    remediation: |
      To change the password complexity requirements, see [Setting an account password policy for IAM users](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html) in the AWS documentation.
  refs:
    - title: Managing user passwords in AWS
      url: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords.html   
  query: |
    # @msg IAM password complexity configuration does not meet requirements.
    # 
    aws.iam.accountPasswordPolicy['RequireUppercaseCharacters'] == props.iamPasswordPolicyRequireUppercaseCharacters
    aws.iam.accountPasswordPolicy['RequireLowercaseCharacters'] == props.iamPasswordPolicyRequireLowercaseCharacters
    aws.iam.accountPasswordPolicy['RequireSymbols'] == props.iamPasswordPolicyRequireSymbols
    aws.iam.accountPasswordPolicy['RequireNumbers'] == props.iamPasswordPolicyRequireNumbers
    aws.iam.accountPasswordPolicy['MinimumPasswordLength'] >= props.iamPasswordPolicyMinimumPasswordLength
    aws.iam.accountPasswordPolicy['PasswordReusePrevention'] == props.iamPasswordPolicyPasswordReusePrevention
    aws.iam.accountPasswordPolicy['MaxPasswordAge'] <= props.iamPasswordPolicyMaxPasswordAge
- uid: mondoo-aws-access-keys-rotated
  title: Checks whether the active access keys are rotated within the number of days specified in maxAccessKeyAge (default 90)
  docs:
    desc: |
      It is highly recommended that you regularly rotate (change) IAM user access keys to reduce the risk of unwanted access to your account.
    audit: |
      __Mondoo Shell__

      1. Open a Terminal.
      2. Connect Mondoo Shell to your AWS environment `mondoo shell -t aws`
      3. Run the following query 
      
         ```mql
         aws.iam.credentialReport.where( accessKey1Active == true || accessKey2Active == true ) { properties['user'] accessKey1Active accessKey2Active accessKey1LastRotated accessKey2LastRotated }
         ```

        Example output

        ```mql
        aws.iam.credentialReport.where: [
          0: {
            accessKey1LastRotated: 2021-09-01 01:32:29 +0000 +0000
            accessKey2LastRotated: Never
            accessKey1Active: true
            accessKey2Active: false
            properties[user]: "jimmy"
          }
          1: {
            accessKey1LastRotated: 2021-09-09 19:16:35 +0000 +0000
            accessKey2LastRotated: Never
            accessKey1Active: true
            accessKey2Active: false
            properties[user]: "robert"
          }
          2: {
            accessKey1LastRotated: 2021-06-15 07:18:34 +0000 +0000
            accessKey2LastRotated: Never
            accessKey1Active: true
            accessKey2Active: false
            properties[user]: "johnpaul"
          }
          3: {
            accessKey1LastRotated: 2021-09-29 21:53:04 +0000 +0000
            accessKey2LastRotated: Never
            accessKey1Active: true
            accessKey2Active: false
            properties[user]: "bonzo"
          }
        ]
        ```
    remediation: |
      To learn how to rotate AWS access keys, see [Rotating access keys](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html#Using_RotateAccessKey) in the AWS documentation.
  refs:
   - title: AWS Documentation - Managing access keys for IAM users
     url: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html
  query: |
    # @msg Found ${length} access keys that have not been rotated in the last ${props.maxAccessKeyAge}:
    # 
    # ${{ properties['user'] accessKey1Active accessKey1LastRotated accessKey1LastUsedDate }}
    aws.iam.credentialReport.where( accessKey1Active == true ) { time.now - accessKey1LastRotated < 90 * time.day }

    # @msg Found ${length} access keys that have not been rotated in the last ${props.maxAccessKeyAge}:
    # 
    # ${{ properties['user'] accessKey2Active accessKey2LastRotated accessKey2LastUsedDate }}
    aws.iam.credentialReport.where( accessKey2Active == true ) { time.now - accessKey2LastRotated < 90 * time.day }
- uid: mondoo-aws-root-account-regular-use
  title: Eliminate use of the root user for administrative and daily tasks
  query: |
    aws.iam.credentialReport.where( properties["user"] == "<root_account>")  {
      accessKey1Active == false 
      accessKey2Active == false 
      properties['password_last_used'] == "no_information" || 
        time.now - parse.date(properties['password_last_used'], 'RFC3339') > 14 * time.day || 
          time.now - parse.date(properties['user_creation_time'], 'RFC3339') < 14 * time.day
    } 
- uid: mondoo-aws-mfa-enabled-for-iam-console-access
  title: Ensure multi-factor authentication (MFA) is enabled for all IAM users that have a console password
  docs: 
    desc: |
      AWS highly recommends to follow the security best practice to enable multi-factor authentication (MFA) for all accounts with console access. MFA adds an additional layer of authentication helps you to better secure your accounts. Multiple types of MFA are available.
    audit: |
      __Mondoo Shell__

      1. Open a Terminal.
      2. Connect Mondoo Shell to your AWS environment `mondoo shell -t aws`
      3. Run the following query 
      
         ```mql
         aws.iam.credentialReport.where(passwordEnabled == true) { arn mfaActive }
         ```

        Example output

        ```mql
        aws.iam.credentialReport.where: [
          0: {
            mfaActive: false
            arn: "arn:aws:iam::123456789098:user/robert"
          }
          1: {
            mfaActive: false
            arn: "arn:aws:iam::123456789098:user/jimmy"
          }
          2: {
            mfaActive: true
            arn: "arn:aws:iam::123456789098:user/johnpaul"
          }
          3: {
            mfaActive: false
            arn: "arn:aws:iam::123456789098:user/bonzo"
          }
        ]
        ```
    remediation: |
      To enable MFA for any user accounts with AWS console access, see [Enabling MFA devices for users in AWS](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user.html#id_root-user_manage_delete-key) in the AWS documentation.
  refs:
    - title: Using multi-factor authentication (MFA) in AWS
      url: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa.html         
  query: |
    # @msg Found ${length} users that do not have MFA enabled.
    # 
    # ${{arn passwordLastUsed passwordLastChanged properties['user'] }}     
    aws.iam.credentialReport.where(passwordEnabled == true).all(mfaActive == true)
- uid: mondoo-aws-iam-group-has-users-check
  title: Checks whether IAM groups have at least one IAM user
  docs:
    desc: |
      AWS Identity and Access Management (IAM) can help you incorporate the principles of least privilege and separation of duties with access permissions and authorizations by ensuring that IAM groups have at least one IAM user. Placing IAM users in groups based on their associated permissions or job function is one way to incorporate least privilege.
    audit: |
      __Mondoo Shell__

      1. Open a Terminal.
      2. Connect Mondoo Shell to your AWS environment `mondoo shell -t aws`
      3. Run the following query 
      
         ```mql
         aws.iam.groups.where( usernames.length == 0 ) {*}
         ```

        Example output

        ```mql
        aws.iam.groups.where: [
          0: {
            name: "MyUserGroup"
            id: "AGPASSOFBMF7OMHVGHACB"
            createDate: 2022-01-11 18:19:26 +0000 UTC
            usernames: []
            arn: "arn:aws:iam::177043759486:group/MyUserGroup"
          }
        ]
        ```
    remediation: |
      To delete empty IAM groups, see [Deleting an IAM user group](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_delete.html) in the AWS documentation.
  refs:
   - title: AWS Documentation -Managing IAM user groups
     url: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage.html
  query: |
    # @msg Found ${length} IAM groups that have no users assigned to the group:
    # 
    # ${{ name id arn createDate usernames }}
    aws.iam.groups.all(usernames.length > 0)
- uid: mondoo-aws-credentials-unused-45-days-greater-are-disabled
  title: Ensure credentials unused for 45 days or greater are disabled
  query: |
    aws.iam.credentialReport.where(passwordEnabled == true).all(time.now - passwordLastUsed < 45 * time.day)
- uid: mondoo-aws-iam-users-only-one-access-key
  title: Ensure there is only one active access key available for any single IAM user
  query: aws.iam.users.all(accessKeys[0].length <= 1)
- uid: mondoo-aws-iam-user-no-inline-policies-check
  title: Ensure IAM Users Receive Permissions Only Through Groups
  docs: 
    desc: |
      AWS that IAM users must inherit permissions from IAM groups or roles. This policy checks that none of your IAM users have policies attached directly to the user. The rule is NONCOMPLIANT if there is at least one IAM user with policies attached.
    audit: |
      __Mondoo Shell__

      1. Open a Terminal.
      2. Connect Mondoo Shell to your AWS environment `mondoo shell -t aws`
      3. Run the following query 
      
         ```mql
         aws.iam.users.where( policies.length != 0 || attachedPolicies.length != 0 ) { name arn policies attachedPolicies }
         ```

        Example output

        ```mql
        aws.iam.users.where: [
          0: {
            arn: "arn:aws:iam::1234567890987:user/1234567890987-alice"
            name: "1234567890987-alice"
            attachedPolicies: []
            policies: [
              0: "excess_policy"
            ]
          }
          1: {
            arn: "arn:aws:iam::1234567890987:user/maria"
            name: "maria"
            attachedPolicies: [
              0: aws.iam.policy id = arn:aws:iam::1234567890987:policy/ec2-instance-connect-sendssh
            ]
            policies: []
          }
          2: {
            arn: "arn:aws:iam::1234567890987:user/bobby"
            name: "bobby"
            attachedPolicies: [
              0: aws.iam.policy id = arn:aws:iam::1234567890987:policy/terraform20210901011436036200000004
            ]
            policies: []
          }
        ]
        ```
    remediation: |
      To learn how to remove inline policies from IAM users, see [Removing a permissions policy from a user (console)](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_change-permissions.html#users_change_permissions-remove-policy-console) in the AWS documentation.
  refs:
    - title: Managed policies and inline policies
      url: https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html
  query: |
    # @msg Found ${length} users with AWS managed policies attached:
    # 
    # ${{ name arn attachedPolicies }}   
    aws.iam.users.all( attachedPolicies.length == 0 )

    # @msg Found ${length} users with inline policies attached:
    # 
    # ${{ name arn policies }}  
    aws.iam.users.all( policies.length == 0 )
- uid: mondoo-aws-iam-policy-no-statements-with-admin-access
  title: Ensure IAM policies that allow full "*:*" administrative privileges are not attached
  query: |
    aws.iam.attachedPolicies.where(scope == "local") { 
      defaultVersion { 
        document['Statement'].where(_['Effect'] == "Allow").none(
          _['Action'][0] == "*" && _['Resource'][0] == "*"
        ) 
      }
    }
- uid: mondoo-aws-iam-no-stored-expired-certificates
  title: Ensure that all the expired SSL/TLS certificates stored in AWS IAM are removed
  query: |
    aws.iam.serverCertificates.length == 0 || aws.iam.serverCertificates.all(parse.date(_['Expiration'], 'RFC3339') > time.now)
- uid: mondoo-aws-s3-bucket-versioning-mfa-delete-enabled
  title: Checks that versioning and MFA Delete is enabled for all buckets
  query: |-
    aws.s3.buckets.all(
      versioning['Status'] == "Enabled" && versioning['MFADelete'] == "Enabled" 
    )
- uid: mondoo-aws-s3-buckets-block-public-access
  title: Ensure that S3 Buckets are configured with 'Block public access (bucket settings)'
  query: |
    aws.s3.buckets.all(
      publicAccessBlock['BlockPublicAcls'] == true && 
      publicAccessBlock['BlockPublicPolicy'] == true &&
      publicAccessBlock['IgnorePublicAcls'] == true &&
      publicAccessBlock['RestrictPublicBuckets'] == true
    )
- uid: mondoo-aws-no-network-acl-ingress-admin-ports
  title: Ensure no Network ACLs allow ingress from 0.0.0.0/0 to remote server administration ports
  query: aws.ec2.networkAcls.all( entries.where(egress == false && ruleAction == "allow").all(portRange != null))
- uid: mondoo-aws-no-sec-groups-ingress-admin-ports
  title: Ensure no security groups allow ingress from 0.0.0.0/0 to remote server administration ports
  query: |
    aws.ec2.securityGroups.where( ipPermissions { ipRanges.contains('0.0.0.0/0') && ipProtocol == 'tcp' }) {
      ipPermissions.none (
        fromPort > 22 || toPort < 22
      )
    }
    aws.ec2.securityGroups.where( ipPermissions { ipv6Ranges.contains('::/0') && ipProtocol == 'tcp' }) {
      ipPermissions.none (
        fromPort > 22 || toPort < 22
      )
    }
    aws.ec2.securityGroups.where( ipPermissions { ipRanges.contains('0.0.0.0/0') && ipProtocol == 'tcp' }) {
      ipPermissions.none (
        fromPort > 3389 || toPort < 3389
      )
    }
    aws.ec2.securityGroups.where( ipPermissions { ipv6Ranges.contains('::/0') && ipProtocol == 'tcp' }) {
      ipPermissions.none (
        fromPort > 3389 || toPort < 3389
      )
    }
- uid: mondoo-aws-vpc-default-security-group-closed
  title: Ensure the default security group of every VPC restricts all traffic
  query: |
    aws.ec2.securityGroups.where(name == "default") {
      ipPermissions.all(ipRanges.length == 0 && ipv6Ranges.length == 0 && fromPort == 0 && toPort == 0)
      ipPermissionsEgress.all(ipRanges.length == 0 && ipv6Ranges.length == 0 && fromPort == 0 && toPort == 0)
    }