# Copyright (c) Mondoo, Inc.
# SPDX-License-Identifier: BUSL-1.1
policies:
  - uid: mondoo-docker-security
    name: Docker Container Security
    version: 1.0.0
    license: BUSL-1.1
    tags:
      mondoo.com/category: security
      mondoo.com/platform: linux,docker
    authors:
      - name: Mondoo, Inc
        email: hello@mondoo.com
    docs:
      desc: |-
        ## Overview

        The Docker Container Security policy by Mondoo provides guidance for establishing secure Docker container configurations and deployments.

        If you have questions, comments, or have identified ways to improve this policy, please write us at hello@mondoo.com, or reach out in GitHub Discussions.

        ## Remote scan

        Remote scans use cnspec providers to retrieve on-demand scan results without having to install any agents.

        For a complete list of providers run:

        ```bash
        cnspec scan --help
        ```

        ## Prerequisites

        Remote scans of Docker containers require Docker CLI access to the host where the containers are running.

        Scan a Docker environment

        Open a terminal and configure Docker CLI access to your Docker environment:

        ```bash
        docker login
        ```

        Run a scan of the Docker environment:

        ```bash
        cnspec scan docker
        ```

        ## Join the community!

        Our goal is to build policies that are simple to deploy, accurate, and actionable.

        If you have any suggestions for how to improve this policy, or if you need support, join the community in GitHub Discussions.
    groups:
      - title: Docker Container Security
        filters: |
          asset.platform == "docker"
        checks:
          - uid: mondoo-docker-security-no-management-ports
          - uid: mondoo-docker-security-no-insecure-certificate-validation-yum
          - uid: mondoo-docker-security-no-insecure-certificate-validation-apt
          - uid: mondoo-docker-security-no-insecure-certificate-validation-curl
          - uid: mondoo-docker-security-no-insecure-certificate-validation-wget
          - uid: mondoo-docker-security-no-sudo-commands
          - uid: mondoo-docker-security-no-gpg-skip-yum
          - uid: mondoo-docker-security-non-root-user
          - uid: mondoo-docker-security-use-copy-instead-of-add
          - uid: mondoo-docker-best-practice-no-latest-tag
          - uid: mondoo-docker-best-practice-use-apt-get
    scoring_system: highest impact
queries:
  - uid: mondoo-docker-security-no-management-ports
    title: Don’t expose management ports
    impact: 100
    mql: |
      docker.file.stages.all(expose.all(port != 22))
      docker.file.stages.all(expose.all(port != 2375))
      docker.file.stages.all(expose.all(port != 8500))
      docker.file.stages.all(expose.all(port != 6443))
    docs:
      desc: |-
        Management ports such as SSH (port 22), Docker Remote API (port 2375), Consul (port 8500), and Kubernetes API (port 6443) are commonly targeted by attackers. Exposing these ports in Docker containers increases the risk of unauthorized access and security vulnerabilities. This test ensures that these management ports are not exposed in Docker container configurations.
      remediation: |-
        Review and update your Dockerfile to ensure that management ports (22 for SSH, 2375 for Docker Remote API, 8500 for Consul HTTP API, 6443 for Kubernetes API) are not exposed. 
        - Remove or restrict the exposure of these ports using the `EXPOSE` instruction in your Dockerfile.
        - Use Docker's port mapping options (`-p` or `--publish`) cautiously to avoid exposing these ports.
        - Ensure that any required management access is secured and appropriately managed.
  - uid: mondoo-docker-security-no-insecure-certificate-validation-yum
    title: Ensure Package Manager Certificate Validation Is Enabled
    impact: 100
    mql: |
      docker.file.stages.all(run.none(script.contains("--nogpgcheck")))
      docker.file.stages.all(run.none(script.contains("--no-check-certificate")))
      docker.file.stages.all(run.none(script.contains("--no-gpg-check")))
    docs:
      desc: |-
        Ensure that package managers like YUM, DNF, APT, and others in Dockerfiles do not disable SSL certificate validation.
        Disabling certificate validation can expose the system to man-in-the-middle attacks and other security vulnerabilities.
      remediation: |-
        Review the Dockerfile and ensure that package managers are configured to use SSL certificate validation.
        Remove any insecure options such as `--nogpgcheck`, `--no-check-certificate`, `--no-gpg-check`, and similar flags. Use secure practices for package installations to maintain system integrity.
  - uid: mondoo-docker-security-no-insecure-certificate-validation-apt
    title: Don’t disable certificate validation in apt
    impact: 100
    mql: |
      docker.file.stages.all(run.none(script.contains("--allow-insecure-repositories")))
    docs:
      desc: |-
        Ensure that the `--allow-insecure-repositories` option is not used with the APT package manager in Dockerfile `RUN` instructions.
        Disabling certificate validation can expose the container to security risks by allowing insecure repositories.
      remediation: |-
        Review the Dockerfile `RUN` instructions to ensure that APT commands do not use the `--allow-insecure-repositories` option.
        Configure APT to use secure repositories and avoid options that bypass certificate validation.
  - uid: mondoo-docker-security-no-insecure-certificate-validation-curl
    title: Don’t disable certificate validation in curl
    impact: 100
    mql: |
      docker.file.stages.all(run.none(script.contains("--insecure")))
      docker.file.stages.all(run.none(script.contains("-k")))
    docs:
      desc: |-
        Ensure that the `--insecure` or `-k` options are not used with `curl` in Docker containers.
        Disabling certificate validation can expose the container to man-in-the-middle attacks and other security risks.
      remediation: |-
        Review the `CMD` or `ENTRYPOINT` commands in your Dockerfile and any scripts executed within the container.
        Avoid using `curl` with `--insecure` or `-k` options. Ensure that proper SSL certificate validation is enabled for all `curl` operations.
  - uid: mondoo-docker-security-no-insecure-certificate-validation-wget
    title: Don’t disable certificate validation in wget
    impact: 100
    mql: |
      docker.file.stages.all(run.none(script.contains("--no-check-certificate")))
    docs:
      desc: |-
        Ensure that the `--no-check-certificate` option is not used with wget in Dockerfile `RUN` instructions.
        Disabling certificate validation can expose the container to security risks by allowing insecure connections.
      remediation: |-
        Review the Dockerfile `RUN` instructions to ensure that wget commands do not use the `--no-check-certificate` option.
        Configure wget to use certificate validation to enhance the security of your container configurations.
  - uid: mondoo-docker-security-no-sudo-commands
    title: Don’t run commands using sudo
    impact: 100
    mql: |
      docker.file.stages.all(run.none(script.contains("sudo")))
    docs:
      desc: |-
        Ensure that Dockerfiles do not use `sudo` to run commands. The use of `sudo` within a Dockerfile can lead to privilege escalation risks,
        as it grants elevated permissions that can be exploited if not handled properly.
        By avoiding `sudo`, you ensure that all commands run with the default user privileges, which enhances the security of the container.
      remediation: |-
        Review the Dockerfile and remove any instances of `sudo`. Ensure that all commands are executed with the least privileges required.
        Configure containers to operate with non-root users where possible, and avoid privilege escalation techniques.
  - uid: mondoo-docker-security-no-gpg-skip-yum
    title: Don’t skip GPG validation in YUM/DNF
    impact: 100
    mql: |
      docker.file.stages.all(run.none(script.contains("--nogpgcheck")))
    docs:
      desc: |-
        Ensure that the `--nogpgcheck` option is not used with YUM or DNF in Dockerfile `RUN` instructions.
        Skipping GPG validation can expose the container to risks by allowing packages with untrusted or missing GPG signatures.
      remediation: |-
        Review the Dockerfile `RUN` instructions to ensure that YUM or DNF commands do not use the `--nogpgcheck` option.
        Configure YUM or DNF to perform GPG validation to enhance the security of your container configurations.
  - uid: mondoo-docker-security-non-root-user
    title: Prevent Running Containers as Root User
    impact: 100
    mql: |
      firstStageIdentifier = docker.file.stages[0].from.image
      docker.file.stages.where(from.image != firstStageIdentifier).all(user != empty)
      docker.file.stages.where(from.image != firstStageIdentifier).all(user.user != "root")
    docs:
      desc: |-
        Containers should not run as the root user for security reasons. This test ensures that the Docker container is configured to run as a non-root user, reducing the risk of privilege escalation and potential security breaches.
      remediation: |-
        Update the Dockerfile to use a non-root user. Set the `USER` directive in the Dockerfile to specify a non-root user. This practice minimizes the impact of potential security vulnerabilities by avoiding unnecessary privilege.
  - uid: mondoo-docker-security-use-copy-instead-of-add
    title: Use COPY instead of ADD
    impact: 80
    mql: |
      docker.file.stages.all(add.present())
      docker.file.stages.all(add.not(missing.source))
    docs:
      desc: |-
        Prefer using `COPY` instead of `ADD` for copying files into the container. The `ADD` command has additional functionalities that can inadvertently introduce security risks, such as extracting archives or downloading remote files.
      remediation: |-
        Review the Dockerfile and replace any `ADD` commands with `COPY` commands where applicable.
        `COPY` is more predictable and avoids the unintended behavior associated with `ADD`.
  - uid: mondoo-docker-best-practice-no-latest-tag
    title: Avoid Using Latest Tag
    impact: 80
    mql: |
      docker.file.stages.all(from.tag == "latest")
    docs:
      desc: |-
        Using the `latest` tag for Docker images can lead to unpredictable builds and potential security risks due to the automatic updates of the image.
        It is a best practice to specify exact image versions to ensure consistency and control over the environment.
      remediation: |-
        Review the Dockerfile and avoid using the `latest` tag for base images. Specify exact versions or tags to ensure that builds are reproducible and controlled.
  - uid: mondoo-docker-best-practice-use-apt-get
    title: Prefer apt-get over apt
    impact: 60
    mql: |
      docker.file.stages.all(run.none(script.contains("apt")))
      docker.file.stages.all(run.any(script.contains("apt-get")))
    docs:
      desc: |-
        Prefer using `apt-get` over `apt` in Dockerfile `RUN` instructions for package management. The `apt` command is intended for interactive use and may not work as expected in non-interactive environments like Docker builds.
      remediation: |-
        Review Dockerfile `RUN` instructions and replace any `apt` commands with `apt-get` where appropriate. `apt-get` is more suitable for non-interactive environments.
